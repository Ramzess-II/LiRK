
LIRK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f8  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008450  08008450  00009450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008490  08008490  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  08008490  08008490  00009490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008498  08008498  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008498  08008498  00009498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800849c  0800849c  0000949c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080084a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000622c  20000018  080084b8  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006244  080084b8  0000a244  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cd1  00000000  00000000  0000a04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c63  00000000  00000000  00021d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00024988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f25  00000000  00000000  00025ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210f7  00000000  00000000  00026c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001894d  00000000  00000000  00047d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf5b7  00000000  00000000  00060651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fc08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005260  00000000  00000000  0012fc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00134eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000018 	.word	0x20000018
 8000274:	00000000 	.word	0x00000000
 8000278:	08008438 	.word	0x08008438

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000001c 	.word	0x2000001c
 8000294:	08008438 	.word	0x08008438

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fdd4 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f812 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9cc 	bl	8000958 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005c0:	f000 f880 	bl	80006c4 <MX_GPDMA1_Init>
  MX_GPDMA2_Init();
 80005c4:	f000 f89e 	bl	8000704 <MX_GPDMA2_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f918 	bl	80007fc <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f978 	bl	80008c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005d0:	f000 f928 	bl	8000824 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	doWork();
 80005d4:	f000 fcfc 	bl	8000fd0 <doWork>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  work();
 80005d8:	f000 fd0a 	bl	8000ff0 <work>
 80005dc:	e7fc      	b.n	80005d8 <main+0x28>
	...

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09c      	sub	sp, #112	@ 0x70
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2250      	movs	r2, #80	@ 0x50
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 fef6 	bl	80083e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <SystemClock_Config+0xdc>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4a2c      	ldr	r2, [pc, #176]	@ (80006bc <SystemClock_Config+0xdc>)
 800060c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000610:	6113      	str	r3, [r2, #16]
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <SystemClock_Config+0xdc>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800061e:	bf00      	nop
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <SystemClock_Config+0xdc>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	2b08      	cmp	r3, #8
 800062a:	d1f9      	bne.n	8000620 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800063a:	2303      	movs	r3, #3
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000642:	233e      	movs	r3, #62	@ 0x3e
 8000644:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000652:	230c      	movs	r3, #12
 8000654:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000656:	2300      	movs	r3, #0
 8000658:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800065a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fff7 	bl	8002658 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 f9ea 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	231f      	movs	r3, #31
 8000676:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2303      	movs	r3, #3
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2105      	movs	r1, #5
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fc18 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069e:	f000 f9d3 	bl	8000a48 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <SystemClock_Config+0xe0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <SystemClock_Config+0xe0>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	6013      	str	r3, [r2, #0]
}
 80006b2:	bf00      	nop
 80006b4:	3770      	adds	r7, #112	@ 0x70
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	44020800 	.word	0x44020800
 80006c0:	40022000 	.word	0x40022000

080006c4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_GPDMA1_Init+0x3c>)
 80006cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000700 <MX_GPDMA1_Init+0x3c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_GPDMA1_Init+0x3c>)
 80006dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	201b      	movs	r0, #27
 80006ee:	f000 fef1 	bl	80014d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80006f2:	201b      	movs	r0, #27
 80006f4:	f000 ff08 	bl	8001508 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	44020c00 	.word	0x44020c00

08000704 <MX_GPDMA2_Init>:
  * @brief GPDMA2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GPDMA2_Init 0 */

  /* USER CODE END GPDMA2_Init 0 */

  DMA_TriggerConfTypeDef TriggerConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA2_CLK_ENABLE();
 8000714:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <MX_GPDMA2_Init+0xec>)
 8000716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800071a:	4a35      	ldr	r2, [pc, #212]	@ (80007f0 <MX_GPDMA2_Init+0xec>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_GPDMA2_Init+0xec>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* GPDMA2 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA2_Channel0_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	205a      	movs	r0, #90	@ 0x5a
 8000738:	f000 fecc 	bl	80014d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel0_IRQn);
 800073c:	205a      	movs	r0, #90	@ 0x5a
 800073e:	f000 fee3 	bl	8001508 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA2_Init 1 */

  /* USER CODE END GPDMA2_Init 1 */
  handle_GPDMA2_Channel0.Instance = GPDMA2_Channel0;
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000744:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <MX_GPDMA2_Init+0xf4>)
 8000746:	601a      	str	r2, [r3, #0]
  handle_GPDMA2_Channel0.Init.Request = DMA_REQUEST_SW;
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 800074a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074e:	605a      	str	r2, [r3, #4]
  handle_GPDMA2_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  handle_GPDMA2_Channel0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075c:	60da      	str	r2, [r3, #12]
  handle_GPDMA2_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 800075e:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000760:	2208      	movs	r2, #8
 8000762:	611a      	str	r2, [r3, #16]
  handle_GPDMA2_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8000764:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  handle_GPDMA2_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 800076c:	2202      	movs	r2, #2
 800076e:	619a      	str	r2, [r3, #24]
  handle_GPDMA2_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000772:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000776:	61da      	str	r2, [r3, #28]
  handle_GPDMA2_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 800077a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800077e:	621a      	str	r2, [r3, #32]
  handle_GPDMA2_Channel0.Init.SrcBurstLength = 1;
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000782:	2201      	movs	r2, #1
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA2_Channel0.Init.DestBurstLength = 1;
 8000786:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000788:	2201      	movs	r2, #1
 800078a:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA2_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 800078e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA2_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA2_Channel0.Init.Mode = DMA_NORMAL;
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 800079c:	2200      	movs	r2, #0
 800079e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA2_Channel0) != HAL_OK)
 80007a0:	4814      	ldr	r0, [pc, #80]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 80007a2:	f000 ff6f 	bl	8001684 <HAL_DMA_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_GPDMA2_Init+0xac>
  {
    Error_Handler();
 80007ac:	f000 f94c 	bl	8000a48 <Error_Handler>
  }
  TriggerConfig.TriggerMode = DMA_TRIGM_SINGLE_BURST_TRANSFER;
 80007b0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
  TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80007b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80007ba:	60bb      	str	r3, [r7, #8]
  TriggerConfig.TriggerSelection = GPDMA2_TRIGGER_TIM2_TRGO;
 80007bc:	2322      	movs	r3, #34	@ 0x22
 80007be:	60fb      	str	r3, [r7, #12]
  if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA2_Channel0, &TriggerConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 80007c6:	f001 fd0f 	bl	80021e8 <HAL_DMAEx_ConfigTrigger>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_GPDMA2_Init+0xd0>
  {
    Error_Handler();
 80007d0:	f000 f93a 	bl	8000a48 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80007d4:	2110      	movs	r1, #16
 80007d6:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <MX_GPDMA2_Init+0xf0>)
 80007d8:	f001 fab4 	bl	8001d44 <HAL_DMA_ConfigChannelAttributes>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_GPDMA2_Init+0xe2>
  {
    Error_Handler();
 80007e2:	f000 f931 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA2_Init 2 */

  /* USER CODE END GPDMA2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	44020c00 	.word	0x44020c00
 80007f4:	20000034 	.word	0x20000034
 80007f8:	40021050 	.word	0x40021050

080007fc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000800:	2000      	movs	r0, #0
 8000802:	f001 fedd 	bl	80025c0 <HAL_ICACHE_ConfigAssociativityMode>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800080c:	f000 f91c 	bl	8000a48 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000810:	f001 fef6 	bl	8002600 <HAL_ICACHE_Enable>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800081a:	f000 f915 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000842:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_TIM2_Init+0x98>)
 8000844:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000848:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_TIM2_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_TIM2_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_TIM2_Init+0x98>)
 8000858:	f242 7210 	movw	r2, #10000	@ 0x2710
 800085c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_TIM2_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_TIM2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086a:	4814      	ldr	r0, [pc, #80]	@ (80008bc <MX_TIM2_Init+0x98>)
 800086c:	f004 ff40 	bl	80056f0 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000876:	f000 f8e7 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	@ (80008bc <MX_TIM2_Init+0x98>)
 8000888:	f005 f844 	bl	8005914 <HAL_TIM_ConfigClockSource>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000892:	f000 f8d9 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000896:	2320      	movs	r3, #32
 8000898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <MX_TIM2_Init+0x98>)
 80008a4:	f005 fb14 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ae:	f000 f8cb 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000ac 	.word	0x200000ac

080008c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	@ (8000954 <MX_USART1_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 800090a:	f005 fb49 	bl	8005fa0 <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f898 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 800091c:	f007 fc95 	bl	800824a <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f88f 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 800092e:	f007 fcca 	bl	80082c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f886 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_USART1_UART_Init+0x90>)
 800093e:	f007 fc4b 	bl	80081d8 <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f87e 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000170 	.word	0x20000170
 8000954:	40013800 	.word	0x40013800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b33      	ldr	r3, [pc, #204]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 8000970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000974:	4a31      	ldr	r2, [pc, #196]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 8000976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 800098e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000992:	4a2a      	ldr	r2, [pc, #168]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800099c:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b0:	4a22      	ldr	r2, [pc, #136]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ba:	4b20      	ldr	r3, [pc, #128]	@ (8000a3c <MX_GPIO_Init+0xe4>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, out0_Pin|out1_Pin|out2_Pin|out3_Pin
 80009c8:	2200      	movs	r2, #0
 80009ca:	21ff      	movs	r1, #255	@ 0xff
 80009cc:	481c      	ldr	r0, [pc, #112]	@ (8000a40 <MX_GPIO_Init+0xe8>)
 80009ce:	f001 fdc5 	bl	800255c <HAL_GPIO_WritePin>
                          |out4_Pin|out5_Pin|out6_Pin|out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d8:	481a      	ldr	r0, [pc, #104]	@ (8000a44 <MX_GPIO_Init+0xec>)
 80009da:	f001 fdbf 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : out0_Pin out1_Pin out2_Pin out3_Pin
                           out5_Pin out6_Pin out7_Pin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin
 80009de:	23ef      	movs	r3, #239	@ 0xef
 80009e0:	60fb      	str	r3, [r7, #12]
                          |out5_Pin|out6_Pin|out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4812      	ldr	r0, [pc, #72]	@ (8000a40 <MX_GPIO_Init+0xe8>)
 80009f6:	f001 fc5f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80009fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <MX_GPIO_Init+0xec>)
 8000a14:	f001 fc50 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : out4_Pin */
  GPIO_InitStruct.Pin = out4_Pin;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(out4_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_GPIO_Init+0xe8>)
 8000a30:	f001 fc42 	bl	80022b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a34:	bf00      	nop
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	44020c00 	.word	0x44020c00
 8000a40:	42020400 	.word	0x42020400
 8000a44:	42020000 	.word	0x42020000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a74:	d153      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a76:	4b2c      	ldr	r3, [pc, #176]	@ (8000b28 <HAL_TIM_Base_MspInit+0xc4>)
 8000a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b28 <HAL_TIM_Base_MspInit+0xc4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a86:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <HAL_TIM_Base_MspInit+0xc4>)
 8000a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* GPDMA1_REQUEST_TIM2_UP Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000a94:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000a96:	4a26      	ldr	r2, [pc, #152]	@ (8000b30 <HAL_TIM_Base_MspInit+0xcc>)
 8000a98:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_TIM2_UP;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000a9c:	224c      	movs	r2, #76	@ 0x4c
 8000a9e:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000aa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aac:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000ac2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ac6:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_HIGH_PRIORITY;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000aca:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000ace:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000ade:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000af0:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000af2:	f000 fdc7 	bl	8001684 <HAL_DMA_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 8000afc:	f7ff ffa4 	bl	8000a48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel0);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	4a09      	ldr	r2, [pc, #36]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <HAL_TIM_Base_MspInit+0xc8>)
 8000b10:	f001 f918 	bl	8001d44 <HAL_DMA_ConfigChannelAttributes>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8000b1a:	f7ff ff95 	bl	8000a48 <Error_Handler>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	44020c00 	.word	0x44020c00
 8000b2c:	200000f8 	.word	0x200000f8
 8000b30:	40020050 	.word	0x40020050

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ac      	sub	sp, #176	@ 0xb0
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	2288      	movs	r2, #136	@ 0x88
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 fc43 	bl	80083e0 <memset>
  if(huart->Instance==USART1)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c08 <HAL_UART_MspInit+0xd4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d14c      	bne.n	8000bfe <HAL_UART_MspInit+0xca>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b64:	f04f 0201 	mov.w	r2, #1
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b70:	2300      	movs	r3, #0
 8000b72:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fce7 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000b84:	f7ff ff60 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_UART_MspInit+0xd8>)
 8000b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c0c <HAL_UART_MspInit+0xd8>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b94:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_UART_MspInit+0xd8>)
 8000b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_UART_MspInit+0xd8>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bac:	4a17      	ldr	r2, [pc, #92]	@ (8000c0c <HAL_UART_MspInit+0xd8>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_UART_MspInit+0xd8>)
 8000bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA2     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bc4:	2306      	movs	r3, #6
 8000bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000be6:	4619      	mov	r1, r3
 8000be8:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <HAL_UART_MspInit+0xdc>)
 8000bea:	f001 fb65 	bl	80022b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	203a      	movs	r0, #58	@ 0x3a
 8000bf4:	f000 fc6e 	bl	80014d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bf8:	203a      	movs	r0, #58	@ 0x3a
 8000bfa:	f000 fc85 	bl	8001508 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bfe:	bf00      	nop
 8000c00:	37b0      	adds	r7, #176	@ 0xb0
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	44020c00 	.word	0x44020c00
 8000c10:	42020000 	.word	0x42020000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 fb17 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <GPDMA1_Channel0_IRQHandler+0x10>)
 8000c7a:	f000 febe 	bl	80019fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000f8 	.word	0x200000f8

08000c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <USART1_IRQHandler+0x10>)
 8000c8e:	f005 fb89 	bl	80063a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000170 	.word	0x20000170

08000c9c <GPDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 0 global interrupt.
  */
void GPDMA2_Channel0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 0 */

  /* USER CODE END GPDMA2_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel0);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <GPDMA2_Channel0_IRQHandler+0x10>)
 8000ca2:	f000 feaa 	bl	80019fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 1 */

  /* USER CODE END GPDMA2_Channel0_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000034 	.word	0x20000034

08000cb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb6:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <SystemInit+0xc8>)
 8000cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d78 <SystemInit+0xc8>)
 8000cbe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <SystemInit+0xcc>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <SystemInit+0xcc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <SystemInit+0xcc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000cd8:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <SystemInit+0xcc>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4927      	ldr	r1, [pc, #156]	@ (8000d7c <SystemInit+0xcc>)
 8000cde:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <SystemInit+0xd0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ce4:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <SystemInit+0xcc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000cea:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <SystemInit+0xcc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <SystemInit+0xcc>)
 8000cf2:	4a24      	ldr	r2, [pc, #144]	@ (8000d84 <SystemInit+0xd4>)
 8000cf4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <SystemInit+0xcc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <SystemInit+0xcc>)
 8000cfe:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <SystemInit+0xd4>)
 8000d00:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <SystemInit+0xcc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d08:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <SystemInit+0xcc>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <SystemInit+0xcc>)
 8000d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <SystemInit+0xcc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <SystemInit+0xc8>)
 8000d1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d20:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d22:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <SystemInit+0xd8>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d2a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d32:	d003      	beq.n	8000d3c <SystemInit+0x8c>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d3a:	d117      	bne.n	8000d6c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <SystemInit+0xd8>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <SystemInit+0xd8>)
 8000d4a:	4a10      	ldr	r2, [pc, #64]	@ (8000d8c <SystemInit+0xdc>)
 8000d4c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <SystemInit+0xd8>)
 8000d50:	4a0f      	ldr	r2, [pc, #60]	@ (8000d90 <SystemInit+0xe0>)
 8000d52:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <SystemInit+0xd8>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <SystemInit+0xd8>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <SystemInit+0xd8>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <SystemInit+0xd8>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	61d3      	str	r3, [r2, #28]
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	44020c00 	.word	0x44020c00
 8000d80:	fae2eae3 	.word	0xfae2eae3
 8000d84:	01010280 	.word	0x01010280
 8000d88:	40022000 	.word	0x40022000
 8000d8c:	08192a3b 	.word	0x08192a3b
 8000d90:	4c5d6e7f 	.word	0x4c5d6e7f

08000d94 <init_uart>:
uint32_t start_time = 0;  			// Для отслеживания тайм-аута
uint32_t lenght = 0;

//------------------------------ функции ---------------------------------------------//

void init_uart(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, rxBufUart, 4);     // Начальный прием заголовка
 8000d98:	2204      	movs	r2, #4
 8000d9a:	4903      	ldr	r1, [pc, #12]	@ (8000da8 <init_uart+0x14>)
 8000d9c:	4803      	ldr	r0, [pc, #12]	@ (8000dac <init_uart+0x18>)
 8000d9e:	f005 f9f3 	bl	8006188 <HAL_UART_Receive_IT>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20006228 	.word	0x20006228
 8000dac:	20000170 	.word	0x20000170

08000db0 <sendOk>:

void sendOk (void) {                                // ответить ок
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	txBufUart [0] = 0xAA;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <sendOk+0x20>)
 8000db6:	22aa      	movs	r2, #170	@ 0xaa
 8000db8:	701a      	strb	r2, [r3, #0]
	txBufUart [1] = 0xBB;
 8000dba:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <sendOk+0x20>)
 8000dbc:	22bb      	movs	r2, #187	@ 0xbb
 8000dbe:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit_IT(&huart1, txBufUart, 2);    // отправка по прерываниям
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4903      	ldr	r1, [pc, #12]	@ (8000dd0 <sendOk+0x20>)
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <sendOk+0x24>)
 8000dc6:	f005 f93b 	bl	8006040 <HAL_UART_Transmit_IT>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000621c 	.word	0x2000621c
 8000dd4:	20000170 	.word	0x20000170

08000dd8 <parsingData>:

uint32_t parsingData (void) {                                                                     // парсинг данных
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	if (calbackOk) {                                                                              // если сработал колбек
 8000ddc:	4b40      	ldr	r3, [pc, #256]	@ (8000ee0 <parsingData+0x108>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d07a      	beq.n	8000eda <parsingData+0x102>
		calbackOk = 0;																			  // сбросим его
 8000de4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee0 <parsingData+0x108>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
		if (uartProcess == WAIT_DATA) {															  // если ожидание данных было
 8000dea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee4 <parsingData+0x10c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d165      	bne.n	8000ebe <parsingData+0xe6>
			if (rxBufUart[0] == 0xAA ){                                                           // проверим нулевой байт
 8000df2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <parsingData+0x110>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2baa      	cmp	r3, #170	@ 0xaa
 8000df8:	d15b      	bne.n	8000eb2 <parsingData+0xda>
				if (rxBufUart[1] == 0x55 || rxBufUart[1] == 0x33) {                               // проверим первый байт это данные или команда
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <parsingData+0x110>)
 8000dfc:	785b      	ldrb	r3, [r3, #1]
 8000dfe:	2b55      	cmp	r3, #85	@ 0x55
 8000e00:	d003      	beq.n	8000e0a <parsingData+0x32>
 8000e02:	4b39      	ldr	r3, [pc, #228]	@ (8000ee8 <parsingData+0x110>)
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	2b33      	cmp	r3, #51	@ 0x33
 8000e08:	d121      	bne.n	8000e4e <parsingData+0x76>
					timeoutStart = 0;                                                             // тут сбросим второй тайм аут, который нужен для приема первых 4 байт
 8000e0a:	4b38      	ldr	r3, [pc, #224]	@ (8000eec <parsingData+0x114>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
					lenght = rxBufUart [2] << 8;                                                  // соберем длительность
 8000e10:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <parsingData+0x110>)
 8000e12:	789b      	ldrb	r3, [r3, #2]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	4a36      	ldr	r2, [pc, #216]	@ (8000ef0 <parsingData+0x118>)
 8000e18:	6013      	str	r3, [r2, #0]
					lenght |= rxBufUart [3];
 8000e1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <parsingData+0x110>)
 8000e1c:	78db      	ldrb	r3, [r3, #3]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <parsingData+0x118>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	4a32      	ldr	r2, [pc, #200]	@ (8000ef0 <parsingData+0x118>)
 8000e28:	6013      	str	r3, [r2, #0]
					if (lenght > BUF_SIZE) {                                                      // если она больше буфера
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <parsingData+0x118>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f243 020c 	movw	r2, #12300	@ 0x300c
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d906      	bls.n	8000e44 <parsingData+0x6c>
						HAL_UART_Receive_IT(&huart1, rxBufUart, 4);                               // на новый захват
 8000e36:	2204      	movs	r2, #4
 8000e38:	492b      	ldr	r1, [pc, #172]	@ (8000ee8 <parsingData+0x110>)
 8000e3a:	482e      	ldr	r0, [pc, #184]	@ (8000ef4 <parsingData+0x11c>)
 8000e3c:	f005 f9a4 	bl	8006188 <HAL_UART_Receive_IT>
						return ENTRY;                                                             // выйдем
 8000e40:	2300      	movs	r3, #0
 8000e42:	e04b      	b.n	8000edc <parsingData+0x104>
					}
					start_time = HAL_GetTick();                                                   // если не вышли взводим второй таймаут на большую посылку
 8000e44:	f000 fa3e 	bl	80012c4 <HAL_GetTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef8 <parsingData+0x120>)
 8000e4c:	6013      	str	r3, [r2, #0]
				}
				switch (rxBufUart[1]) {                                                           // в зависимиости от данных во втором байте выполняем действия
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <parsingData+0x110>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	2b55      	cmp	r3, #85	@ 0x55
 8000e54:	d006      	beq.n	8000e64 <parsingData+0x8c>
 8000e56:	2b55      	cmp	r3, #85	@ 0x55
 8000e58:	dc3f      	bgt.n	8000eda <parsingData+0x102>
 8000e5a:	2b33      	cmp	r3, #51	@ 0x33
 8000e5c:	d012      	beq.n	8000e84 <parsingData+0xac>
 8000e5e:	2b44      	cmp	r3, #68	@ 0x44
 8000e60:	d020      	beq.n	8000ea4 <parsingData+0xcc>
 8000e62:	e03a      	b.n	8000eda <parsingData+0x102>
				case 0x55:
					HAL_UART_Receive_IT(&huart1, (uint8_t*) ptrBufTime, lenght - 4);              // в буфер времени принимаем нужное количество
 8000e64:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <parsingData+0x124>)
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <parsingData+0x118>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	481f      	ldr	r0, [pc, #124]	@ (8000ef4 <parsingData+0x11c>)
 8000e76:	f005 f987 	bl	8006188 <HAL_UART_Receive_IT>
					uartProcess = DATA_RECIVE;                                                    // ставим статус приема данных
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <parsingData+0x10c>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	701a      	strb	r2, [r3, #0]
					return DATA_RECIVE;
 8000e80:	2302      	movs	r3, #2
 8000e82:	e02b      	b.n	8000edc <parsingData+0x104>
				break;
				case 0x33:
					HAL_UART_Receive_IT(&huart1, (uint8_t*) ptrbufGpio, lenght - 4);              // тоже самое но в другой буфер
 8000e84:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <parsingData+0x128>)
 8000e86:	6819      	ldr	r1, [r3, #0]
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <parsingData+0x118>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <parsingData+0x11c>)
 8000e96:	f005 f977 	bl	8006188 <HAL_UART_Receive_IT>
					uartProcess = DATA_RECIVE;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <parsingData+0x10c>)
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	701a      	strb	r2, [r3, #0]
					return DATA_RECIVE;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e01b      	b.n	8000edc <parsingData+0x104>
				break;
				case 0x44:                                                                        // это команда старта
					HAL_UART_Receive_IT(&huart1, rxBufUart, 4);              				      // Перезапуск приема заголовка
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	4910      	ldr	r1, [pc, #64]	@ (8000ee8 <parsingData+0x110>)
 8000ea8:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <parsingData+0x11c>)
 8000eaa:	f005 f96d 	bl	8006188 <HAL_UART_Receive_IT>
					return RECIVE_START;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e014      	b.n	8000edc <parsingData+0x104>
				break;
				}
			} else {
				HAL_UART_Receive_IT(&huart1, rxBufUart, 4);              						  // Перезапуск приема заголовка
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	490c      	ldr	r1, [pc, #48]	@ (8000ee8 <parsingData+0x110>)
 8000eb6:	480f      	ldr	r0, [pc, #60]	@ (8000ef4 <parsingData+0x11c>)
 8000eb8:	f005 f966 	bl	8006188 <HAL_UART_Receive_IT>
 8000ebc:	e00d      	b.n	8000eda <parsingData+0x102>
			}
		} else if (uartProcess == DATA_RECIVE){                                                   // если принимали данные
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <parsingData+0x10c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d109      	bne.n	8000eda <parsingData+0x102>
			HAL_UART_Receive_IT(&huart1, rxBufUart, 4);              						      // Перезапуск приема заголовка
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <parsingData+0x110>)
 8000eca:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <parsingData+0x11c>)
 8000ecc:	f005 f95c 	bl	8006188 <HAL_UART_Receive_IT>
			uartProcess = WAIT_DATA;                                                              // переключимся в прием заголовка
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <parsingData+0x10c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
			return DATA_OK;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e000      	b.n	8000edc <parsingData+0x104>
		}
	}
	return ENTRY;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20006232 	.word	0x20006232
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	20006228 	.word	0x20006228
 8000eec:	20006233 	.word	0x20006233
 8000ef0:	20006238 	.word	0x20006238
 8000ef4:	20000170 	.word	0x20000170
 8000ef8:	20006234 	.word	0x20006234
 8000efc:	20000004 	.word	0x20000004
 8000f00:	20000008 	.word	0x20000008

08000f04 <check_timeout>:

void check_timeout(void) {                                                             // таймауты для юарта
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	if (!timeoutStart && huart1.RxXferCount < 4 ) {                                    // это если первые 4 байта по какой то причине долго идут
 8000f08:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <check_timeout+0x8c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10d      	bne.n	8000f2c <check_timeout+0x28>
 8000f10:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <check_timeout+0x90>)
 8000f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d807      	bhi.n	8000f2c <check_timeout+0x28>
		start_time = HAL_GetTick();                                                    // захват времени
 8000f1c:	f000 f9d2 	bl	80012c4 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a1d      	ldr	r2, [pc, #116]	@ (8000f98 <check_timeout+0x94>)
 8000f24:	6013      	str	r3, [r2, #0]
		timeoutStart = 1;                                                              // взводим флаг
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <check_timeout+0x8c>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
	}
	if (timeoutStart && (HAL_GetTick() - start_time >= 5)) {                           // 5 при скорости 115200 может передаться 500 бит
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <check_timeout+0x8c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d012      	beq.n	8000f5a <check_timeout+0x56>
 8000f34:	f000 f9c6 	bl	80012c4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <check_timeout+0x94>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d90a      	bls.n	8000f5a <check_timeout+0x56>
		timeoutStart = 0;                                                              // сбросим флаг
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <check_timeout+0x8c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
    	HAL_UART_AbortReceive_IT(&huart1);                                             // сбросим прием
 8000f4a:	4812      	ldr	r0, [pc, #72]	@ (8000f94 <check_timeout+0x90>)
 8000f4c:	f005 f976 	bl	800623c <HAL_UART_AbortReceive_IT>
        HAL_UART_Receive_IT(&huart1, rxBufUart, 4);   			                       // Перезапуск приема заголовка
 8000f50:	2204      	movs	r2, #4
 8000f52:	4912      	ldr	r1, [pc, #72]	@ (8000f9c <check_timeout+0x98>)
 8000f54:	480f      	ldr	r0, [pc, #60]	@ (8000f94 <check_timeout+0x90>)
 8000f56:	f005 f917 	bl	8006188 <HAL_UART_Receive_IT>
	}
    if (uartProcess == DATA_RECIVE && (HAL_GetTick() - start_time >= TIMEOUT_MS)) {    // а это уже для приема большого буфера
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <check_timeout+0x9c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d113      	bne.n	8000f8a <check_timeout+0x86>
 8000f62:	f000 f9af 	bl	80012c4 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <check_timeout+0x94>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f72:	d30a      	bcc.n	8000f8a <check_timeout+0x86>
    	uartProcess = WAIT_DATA;                                                       // вернемся в прием первых 4 байт
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <check_timeout+0x9c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
    	HAL_UART_AbortReceive_IT(&huart1);                                             // сбросим прием
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <check_timeout+0x90>)
 8000f7c:	f005 f95e 	bl	800623c <HAL_UART_AbortReceive_IT>
        HAL_UART_Receive_IT(&huart1, rxBufUart, 4);   			                       // Перезапуск приема заголовка
 8000f80:	2204      	movs	r2, #4
 8000f82:	4906      	ldr	r1, [pc, #24]	@ (8000f9c <check_timeout+0x98>)
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <check_timeout+0x90>)
 8000f86:	f005 f8ff 	bl	8006188 <HAL_UART_Receive_IT>
    }
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20006233 	.word	0x20006233
 8000f94:	20000170 	.word	0x20000170
 8000f98:	20006234 	.word	0x20006234
 8000f9c:	20006228 	.word	0x20006228
 8000fa0:	2000000c 	.word	0x2000000c

08000fa4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <HAL_UART_RxCpltCallback+0x24>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d102      	bne.n	8000fbc <HAL_UART_RxCpltCallback+0x18>
    	calbackOk = 1;                                                                 // скажем что колбек сработал
 8000fb6:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <HAL_UART_RxCpltCallback+0x28>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	20006232 	.word	0x20006232

08000fd0 <doWork>:
extern uint32_t *ptrBufTime;
extern uint32_t *ptrbufGpio;
//----------------------- переменные из этого файла ----------------------------------//
uint32_t ledblinkTime = 0;
//------------------------------ функции ---------------------------------------------//
void doWork (void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	  init_uart();                                                                                        // запускаем прием
 8000fd4:	f7ff fede 	bl	8000d94 <init_uart>
	  HAL_DMA_RegisterCallback(&handle_GPDMA2_Channel0, HAL_DMA_XFER_CPLT_CB_ID, MyDMACpltCallback);      // Регистрация колбека
 8000fd8:	4a03      	ldr	r2, [pc, #12]	@ (8000fe8 <doWork+0x18>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <doWork+0x1c>)
 8000fde:	f000 fe6d 	bl	8001cbc <HAL_DMA_RegisterCallback>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08001061 	.word	0x08001061
 8000fec:	20000034 	.word	0x20000034

08000ff0 <work>:

void work (void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	  blinkLed();                                          // моргаем светиком
 8000ff4:	f000 f818 	bl	8001028 <blinkLed>
	  check_timeout ();                                    // проверим таймауты
 8000ff8:	f7ff ff84 	bl	8000f04 <check_timeout>
	  switch (parsingData()) {                             // проверим новые данные
 8000ffc:	f7ff feec 	bl	8000dd8 <parsingData>
 8001000:	4603      	mov	r3, r0
 8001002:	2b03      	cmp	r3, #3
 8001004:	d002      	beq.n	800100c <work+0x1c>
 8001006:	2b04      	cmp	r3, #4
 8001008:	d003      	beq.n	8001012 <work+0x22>
		 sendOk();
		 HAL_Delay(500);                                   // костыль но пока так, подождать пока работает юарт, чтоб не выйти из сна от передачи данных
		 startprogramm();                                  // стартуем выполнять цикл
	  break;
	  }
}
 800100a:	e00b      	b.n	8001024 <work+0x34>
		 sendOk();
 800100c:	f7ff fed0 	bl	8000db0 <sendOk>
	  break;
 8001010:	e008      	b.n	8001024 <work+0x34>
		 sendOk();
 8001012:	f7ff fecd 	bl	8000db0 <sendOk>
		 HAL_Delay(500);                                   // костыль но пока так, подождать пока работает юарт, чтоб не выйти из сна от передачи данных
 8001016:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800101a:	f000 f95f 	bl	80012dc <HAL_Delay>
		 startprogramm();                                  // стартуем выполнять цикл
 800101e:	f000 f835 	bl	800108c <startprogramm>
	  break;
 8001022:	bf00      	nop
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <blinkLed>:

void blinkLed (void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - ledblinkTime >= BLINK_TIME) {      // моргание без делея
 800102c:	f000 f94a 	bl	80012c4 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <blinkLed+0x30>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800103c:	d309      	bcc.n	8001052 <blinkLed+0x2a>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800103e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <blinkLed+0x34>)
 8001044:	f001 faa2 	bl	800258c <HAL_GPIO_TogglePin>
		ledblinkTime = HAL_GetTick();
 8001048:	f000 f93c 	bl	80012c4 <HAL_GetTick>
 800104c:	4603      	mov	r3, r0
 800104e:	4a02      	ldr	r2, [pc, #8]	@ (8001058 <blinkLed+0x30>)
 8001050:	6013      	str	r3, [r2, #0]
	}
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000623c 	.word	0x2000623c
 800105c:	42020000 	.word	0x42020000

08001060 <MyDMACpltCallback>:

void MyDMACpltCallback(DMA_HandleTypeDef *hdma) {          // Обработать завершение передачи DMA
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if (hdma->Instance == GPDMA2_Channel0) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <MyDMACpltCallback+0x24>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d104      	bne.n	800107c <MyDMACpltCallback+0x1c>
		HAL_ResumeTick();                                  // возобновим таймер
 8001072:	f000 f967 	bl	8001344 <HAL_ResumeTick>
		HAL_TIM_Base_Stop_DMA(&htim2);                     // остановим дма, без этого не хотело нормально работать
 8001076:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MyDMACpltCallback+0x28>)
 8001078:	f004 fc1a 	bl	80058b0 <HAL_TIM_Base_Stop_DMA>
	}
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021050 	.word	0x40021050
 8001088:	200000ac 	.word	0x200000ac

0800108c <startprogramm>:

void startprogramm (void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	uint32_t bsrrAddress = (uint32_t)&(GPIOB->BSRR);                                                          // адрес типа в памяти куда нужно передать данные по дма
 8001092:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <startprogramm+0x64>)
 8001094:	607b      	str	r3, [r7, #4]
	TIM2->ARR = *ptrBufTime;                                                                                  // напрямую разыменовываем первый элемент буффера
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <startprogramm+0x68>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	GPIOB->BSRR = *ptrbufGpio;                                                                                // и напрямую выставим состояния ног из буффера
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <startprogramm+0x6c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <startprogramm+0x70>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6193      	str	r3, [r2, #24]
	HAL_TIM_Base_Start_DMA(&htim2, ptrBufTime + 1, ((lenght - 4) - 8));                                       // передавать количество байт а не слов! -8 по тому что 4 вначале не используем и на 4 меньше чем gpio
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <startprogramm+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	1d19      	adds	r1, r3, #4
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <startprogramm+0x74>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b0c      	subs	r3, #12
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <startprogramm+0x78>)
 80010c0:	f004 fb6e 	bl	80057a0 <HAL_TIM_Base_Start_DMA>
	HAL_DMA_Start_IT(&handle_GPDMA2_Channel0, (uint32_t)(ptrbufGpio + 1), bsrrAddress, ((lenght - 4) - 4));   // запуск дма на передачу по триггеру от таймера должно быть на 1 больше чем время но так как в 4 в начале то 4 отнимаем
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <startprogramm+0x6c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3304      	adds	r3, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <startprogramm+0x74>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b08      	subs	r3, #8
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	480c      	ldr	r0, [pc, #48]	@ (8001108 <startprogramm+0x7c>)
 80010d6:	f000 fb8b 	bl	80017f0 <HAL_DMA_Start_IT>
// костыль переделать
	HAL_SuspendTick();                                                                                        // остановим систик
 80010da:	f000 f923 	bl	8001324 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);                                         // упадем в сон чтоб не мешать дма
 80010de:	2101      	movs	r1, #1
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 fa9d 	bl	8002620 <HAL_PWR_EnterSLEEPMode>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	42020418 	.word	0x42020418
 80010f4:	20000004 	.word	0x20000004
 80010f8:	20000008 	.word	0x20000008
 80010fc:	42020400 	.word	0x42020400
 8001100:	20006238 	.word	0x20006238
 8001104:	200000ac 	.word	0x200000ac
 8001108:	20000034 	.word	0x20000034

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001110:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001112:	e003      	b.n	800111c <LoopCopyDataInit>

08001114 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001116:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001118:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800111a:	3104      	adds	r1, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800111c:	480b      	ldr	r0, [pc, #44]	@ (800114c <LoopForever+0xa>)
	ldr	r3, =_edata
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001120:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001122:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001124:	d3f6      	bcc.n	8001114 <CopyDataInit>
	ldr	r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001128:	e002      	b.n	8001130 <LoopFillZerobss>

0800112a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800112a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800112c:	f842 3b04 	str.w	r3, [r2], #4

08001130 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <LoopForever+0x16>)
	cmp	r2, r3
 8001132:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001134:	d3f9      	bcc.n	800112a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001136:	f7ff fdbb 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f007 f959 	bl	80083f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff fa37 	bl	80005b0 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001144:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001148:	080084a0 	.word	0x080084a0
	ldr	r0, =_sdata
 800114c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001150:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001154:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001158:	20006244 	.word	0x20006244

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>
	...

08001160 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f9aa 	bl	80014be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800116a:	f002 f865 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 800116e:	4602      	mov	r2, r0
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_Init+0x44>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	490b      	ldr	r1, [pc, #44]	@ (80011a8 <HAL_Init+0x48>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <HAL_Init+0x4c>)
 8001182:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001184:	2004      	movs	r0, #4
 8001186:	f000 f9ef 	bl	8001568 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118a:	200f      	movs	r0, #15
 800118c:	f000 f810 	bl	80011b0 <HAL_InitTick>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e002      	b.n	80011a0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800119a:	f7ff fc5b 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	44020c00 	.word	0x44020c00
 80011a8:	08008450 	.word	0x08008450
 80011ac:	20000000 	.word	0x20000000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <HAL_InitTick+0xdc>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e05c      	b.n	8001282 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011c8:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <HAL_InitTick+0xe0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d10c      	bne.n	80011ee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80011d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_InitTick+0xe4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <HAL_InitTick+0xdc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e037      	b.n	800125e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80011ee:	f000 fa13 	bl	8001618 <HAL_SYSTICK_GetCLKSourceConfig>
 80011f2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d023      	beq.n	8001242 <HAL_InitTick+0x92>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d82d      	bhi.n	800125c <HAL_InitTick+0xac>
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_InitTick+0x5e>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d00d      	beq.n	8001228 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800120c:	e026      	b.n	800125c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_InitTick+0xe4>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <HAL_InitTick+0xdc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800121c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	60fb      	str	r3, [r7, #12]
        break;
 8001226:	e01a      	b.n	800125e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_InitTick+0xdc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001232:	fbb3 f3f2 	udiv	r3, r3, r2
 8001236:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	60fb      	str	r3, [r7, #12]
        break;
 8001240:	e00d      	b.n	800125e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_InitTick+0xdc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001250:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001254:	fbb2 f3f3 	udiv	r3, r2, r3
 8001258:	60fb      	str	r3, [r7, #12]
        break;
 800125a:	e000      	b.n	800125e <HAL_InitTick+0xae>
        break;
 800125c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f960 	bl	8001524 <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e009      	b.n	8001282 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126e:	2200      	movs	r2, #0
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	f04f 30ff 	mov.w	r0, #4294967295
 8001276:	f000 f92d 	bl	80014d4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800127a:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <HAL_InitTick+0xe8>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000014 	.word	0x20000014
 8001290:	e000e010 	.word	0xe000e010
 8001294:	20000000 	.word	0x20000000
 8001298:	20000010 	.word	0x20000010

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000014 	.word	0x20000014
 80012c0:	20006240 	.word	0x20006240

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20006240 	.word	0x20006240

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000014 	.word	0x20000014

08001324 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_SuspendTick+0x1c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_SuspendTick+0x1c>)
 800132e:	f023 0302 	bic.w	r3, r3, #2
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_ResumeTick+0x1c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_ResumeTick+0x1c>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	@ (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	@ (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	@ (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	@ 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	@ 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ff4c 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e2:	f7ff ff63 	bl	80013ac <__NVIC_GetPriorityGrouping>
 80014e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f7ff ffb3 	bl	8001458 <NVIC_EncodePriority>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff82 	bl	8001404 <__NVIC_SetPriority>
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff56 	bl	80013c8 <__NVIC_EnableIRQ>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001534:	d301      	bcc.n	800153a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001536:	2301      	movs	r3, #1
 8001538:	e00d      	b.n	8001556 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_SYSTICK_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_SYSTICK_Config+0x40>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_SYSTICK_Config+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <HAL_SYSTICK_Config+0x40>)
 800154e:	f043 0303 	orr.w	r3, r3, #3
 8001552:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d844      	bhi.n	8001600 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001576:	a201      	add	r2, pc, #4	@ (adr r2, 800157c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800159f 	.word	0x0800159f
 8001580:	080015bd 	.word	0x080015bd
 8001584:	080015df 	.word	0x080015df
 8001588:	08001601 	.word	0x08001601
 800158c:	08001591 	.word	0x08001591
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001590:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1e      	ldr	r2, [pc, #120]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6013      	str	r3, [r2, #0]
      break;
 800159c:	e031      	b.n	8001602 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015b0:	4a18      	ldr	r2, [pc, #96]	@ (8001614 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015b2:	f023 030c 	bic.w	r3, r3, #12
 80015b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015ba:	e022      	b.n	8001602 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015ce:	f023 030c 	bic.w	r3, r3, #12
 80015d2:	4a10      	ldr	r2, [pc, #64]	@ (8001614 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015dc:	e011      	b.n	8001602 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015f0:	f023 030c 	bic.w	r3, r3, #12
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015fe:	e000      	b.n	8001602 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001600:	bf00      	nop
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010
 8001614:	44020c00 	.word	0x44020c00

08001618 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800161e:	4b17      	ldr	r3, [pc, #92]	@ (800167c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800162a:	2304      	movs	r3, #4
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e01e      	b.n	800166e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001632:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d00f      	beq.n	8001662 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d80f      	bhi.n	8001668 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b04      	cmp	r3, #4
 8001652:	d003      	beq.n	800165c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001654:	e008      	b.n	8001668 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
        break;
 800165a:	e008      	b.n	800166e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800165c:	2301      	movs	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
        break;
 8001660:	e005      	b.n	800166e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001662:	2302      	movs	r3, #2
 8001664:	607b      	str	r3, [r7, #4]
        break;
 8001666:	e002      	b.n	800166e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
        break;
 800166c:	bf00      	nop
    }
  }
  return systick_source;
 800166e:	687b      	ldr	r3, [r7, #4]
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e010 	.word	0xe000e010
 8001680:	44020c00 	.word	0x44020c00

08001684 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fe1a 	bl	80012c4 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e085      	b.n	80017a8 <HAL_DMA_Init+0x124>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a43      	ldr	r2, [pc, #268]	@ (80017b0 <HAL_DMA_Init+0x12c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d049      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a42      	ldr	r2, [pc, #264]	@ (80017b4 <HAL_DMA_Init+0x130>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d044      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a40      	ldr	r2, [pc, #256]	@ (80017b8 <HAL_DMA_Init+0x134>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d03f      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a3f      	ldr	r2, [pc, #252]	@ (80017bc <HAL_DMA_Init+0x138>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d03a      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a3d      	ldr	r2, [pc, #244]	@ (80017c0 <HAL_DMA_Init+0x13c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d035      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <HAL_DMA_Init+0x140>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d030      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a3a      	ldr	r2, [pc, #232]	@ (80017c8 <HAL_DMA_Init+0x144>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d02b      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a39      	ldr	r2, [pc, #228]	@ (80017cc <HAL_DMA_Init+0x148>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d026      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a37      	ldr	r2, [pc, #220]	@ (80017d0 <HAL_DMA_Init+0x14c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d021      	beq.n	800173a <HAL_DMA_Init+0xb6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a36      	ldr	r2, [pc, #216]	@ (80017d4 <HAL_DMA_Init+0x150>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d01c      	beq.n	800173a <HAL_DMA_Init+0xb6>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a34      	ldr	r2, [pc, #208]	@ (80017d8 <HAL_DMA_Init+0x154>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d017      	beq.n	800173a <HAL_DMA_Init+0xb6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a33      	ldr	r2, [pc, #204]	@ (80017dc <HAL_DMA_Init+0x158>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d012      	beq.n	800173a <HAL_DMA_Init+0xb6>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a31      	ldr	r2, [pc, #196]	@ (80017e0 <HAL_DMA_Init+0x15c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00d      	beq.n	800173a <HAL_DMA_Init+0xb6>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a30      	ldr	r2, [pc, #192]	@ (80017e4 <HAL_DMA_Init+0x160>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d008      	beq.n	800173a <HAL_DMA_Init+0xb6>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2e      	ldr	r2, [pc, #184]	@ (80017e8 <HAL_DMA_Init+0x164>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d003      	beq.n	800173a <HAL_DMA_Init+0xb6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <HAL_DMA_Init+0x168>)
 8001738:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0206 	orr.w	r2, r2, #6
 8001758:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800175a:	e00f      	b.n	800177c <HAL_DMA_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800175c:	f7ff fdb2 	bl	80012c4 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b05      	cmp	r3, #5
 8001768:	d908      	bls.n	800177c <HAL_DMA_Init+0xf8>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2210      	movs	r2, #16
 800176e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2203      	movs	r2, #3
 8001774:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e015      	b.n	80017a8 <HAL_DMA_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e8      	bne.n	800175c <HAL_DMA_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fb3c 	bl	8001e08 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020050 	.word	0x40020050
 80017b4:	400200d0 	.word	0x400200d0
 80017b8:	40020150 	.word	0x40020150
 80017bc:	400201d0 	.word	0x400201d0
 80017c0:	40020250 	.word	0x40020250
 80017c4:	400202d0 	.word	0x400202d0
 80017c8:	40020350 	.word	0x40020350
 80017cc:	400203d0 	.word	0x400203d0
 80017d0:	40021050 	.word	0x40021050
 80017d4:	400210d0 	.word	0x400210d0
 80017d8:	40021150 	.word	0x40021150
 80017dc:	400211d0 	.word	0x400211d0
 80017e0:	40021250 	.word	0x40021250
 80017e4:	400212d0 	.word	0x400212d0
 80017e8:	40021350 	.word	0x40021350
 80017ec:	400213d0 	.word	0x400213d0

080017f0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e04f      	b.n	80018a8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_DMA_Start_IT+0x26>
 8001812:	2302      	movs	r3, #2
 8001814:	e048      	b.n	80018a8 <HAL_DMA_Start_IT+0xb8>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d136      	bne.n	8001898 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 fabc 	bl	8001dbc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8001852:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800186a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001882:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e007      	b.n	80018a8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2240      	movs	r2, #64	@ 0x40
 800189c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80018b8:	f7ff fd04 	bl	80012c4 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e06b      	b.n	80019a0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e05c      	b.n	80019a0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0204 	orr.w	r2, r2, #4
 80018f4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2205      	movs	r2, #5
 80018fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80018fe:	e020      	b.n	8001942 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001900:	f7ff fce0 	bl	80012c4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d919      	bls.n	8001942 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	f043 0210 	orr.w	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001932:	2201      	movs	r2, #1
 8001934:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e02e      	b.n	80019a0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0d7      	beq.n	8001900 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0202 	orr.w	r2, r2, #2
 800195e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2204      	movs	r2, #4
 8001964:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001970:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198a:	2201      	movs	r2, #1
 800198c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e019      	b.n	80019ee <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e00e      	b.n	80019ee <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2204      	movs	r2, #4
 80019d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001a0a:	f023 030f 	bic.w	r3, r3, #15
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	3b50      	subs	r3, #80	@ 0x50
 8001a1a:	09db      	lsrs	r3, r3, #7
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2201      	movs	r2, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 813b 	beq.w	8001cb0 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d011      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a5e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d011      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a90:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d011      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ac2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d011      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001af4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	f043 0208 	orr.w	r2, r3, #8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d013      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b26:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d04c      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d045      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b5c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d12e      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b78:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0202 	orr.w	r2, r2, #2
 8001b88:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d07a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
        }

        return;
 8001bc6:	e075      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2205      	movs	r2, #5
 8001bcc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d039      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d032      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d012      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d111      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c28:	2201      	movs	r2, #1
 8001c2a:	731a      	strb	r2, [r3, #12]
 8001c2c:	e008      	b.n	8001c40 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d103      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c48:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d025      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0202 	orr.w	r2, r2, #2
 8001c78:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c92:	2201      	movs	r2, #1
 8001c94:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
 8001cae:	e002      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001cb0:	bf00      	nop
 8001cb2:	e000      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001cb4:	bf00      	nop
    }
  }
}
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_DMA_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *const hdma,
                                           HAL_DMA_CallbackIDTypeDef CallbackID,
                                           void (*const pCallback)(DMA_HandleTypeDef *const _hdma))
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e02f      	b.n	8001d38 <HAL_DMA_RegisterCallback+0x7c>
  }

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d126      	bne.n	8001d32 <HAL_DMA_RegisterCallback+0x76>
  {
    /* Check callback ID */
    switch (CallbackID)
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d820      	bhi.n	8001d2c <HAL_DMA_RegisterCallback+0x70>
 8001cea:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf0 <HAL_DMA_RegisterCallback+0x34>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d05 	.word	0x08001d05
 8001cf4:	08001d0d 	.word	0x08001d0d
 8001cf8:	08001d15 	.word	0x08001d15
 8001cfc:	08001d1d 	.word	0x08001d1d
 8001d00:	08001d25 	.word	0x08001d25
    {
      case HAL_DMA_XFER_CPLT_CB_ID:
      {
        /* Register transfer complete callback */
        hdma->XferCpltCallback = pCallback;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8001d0a:	e014      	b.n	8001d36 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_HALFCPLT_CB_ID:
      {
        /* Register half transfer callback */
        hdma->XferHalfCpltCallback = pCallback;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8001d12:	e010      	b.n	8001d36 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ERROR_CB_ID:
      {
        /* Register transfer error callback */
        hdma->XferErrorCallback = pCallback;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8001d1a:	e00c      	b.n	8001d36 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ABORT_CB_ID:
      {
        /* Register abort callback */
        hdma->XferAbortCallback = pCallback;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8001d22:	e008      	b.n	8001d36 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_SUSPEND_CB_ID:
      {
        /* Register suspend callback */
        hdma->XferSuspendCallback = pCallback;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8001d2a:	e004      	b.n	8001d36 <HAL_DMA_RegisterCallback+0x7a>
      }

      default:
      {
        /* Update error status */
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	75fb      	strb	r3, [r7, #23]
        break;
 8001d30:	e001      	b.n	8001d36 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    /* Update error status */
    status =  HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e02b      	b.n	8001db0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001d60:	f023 030f 	bic.w	r3, r3, #15
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6e:	3b50      	subs	r3, #80	@ 0x50
 8001d70:	09db      	lsrs	r3, r3, #7
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2201      	movs	r2, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f003 0311 	and.w	r3, r3, #17
 8001d8e:	2b11      	cmp	r3, #17
 8001d90:	d106      	bne.n	8001da0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	e006      	b.n	8001dae <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	b291      	uxth	r1, r2
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001de8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a82      	ldr	r2, [pc, #520]	@ (8002050 <DMA_Init+0x248>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04a      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a80      	ldr	r2, [pc, #512]	@ (8002054 <DMA_Init+0x24c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d045      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7f      	ldr	r2, [pc, #508]	@ (8002058 <DMA_Init+0x250>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d040      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7d      	ldr	r2, [pc, #500]	@ (800205c <DMA_Init+0x254>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d03b      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002060 <DMA_Init+0x258>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d036      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a7a      	ldr	r2, [pc, #488]	@ (8002064 <DMA_Init+0x25c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a79      	ldr	r2, [pc, #484]	@ (8002068 <DMA_Init+0x260>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d02c      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a77      	ldr	r2, [pc, #476]	@ (800206c <DMA_Init+0x264>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d027      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a76      	ldr	r2, [pc, #472]	@ (8002070 <DMA_Init+0x268>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <DMA_Init+0xda>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a74      	ldr	r2, [pc, #464]	@ (8002074 <DMA_Init+0x26c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01d      	beq.n	8001ee2 <DMA_Init+0xda>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a73      	ldr	r2, [pc, #460]	@ (8002078 <DMA_Init+0x270>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <DMA_Init+0xda>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a71      	ldr	r2, [pc, #452]	@ (800207c <DMA_Init+0x274>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <DMA_Init+0xda>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a70      	ldr	r2, [pc, #448]	@ (8002080 <DMA_Init+0x278>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <DMA_Init+0xda>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8002084 <DMA_Init+0x27c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <DMA_Init+0xda>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8002088 <DMA_Init+0x280>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <DMA_Init+0xda>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6b      	ldr	r2, [pc, #428]	@ (800208c <DMA_Init+0x284>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <DMA_Init+0xde>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <DMA_Init+0xe0>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d012      	beq.n	8001f12 <DMA_Init+0x10a>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	051b      	lsls	r3, r3, #20
 8001ef8:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001efc:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	3b01      	subs	r3, #1
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001f0a:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d159      	bne.n	8001fec <DMA_Init+0x1e4>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a44      	ldr	r2, [pc, #272]	@ (8002050 <DMA_Init+0x248>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d04a      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a43      	ldr	r2, [pc, #268]	@ (8002054 <DMA_Init+0x24c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d045      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a41      	ldr	r2, [pc, #260]	@ (8002058 <DMA_Init+0x250>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d040      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a40      	ldr	r2, [pc, #256]	@ (800205c <DMA_Init+0x254>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d03b      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a3e      	ldr	r2, [pc, #248]	@ (8002060 <DMA_Init+0x258>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d036      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002064 <DMA_Init+0x25c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d031      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <DMA_Init+0x260>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02c      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a3a      	ldr	r2, [pc, #232]	@ (800206c <DMA_Init+0x264>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d027      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a38      	ldr	r2, [pc, #224]	@ (8002070 <DMA_Init+0x268>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d022      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a37      	ldr	r2, [pc, #220]	@ (8002074 <DMA_Init+0x26c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d01d      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <DMA_Init+0x270>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d018      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a34      	ldr	r2, [pc, #208]	@ (800207c <DMA_Init+0x274>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a32      	ldr	r2, [pc, #200]	@ (8002080 <DMA_Init+0x278>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00e      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a31      	ldr	r2, [pc, #196]	@ (8002084 <DMA_Init+0x27c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8002088 <DMA_Init+0x280>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <DMA_Init+0x1d0>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800208c <DMA_Init+0x284>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <DMA_Init+0x1d4>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <DMA_Init+0x1d6>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <DMA_Init+0x1f6>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e008      	b.n	8001ffe <DMA_Init+0x1f6>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff4:	d103      	bne.n	8001ffe <DMA_Init+0x1f6>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffc:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <DMA_Init+0x288>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	68f9      	ldr	r1, [r7, #12]
 8002018:	430b      	orrs	r3, r1
 800201a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0f      	ldr	r2, [pc, #60]	@ (8002068 <DMA_Init+0x260>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00e      	beq.n	800204c <DMA_Init+0x244>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0e      	ldr	r2, [pc, #56]	@ (800206c <DMA_Init+0x264>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d009      	beq.n	800204c <DMA_Init+0x244>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <DMA_Init+0x280>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <DMA_Init+0x244>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a11      	ldr	r2, [pc, #68]	@ (800208c <DMA_Init+0x284>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d123      	bne.n	8002094 <DMA_Init+0x28c>
 800204c:	2301      	movs	r3, #1
 800204e:	e022      	b.n	8002096 <DMA_Init+0x28e>
 8002050:	40020050 	.word	0x40020050
 8002054:	400200d0 	.word	0x400200d0
 8002058:	40020150 	.word	0x40020150
 800205c:	400201d0 	.word	0x400201d0
 8002060:	40020250 	.word	0x40020250
 8002064:	400202d0 	.word	0x400202d0
 8002068:	40020350 	.word	0x40020350
 800206c:	400203d0 	.word	0x400203d0
 8002070:	40021050 	.word	0x40021050
 8002074:	400210d0 	.word	0x400210d0
 8002078:	40021150 	.word	0x40021150
 800207c:	400211d0 	.word	0x400211d0
 8002080:	40021250 	.word	0x40021250
 8002084:	400212d0 	.word	0x400212d0
 8002088:	40021350 	.word	0x40021350
 800208c:	400213d0 	.word	0x400213d0
 8002090:	3cc02100 	.word	0x3cc02100
 8002094:	2300      	movs	r3, #0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <DMA_Init+0x2a2>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop

080020c0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_DMAEx_List_Start_IT+0x16>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e082      	b.n	80021e0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020e0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d005      	beq.n	8002100 <HAL_DMAEx_List_Start_IT+0x40>
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d16a      	bne.n	80021d0 <HAL_DMAEx_List_Start_IT+0x110>
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d067      	beq.n	80021d0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d157      	bne.n	80021bc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_DMAEx_List_Start_IT+0x5a>
 8002116:	2302      	movs	r3, #2
 8002118:	e062      	b.n	80021e0 <HAL_DMAEx_List_Start_IT+0x120>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2202      	movs	r2, #2
 8002126:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212e:	2202      	movs	r2, #2
 8002130:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800214e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002166:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800217e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f107 010c 	add.w	r1, r7, #12
 800218a:	2200      	movs	r2, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f863 	bl	8002258 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	0c0b      	lsrs	r3, r1, #16
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80021b0:	4013      	ands	r3, r2
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e007      	b.n	80021e0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2240      	movs	r2, #64	@ 0x40
 80021d4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_DMAEx_ConfigTrigger+0x16>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e023      	b.n	800224a <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d115      	bne.n	800223a <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002214:	f023 734f 	bic.w	r3, r3, #54263808	@ 0x33c0000
 8002218:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	6851      	ldr	r1, [r2, #4]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	4311      	orrs	r1, r2
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	6892      	ldr	r2, [r2, #8]
 800222a:	0412      	lsls	r2, r2, #16
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	430b      	orrs	r3, r1
 8002234:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e007      	b.n	800224a <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00c      	beq.n	800228a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a0d      	ldr	r2, [pc, #52]	@ (80022b0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800227a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00f      	beq.n	80022a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002288:	e00b      	b.n	80022a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002294:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2205      	movs	r2, #5
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	fe010000 	.word	0xfe010000
 80022b4:	f8010000 	.word	0xf8010000

080022b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022c6:	e136      	b.n	8002536 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8128 	beq.w	8002530 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x38>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d125      	bne.n	800233c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f003 020f 	and.w	r2, r3, #15
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	6979      	ldr	r1, [r7, #20]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d00b      	beq.n	8002390 <HAL_GPIO_Init+0xd8>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002384:	2b11      	cmp	r3, #17
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b12      	cmp	r3, #18
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4013      	ands	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4013      	ands	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 0201 	and.w	r2, r3, #1
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d017      	beq.n	800242a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4013      	ands	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d07c      	beq.n	8002530 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002436:	4a47      	ldr	r2, [pc, #284]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3318      	adds	r3, #24
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4013      	ands	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0a9a      	lsrs	r2, r3, #10
 800245e:	4b3e      	ldr	r3, [pc, #248]	@ (8002558 <HAL_GPIO_Init+0x2a0>)
 8002460:	4013      	ands	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	00d2      	lsls	r2, r2, #3
 800246a:	4093      	lsls	r3, r2
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002472:	4938      	ldr	r1, [pc, #224]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3318      	adds	r3, #24
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002480:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4013      	ands	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80024a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80024aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4013      	ands	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80024ce:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 80024d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4013      	ands	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80024fa:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 8002504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002508:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4013      	ands	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	3301      	adds	r3, #1
 8002534:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	f47f aec1 	bne.w	80022c8 <HAL_GPIO_Init+0x10>
  }
}
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	44022000 	.word	0x44022000
 8002558:	002f7f7f 	.word	0x002f7f7f

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002578:	e002      	b.n	8002580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43d9      	mvns	r1, r3
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	400b      	ands	r3, r1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	619a      	str	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e007      	b.n	80025ee <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0204 	bic.w	r2, r3, #4
 80025e6:	4905      	ldr	r1, [pc, #20]	@ (80025fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
  }

  return status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40030400 	.word	0x40030400

08002600 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_ICACHE_Enable+0x1c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_ICACHE_Enable+0x1c>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40030400 	.word	0x40030400

08002620 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, ticks interrupt must be disabled to avoid
  *         unexpected CPU wake up.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]

  /* Check the parameter */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_PWR_EnterSLEEPMode+0x34>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Wait For Interrupt Request */
    __WFI();
 800263e:	bf30      	wfi
    /* Wait For Event Request */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002640:	e002      	b.n	8002648 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002642:	bf40      	sev
    __WFE();
 8002644:	bf20      	wfe
    __WFE();
 8002646:	bf20      	wfe
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	f000 bc28 	b.w	8002ebc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266c:	4b94      	ldr	r3, [pc, #592]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 0318 	and.w	r3, r3, #24
 8002674:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002676:	4b92      	ldr	r3, [pc, #584]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b08      	cmp	r3, #8
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x46>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b18      	cmp	r3, #24
 8002696:	d114      	bne.n	80026c2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d111      	bne.n	80026c2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f000 bc08 	b.w	8002ebc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80026ac:	4b84      	ldr	r3, [pc, #528]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	4981      	ldr	r1, [pc, #516]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80026c0:	e040      	b.n	8002744 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d023      	beq.n	8002712 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026ca:	4b7d      	ldr	r3, [pc, #500]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7c      	ldr	r2, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fdf5 	bl	80012c4 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80026de:	f7fe fdf1 	bl	80012c4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e3e5      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80026f0:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80026fc:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	496d      	ldr	r1, [pc, #436]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800270c:	4313      	orrs	r3, r2
 800270e:	618b      	str	r3, [r1, #24]
 8002710:	e018      	b.n	8002744 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002712:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6a      	ldr	r2, [pc, #424]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fdd1 	bl	80012c4 <HAL_GetTick>
 8002722:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002726:	f7fe fdcd 	bl	80012c4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e3c1      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002738:	4b61      	ldr	r3, [pc, #388]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80a0 	beq.w	8002892 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	2b10      	cmp	r3, #16
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x10c>
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b18      	cmp	r3, #24
 800275c:	d109      	bne.n	8002772 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 8092 	bne.w	8002892 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e3a4      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x132>
 800277c:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a4f      	ldr	r2, [pc, #316]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e058      	b.n	800283c <HAL_RCC_OscConfig+0x1e4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d112      	bne.n	80027b8 <HAL_RCC_OscConfig+0x160>
 8002792:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b48      	ldr	r3, [pc, #288]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a47      	ldr	r2, [pc, #284]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b45      	ldr	r3, [pc, #276]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a44      	ldr	r2, [pc, #272]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e041      	b.n	800283c <HAL_RCC_OscConfig+0x1e4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x190>
 80027c2:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a3e      	ldr	r2, [pc, #248]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3b      	ldr	r2, [pc, #236]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a38      	ldr	r2, [pc, #224]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e029      	b.n	800283c <HAL_RCC_OscConfig+0x1e4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x1c0>
 80027f2:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a32      	ldr	r2, [pc, #200]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002804:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2c      	ldr	r2, [pc, #176]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e011      	b.n	800283c <HAL_RCC_OscConfig+0x1e4>
 8002818:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a28      	ldr	r2, [pc, #160]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800281e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b26      	ldr	r3, [pc, #152]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a25      	ldr	r2, [pc, #148]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 800282a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002836:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fd3e 	bl	80012c4 <HAL_GetTick>
 8002848:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800284c:	f7fe fd3a 	bl	80012c4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e32e      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285e:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x1f4>
 800286a:	e012      	b.n	8002892 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fd2a 	bl	80012c4 <HAL_GetTick>
 8002870:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002874:	f7fe fd26 	bl	80012c4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e31a      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_RCC_OscConfig+0x268>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 809a 	beq.w	80029d4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x25a>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b18      	cmp	r3, #24
 80028aa:	d149      	bne.n	8002940 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d146      	bne.n	8002940 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e2fe      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
 80028be:	bf00      	nop
 80028c0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80028ca:	4b9a      	ldr	r3, [pc, #616]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0218 	and.w	r2, r3, #24
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d014      	beq.n	8002904 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80028da:	4b96      	ldr	r3, [pc, #600]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0218 	bic.w	r2, r3, #24
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	4993      	ldr	r1, [pc, #588]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80028ec:	f000 fdd0 	bl	8003490 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028f0:	4b91      	ldr	r3, [pc, #580]	@ (8002b38 <HAL_RCC_OscConfig+0x4e0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fc5b 	bl	80011b0 <HAL_InitTick>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e2db      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fcde 	bl	80012c4 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800290c:	f7fe fcda 	bl	80012c4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e2ce      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291e:	4b85      	ldr	r3, [pc, #532]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800292a:	4b82      	ldr	r3, [pc, #520]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	497e      	ldr	r1, [pc, #504]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800293e:	e049      	b.n	80029d4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002948:	4b7a      	ldr	r3, [pc, #488]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 0218 	bic.w	r2, r3, #24
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	4977      	ldr	r1, [pc, #476]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800295a:	4b76      	ldr	r3, [pc, #472]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a75      	ldr	r2, [pc, #468]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fcad 	bl	80012c4 <HAL_GetTick>
 800296a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800296e:	f7fe fca9 	bl	80012c4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e29d      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002980:	4b6c      	ldr	r3, [pc, #432]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800298c:	4b69      	ldr	r3, [pc, #420]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	4966      	ldr	r1, [pc, #408]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 800299c:	4313      	orrs	r3, r2
 800299e:	610b      	str	r3, [r1, #16]
 80029a0:	e018      	b.n	80029d4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a63      	ldr	r2, [pc, #396]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fc89 	bl	80012c4 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80029b6:	f7fe fc85 	bl	80012c4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e279      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d03c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e8:	4b52      	ldr	r3, [pc, #328]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80029ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ee:	4a51      	ldr	r2, [pc, #324]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 80029f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fc64 	bl	80012c4 <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a00:	f7fe fc60 	bl	80012c4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e254      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a12:	4b48      	ldr	r3, [pc, #288]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCC_OscConfig+0x3a8>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a22:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a28:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002a2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe fc47 	bl	80012c4 <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fc43 	bl	80012c4 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e237      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a4c:	4b39      	ldr	r3, [pc, #228]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80d2 	beq.w	8002c0c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002a68:	4b34      	ldr	r3, [pc, #208]	@ (8002b3c <HAL_RCC_OscConfig+0x4e4>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d118      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002a74:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_RCC_OscConfig+0x4e4>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	4a30      	ldr	r2, [pc, #192]	@ (8002b3c <HAL_RCC_OscConfig+0x4e4>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fc20 	bl	80012c4 <HAL_GetTick>
 8002a84:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a88:	f7fe fc1c 	bl	80012c4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e210      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002a9a:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <HAL_RCC_OscConfig+0x4e4>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x468>
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002abe:	e074      	b.n	8002baa <HAL_RCC_OscConfig+0x552>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d118      	bne.n	8002afa <HAL_RCC_OscConfig+0x4a2>
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ace:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ad8:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ade:	4a15      	ldr	r2, [pc, #84]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ae4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aee:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002af8:	e057      	b.n	8002baa <HAL_RCC_OscConfig+0x552>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d11e      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4e8>
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b08:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b12:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b18:	4a06      	ldr	r2, [pc, #24]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b22:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b28:	4a02      	ldr	r2, [pc, #8]	@ (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x552>
 8002b34:	44020c00 	.word	0x44020c00
 8002b38:	20000010 	.word	0x20000010
 8002b3c:	44020800 	.word	0x44020800
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b85      	cmp	r3, #133	@ 0x85
 8002b46:	d118      	bne.n	8002b7a <HAL_RCC_OscConfig+0x522>
 8002b48:	4ba2      	ldr	r3, [pc, #648]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b4e:	4aa1      	ldr	r2, [pc, #644]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b58:	4b9e      	ldr	r3, [pc, #632]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b5e:	4a9d      	ldr	r2, [pc, #628]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b68:	4b9a      	ldr	r3, [pc, #616]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b6e:	4a99      	ldr	r2, [pc, #612]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b78:	e017      	b.n	8002baa <HAL_RCC_OscConfig+0x552>
 8002b7a:	4b96      	ldr	r3, [pc, #600]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b80:	4a94      	ldr	r2, [pc, #592]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b8a:	4b92      	ldr	r3, [pc, #584]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b90:	4a90      	ldr	r2, [pc, #576]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b9a:	4b8e      	ldr	r3, [pc, #568]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba0:	4a8c      	ldr	r2, [pc, #560]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fb87 	bl	80012c4 <HAL_GetTick>
 8002bb6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fb83 	bl	80012c4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e175      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd0:	4b80      	ldr	r3, [pc, #512]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ed      	beq.n	8002bba <HAL_RCC_OscConfig+0x562>
 8002bde:	e015      	b.n	8002c0c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7fe fb70 	bl	80012c4 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe fb6c 	bl	80012c4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e15e      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bfe:	4b75      	ldr	r3, [pc, #468]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ed      	bne.n	8002be8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d036      	beq.n	8002c86 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c20:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002c26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fb4a 	bl	80012c4 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002c34:	f7fe fb46 	bl	80012c4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e13a      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c46:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x5dc>
 8002c52:	e018      	b.n	8002c86 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c54:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002c5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fb30 	bl	80012c4 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002c68:	f7fe fb2c 	bl	80012c4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e120      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c7a:	4b56      	ldr	r3, [pc, #344]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8115 	beq.w	8002eba <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	f000 80af 	beq.w	8002df6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	f040 8086 	bne.w	8002dae <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002ca8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fb09 	bl	80012c4 <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe fb05 	bl	80012c4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0f9      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cc8:	4b42      	ldr	r3, [pc, #264]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cdc:	f023 0303 	bic.w	r3, r3, #3
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ce8:	0212      	lsls	r2, r2, #8
 8002cea:	430a      	orrs	r2, r1
 8002cec:	4939      	ldr	r1, [pc, #228]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d00:	3b01      	subs	r3, #1
 8002d02:	025b      	lsls	r3, r3, #9
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d22:	492c      	ldr	r1, [pc, #176]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002d28:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	4a29      	ldr	r2, [pc, #164]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d2e:	f023 0310 	bic.w	r3, r3, #16
 8002d32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	4a26      	ldr	r2, [pc, #152]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002d3e:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	4a24      	ldr	r2, [pc, #144]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d44:	f043 0310 	orr.w	r3, r3, #16
 8002d48:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002d4a:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	f023 020c 	bic.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	491f      	ldr	r1, [pc, #124]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	f023 0220 	bic.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d68:	491a      	ldr	r1, [pc, #104]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d6e:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	4a18      	ldr	r2, [pc, #96]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fa9d 	bl	80012c4 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe fa99 	bl	80012c4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e08d      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x736>
 8002dac:	e085      	b.n	8002eba <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a08      	ldr	r2, [pc, #32]	@ (8002dd4 <HAL_RCC_OscConfig+0x77c>)
 8002db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe fa83 	bl	80012c4 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002dc2:	f7fe fa7f 	bl	80012c4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d903      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e073      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
 8002dd4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ee      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002de4:	4b37      	ldr	r3, [pc, #220]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	4a36      	ldr	r2, [pc, #216]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002dea:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	6293      	str	r3, [r2, #40]	@ 0x28
 8002df4:	e061      	b.n	8002eba <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002df6:	4b33      	ldr	r3, [pc, #204]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dfc:	4b31      	ldr	r3, [pc, #196]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e00:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d031      	beq.n	8002e6e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d12a      	bne.n	8002e6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d122      	bne.n	8002e6e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d11a      	bne.n	8002e6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	0a5b      	lsrs	r3, r3, #9
 8002e3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d111      	bne.n	8002e6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d108      	bne.n	8002e6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	0e1b      	lsrs	r3, r3, #24
 8002e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e024      	b.n	8002ebc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e72:	4b14      	ldr	r3, [pc, #80]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e76:	08db      	lsrs	r3, r3, #3
 8002e78:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d01a      	beq.n	8002eba <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002e84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e88:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002e8a:	f023 0310 	bic.w	r3, r3, #16
 8002e8e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fa18 	bl	80012c4 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002e96:	bf00      	nop
 8002e98:	f7fe fa14 	bl	80012c4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d0f9      	beq.n	8002e98 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea8:	4a06      	ldr	r2, [pc, #24]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <HAL_RCC_OscConfig+0x86c>)
 8002eb4:	f043 0310 	orr.w	r3, r3, #16
 8002eb8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	44020c00 	.word	0x44020c00

08002ec8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e19e      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b83      	ldr	r3, [pc, #524]	@ (80030ec <HAL_RCC_ClockConfig+0x224>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b80      	ldr	r3, [pc, #512]	@ (80030ec <HAL_RCC_ClockConfig+0x224>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	497e      	ldr	r1, [pc, #504]	@ (80030ec <HAL_RCC_ClockConfig+0x224>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b7c      	ldr	r3, [pc, #496]	@ (80030ec <HAL_RCC_ClockConfig+0x224>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e186      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	4b74      	ldr	r3, [pc, #464]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d909      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f2a:	4b71      	ldr	r3, [pc, #452]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	496d      	ldr	r1, [pc, #436]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	4b68      	ldr	r3, [pc, #416]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d909      	bls.n	8002f70 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f5c:	4b64      	ldr	r3, [pc, #400]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	4961      	ldr	r1, [pc, #388]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	4b5b      	ldr	r3, [pc, #364]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d908      	bls.n	8002f9e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002f8c:	4b58      	ldr	r3, [pc, #352]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4955      	ldr	r1, [pc, #340]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	4b50      	ldr	r3, [pc, #320]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d908      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002fba:	4b4d      	ldr	r3, [pc, #308]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 020f 	bic.w	r2, r3, #15
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	494a      	ldr	r1, [pc, #296]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8093 	beq.w	8003100 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fe2:	4b43      	ldr	r3, [pc, #268]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d121      	bne.n	8003032 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e113      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e107      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003012:	4b37      	ldr	r3, [pc, #220]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0fb      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003022:	4b33      	ldr	r3, [pc, #204]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0f3      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003032:	4b2f      	ldr	r3, [pc, #188]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	492c      	ldr	r1, [pc, #176]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 8003040:	4313      	orrs	r3, r2
 8003042:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fe f93e 	bl	80012c4 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d112      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fe f936 	bl	80012c4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0d7      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306a:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0318 	and.w	r3, r3, #24
 8003072:	2b18      	cmp	r3, #24
 8003074:	d1ee      	bne.n	8003054 <HAL_RCC_ClockConfig+0x18c>
 8003076:	e043      	b.n	8003100 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d112      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003082:	f7fe f91f 	bl	80012c4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0c0      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003098:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 0318 	and.w	r3, r3, #24
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d1ee      	bne.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
 80030a4:	e02c      	b.n	8003100 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d122      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe f908 	bl	80012c4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0a9      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80030c6:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <HAL_RCC_ClockConfig+0x228>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0318 	and.w	r3, r3, #24
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d1ee      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x1e8>
 80030d2:	e015      	b.n	8003100 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7fe f8f6 	bl	80012c4 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d906      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e097      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
 80030ea:	bf00      	nop
 80030ec:	40022000 	.word	0x40022000
 80030f0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f003 0318 	and.w	r3, r3, #24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e9      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b44      	ldr	r3, [pc, #272]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	429a      	cmp	r2, r3
 800311a:	d208      	bcs.n	800312e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800311c:	4b41      	ldr	r3, [pc, #260]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 020f 	bic.w	r2, r3, #15
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	493e      	ldr	r1, [pc, #248]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312e:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <HAL_RCC_ClockConfig+0x360>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d210      	bcs.n	800315e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313c:	4b3a      	ldr	r3, [pc, #232]	@ (8003228 <HAL_RCC_ClockConfig+0x360>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 020f 	bic.w	r2, r3, #15
 8003144:	4938      	ldr	r1, [pc, #224]	@ (8003228 <HAL_RCC_ClockConfig+0x360>)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	4b36      	ldr	r3, [pc, #216]	@ (8003228 <HAL_RCC_ClockConfig+0x360>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e05d      	b.n	800321a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b2d      	ldr	r3, [pc, #180]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003176:	429a      	cmp	r2, r3
 8003178:	d208      	bcs.n	800318c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800317a:	4b2a      	ldr	r3, [pc, #168]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4927      	ldr	r1, [pc, #156]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d012      	beq.n	80031be <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d209      	bcs.n	80031be <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	491a      	ldr	r1, [pc, #104]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031d8:	429a      	cmp	r2, r3
 80031da:	d209      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	490e      	ldr	r1, [pc, #56]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80031f0:	f000 f822 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	490b      	ldr	r1, [pc, #44]	@ (800322c <HAL_RCC_ClockConfig+0x364>)
 8003200:	5ccb      	ldrb	r3, [r1, r3]
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <HAL_RCC_ClockConfig+0x368>)
 8003208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800320a:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <HAL_RCC_ClockConfig+0x36c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd ffce 	bl	80011b0 <HAL_InitTick>
 8003214:	4603      	mov	r3, r0
 8003216:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003218:	7afb      	ldrb	r3, [r7, #11]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	44020c00 	.word	0x44020c00
 8003228:	40022000 	.word	0x40022000
 800322c:	08008450 	.word	0x08008450
 8003230:	20000000 	.word	0x20000000
 8003234:	20000010 	.word	0x20000010

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	@ 0x24
 800323c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800323e:	4b8c      	ldr	r3, [pc, #560]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0318 	and.w	r3, r3, #24
 8003246:	2b08      	cmp	r3, #8
 8003248:	d102      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800324a:	4b8a      	ldr	r3, [pc, #552]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x23c>)
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e107      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003250:	4b87      	ldr	r3, [pc, #540]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f003 0318 	and.w	r3, r3, #24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d112      	bne.n	8003282 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800325c:	4b84      	ldr	r3, [pc, #528]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003268:	4b81      	ldr	r3, [pc, #516]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	4a81      	ldr	r2, [pc, #516]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x240>)
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e0f1      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800327c:	4b7e      	ldr	r3, [pc, #504]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x240>)
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	e0ee      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003282:	4b7b      	ldr	r3, [pc, #492]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0318 	and.w	r3, r3, #24
 800328a:	2b10      	cmp	r3, #16
 800328c:	d102      	bne.n	8003294 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800328e:	4b7b      	ldr	r3, [pc, #492]	@ (800347c <HAL_RCC_GetSysClockFreq+0x244>)
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e0e5      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	4b76      	ldr	r3, [pc, #472]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 0318 	and.w	r3, r3, #24
 800329c:	2b18      	cmp	r3, #24
 800329e:	f040 80dd 	bne.w	800345c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80032a2:	4b73      	ldr	r3, [pc, #460]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80032ac:	4b70      	ldr	r3, [pc, #448]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80032b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80032c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032dc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80b7 	beq.w	8003456 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0xbe>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d056      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x16a>
 80032f4:	e077      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80032f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02d      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003302:	4b5b      	ldr	r3, [pc, #364]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	08db      	lsrs	r3, r3, #3
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	4a5a      	ldr	r2, [pc, #360]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x240>)
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332c:	4b50      	ldr	r3, [pc, #320]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800333c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003340:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x248>
 8003344:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003348:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800334c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003350:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003358:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800335c:	e065      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003368:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003484 <HAL_RCC_GetSysClockFreq+0x24c>
 800336c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003370:	4b3f      	ldr	r3, [pc, #252]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 8003372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003380:	ed97 6a02 	vldr	s12, [r7, #8]
 8003384:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x248>
 8003388:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800338c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003394:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80033a0:	e043      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ac:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x250>
 80033b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80033c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x248>
 80033cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80033d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80033e4:	e021      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800348c <HAL_RCC_GetSysClockFreq+0x254>
 80033f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003408:	ed97 6a02 	vldr	s12, [r7, #8]
 800340c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x248>
 8003410:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003414:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800341c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003424:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003428:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800342a:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x238>)
 800342c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342e:	0a5b      	lsrs	r3, r3, #9
 8003430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003434:	3301      	adds	r3, #1
 8003436:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003442:	edd7 6a06 	vldr	s13, [r7, #24]
 8003446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344e:	ee17 3a90 	vmov	r3, s15
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e004      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e001      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x240>)
 800345e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003460:	69fb      	ldr	r3, [r7, #28]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	@ 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	44020c00 	.word	0x44020c00
 8003474:	003d0900 	.word	0x003d0900
 8003478:	03d09000 	.word	0x03d09000
 800347c:	007a1200 	.word	0x007a1200
 8003480:	46000000 	.word	0x46000000
 8003484:	4c742400 	.word	0x4c742400
 8003488:	4af42400 	.word	0x4af42400
 800348c:	4a742400 	.word	0x4a742400

08003490 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003494:	f7ff fed0 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <HAL_RCC_GetHCLKFreq+0x2c>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800349e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80034a2:	4907      	ldr	r1, [pc, #28]	@ (80034c0 <HAL_RCC_GetHCLKFreq+0x30>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80034a6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a05      	ldr	r2, [pc, #20]	@ (80034c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80034b0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80034b2:	4b04      	ldr	r3, [pc, #16]	@ (80034c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80034b4:	681b      	ldr	r3, [r3, #0]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	44020c00 	.word	0x44020c00
 80034c0:	08008450 	.word	0x08008450
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80034cc:	f7ff ffe0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4904      	ldr	r1, [pc, #16]	@ (80034f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	44020c00 	.word	0x44020c00
 80034f0:	08008460 	.word	0x08008460

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80034f8:	f7ff ffca 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4904      	ldr	r1, [pc, #16]	@ (800351c <HAL_RCC_GetPCLK2Freq+0x28>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	44020c00 	.word	0x44020c00
 800351c:	08008460 	.word	0x08008460

08003520 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003524:	f7ff ffb4 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_GetPCLK3Freq+0x24>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	0b1b      	lsrs	r3, r3, #12
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4904      	ldr	r1, [pc, #16]	@ (8003548 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	44020c00 	.word	0x44020c00
 8003548:	08008460 	.word	0x08008460

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800354c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003550:	b0aa      	sub	sp, #168	@ 0xa8
 8003552:	af00      	add	r7, sp, #0
 8003554:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003558:	2300      	movs	r3, #0
 800355a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800355e:	2300      	movs	r3, #0
 8003560:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003564:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003570:	2500      	movs	r5, #0
 8003572:	ea54 0305 	orrs.w	r3, r4, r5
 8003576:	d00b      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003578:	4bb8      	ldr	r3, [pc, #736]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800357a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800357e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003582:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003588:	4ab4      	ldr	r2, [pc, #720]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800358a:	430b      	orrs	r3, r1
 800358c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f002 0801 	and.w	r8, r2, #1
 800359c:	f04f 0900 	mov.w	r9, #0
 80035a0:	ea58 0309 	orrs.w	r3, r8, r9
 80035a4:	d038      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80035a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d819      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035b0:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035ed 	.word	0x080035ed
 80035bc:	080035d1 	.word	0x080035d1
 80035c0:	080035e5 	.word	0x080035e5
 80035c4:	080035ed 	.word	0x080035ed
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035ed 	.word	0x080035ed
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d4:	3308      	adds	r3, #8
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 fff2 	bl	80055c0 <RCCEx_PLL2_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80035e2:	e004      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80035ea:	e000      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80035ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80035f6:	4b99      	ldr	r3, [pc, #612]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035fc:	f023 0107 	bic.w	r1, r3, #7
 8003600:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003606:	4a95      	ldr	r2, [pc, #596]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003608:	430b      	orrs	r3, r1
 800360a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800360e:	e003      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003614:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f002 0a02 	and.w	sl, r2, #2
 8003624:	f04f 0b00 	mov.w	fp, #0
 8003628:	ea5a 030b 	orrs.w	r3, sl, fp
 800362c:	d03c      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800362e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	2b28      	cmp	r3, #40	@ 0x28
 8003636:	d01b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003638:	2b28      	cmp	r3, #40	@ 0x28
 800363a:	d815      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d019      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003640:	2b20      	cmp	r3, #32
 8003642:	d811      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003644:	2b18      	cmp	r3, #24
 8003646:	d017      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003648:	2b18      	cmp	r3, #24
 800364a:	d80d      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003650:	2b08      	cmp	r3, #8
 8003652:	d109      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003654:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003658:	3308      	adds	r3, #8
 800365a:	4618      	mov	r0, r3
 800365c:	f001 ffb0 	bl	80055c0 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003666:	e00a      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800366e:	e006      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003670:	bf00      	nop
 8003672:	e004      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003674:	bf00      	nop
 8003676:	e002      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800367c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003686:	4b75      	ldr	r3, [pc, #468]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800368c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003690:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003696:	4a71      	ldr	r2, [pc, #452]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003698:	430b      	orrs	r3, r1
 800369a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800369e:	e003      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036a4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f002 0304 	and.w	r3, r2, #4
 80036b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80036c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80036d2:	d01e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80036d4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80036d8:	d817      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80036da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036de:	d01a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e4:	d811      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80036e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036e8:	d017      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80036ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80036ec:	d80d      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d015      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80036f2:	2b40      	cmp	r3, #64	@ 0x40
 80036f4:	d109      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036fa:	3308      	adds	r3, #8
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 ff5f 	bl	80055c0 <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003708:	e00a      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003712:	bf00      	nop
 8003714:	e004      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003716:	bf00      	nop
 8003718:	e002      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10c      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003728:	4b4c      	ldr	r3, [pc, #304]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800372a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800372e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003732:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	4a48      	ldr	r2, [pc, #288]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800373a:	430b      	orrs	r3, r1
 800373c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003746:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800374a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003756:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003760:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d043      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800376a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003774:	d021      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003776:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800377a:	d81a      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800377c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003780:	d01d      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003786:	d814      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003788:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800378c:	d019      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800378e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003792:	d80e      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800379c:	d109      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800379e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a2:	3308      	adds	r3, #8
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 ff0b 	bl	80055c0 <RCCEx_PLL2_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80037b0:	e00a      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037b8:	e006      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80037ba:	bf00      	nop
 80037bc:	e004      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80037c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10c      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80037d0:	4b22      	ldr	r3, [pc, #136]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037d6:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80037da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	4a1e      	ldr	r2, [pc, #120]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037e2:	430b      	orrs	r3, r1
 80037e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037ee:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003800:	2300      	movs	r3, #0
 8003802:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003804:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003808:	460b      	mov	r3, r1
 800380a:	4313      	orrs	r3, r2
 800380c:	d03e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800380e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003818:	d01b      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800381a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800381e:	d814      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003824:	d017      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800382a:	d80e      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003834:	d109      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003836:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800383a:	3308      	adds	r3, #8
 800383c:	4618      	mov	r0, r3
 800383e:	f001 febf 	bl	80055c0 <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003848:	e00b      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003850:	e007      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003852:	bf00      	nop
 8003854:	e005      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003856:	bf00      	nop
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800385a:	bf00      	nop
 800385c:	44020c00 	.word	0x44020c00
        break;
 8003860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003862:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10c      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800386a:	4ba5      	ldr	r3, [pc, #660]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800386c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003870:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003874:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	4aa1      	ldr	r2, [pc, #644]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800387c:	430b      	orrs	r3, r1
 800387e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003882:	e003      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003888:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800388c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003898:	673b      	str	r3, [r7, #112]	@ 0x70
 800389a:	2300      	movs	r3, #0
 800389c:	677b      	str	r3, [r7, #116]	@ 0x74
 800389e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d03b      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80038a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038b2:	d01b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80038b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038b8:	d814      	bhi.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80038ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038be:	d017      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80038c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038c4:	d80e      	bhi.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d014      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80038ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038ce:	d109      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038d4:	3308      	adds	r3, #8
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fe72 	bl	80055c0 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80038e2:	e008      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038ea:	e004      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80038ec:	bf00      	nop
 80038ee:	e002      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80038f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80038fe:	4b80      	ldr	r3, [pc, #512]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003900:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003904:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003908:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800390c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003910:	430b      	orrs	r3, r1
 8003912:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003916:	e003      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800391c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003920:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800392c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800392e:	2300      	movs	r3, #0
 8003930:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003932:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d033      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800393c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003946:	d015      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394c:	d80e      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d012      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003956:	d109      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003958:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800395c:	3308      	adds	r3, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fe2e 	bl	80055c0 <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800396a:	e006      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003972:	e002      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10c      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003982:	4b5f      	ldr	r3, [pc, #380]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003984:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003988:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800398c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	4a5b      	ldr	r2, [pc, #364]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003994:	430b      	orrs	r3, r1
 8003996:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800399a:	e003      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80039a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	2100      	movs	r1, #0
 80039ae:	6639      	str	r1, [r7, #96]	@ 0x60
 80039b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80039b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d033      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80039c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039ca:	d015      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80039cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d0:	d80e      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d012      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80039d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039da:	d109      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e0:	3308      	adds	r3, #8
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fdec 	bl	80055c0 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80039ee:	e006      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039f6:	e002      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80039fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80039fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003a06:	4b3e      	ldr	r3, [pc, #248]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a0c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a16:	4a3a      	ldr	r2, [pc, #232]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a24:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	2100      	movs	r1, #0
 8003a32:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003a44:	4b2e      	ldr	r3, [pc, #184]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	4a2d      	ldr	r2, [pc, #180]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a4e:	61d3      	str	r3, [r2, #28]
 8003a50:	4b2b      	ldr	r3, [pc, #172]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a5c:	4a28      	ldr	r2, [pc, #160]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a70:	2300      	movs	r3, #0
 8003a72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a74:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d046      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a84:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003a88:	d021      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003a8a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003a8e:	d81a      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a94:	d01d      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a9a:	d814      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa0:	d019      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa6:	d80e      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d016      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fd81 	bl	80055c0 <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003ac4:	e00a      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003adc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10f      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003ae4:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ae6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003aea:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003aee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	4a02      	ldr	r2, [pc, #8]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003afc:	e006      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003afe:	bf00      	nop
 8003b00:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b08:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b22:	460b      	mov	r3, r1
 8003b24:	4313      	orrs	r3, r2
 8003b26:	d043      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b32:	d021      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003b34:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b38:	d81a      	bhi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b3e:	d01d      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b44:	d814      	bhi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003b46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b4a:	d019      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003b4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b50:	d80e      	bhi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5a:	d109      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b60:	3308      	adds	r3, #8
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 fd2c 	bl	80055c0 <RCCEx_PLL2_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b76:	e006      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003b78:	bf00      	nop
 8003b7a:	e004      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003b7c:	bf00      	nop
 8003b7e:	e002      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003b80:	bf00      	nop
 8003b82:	e000      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b86:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003b8e:	4bb6      	ldr	r3, [pc, #728]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003b90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003b94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9e:	4ab2      	ldr	r2, [pc, #712]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	d030      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003bcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d80f      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d211      	bcs.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d911      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003be6:	3308      	adds	r3, #8
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 fce9 	bl	80055c0 <RCCEx_PLL2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bf4:	e006      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bfc:	e002      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c04:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003c0c:	4b96      	ldr	r3, [pc, #600]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c12:	f023 0107 	bic.w	r1, r3, #7
 8003c16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c1c:	4a92      	ldr	r2, [pc, #584]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c24:	e003      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c26:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c2a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	2100      	movs	r1, #0
 8003c38:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c44:	460b      	mov	r3, r1
 8003c46:	4313      	orrs	r3, r2
 8003c48:	d022      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003c4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d005      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003c60:	bf00      	nop
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003c6e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c74:	f023 0108 	bic.w	r1, r3, #8
 8003c78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7e:	4a7a      	ldr	r2, [pc, #488]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003c80:	430b      	orrs	r3, r1
 8003c82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f000 80b0 	beq.w	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003cae:	4b6f      	ldr	r3, [pc, #444]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cba:	f7fd fb03 	bl	80012c4 <HAL_GetTick>
 8003cbe:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fd fafe 	bl	80012c4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d903      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cda:	e005      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003cdc:	4b63      	ldr	r3, [pc, #396]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ed      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003ce8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 808a 	bne.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003d00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d022      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d0e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d01b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d16:	4b54      	ldr	r3, [pc, #336]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d24:	4b50      	ldr	r3, [pc, #320]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d2a:	4a4f      	ldr	r2, [pc, #316]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d34:	4b4c      	ldr	r3, [pc, #304]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d3a:	4a4b      	ldr	r2, [pc, #300]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d44:	4a48      	ldr	r2, [pc, #288]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d019      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fab3 	bl	80012c4 <HAL_GetTick>
 8003d5e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	e00d      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fd faae 	bl	80012c4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d903      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003d7e:	e006      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d80:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ea      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003d8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d132      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da4:	d10f      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003da6:	4b30      	ldr	r3, [pc, #192]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003db2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003dba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	61d3      	str	r3, [r2, #28]
 8003dc4:	e005      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003dc6:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dd0:	61d3      	str	r3, [r2, #28]
 8003dd2:	4b25      	ldr	r3, [pc, #148]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd8:	4a23      	ldr	r2, [pc, #140]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003de2:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003de4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dfa:	e008      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e00:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e0a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d038      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e30:	2b30      	cmp	r3, #48	@ 0x30
 8003e32:	d014      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003e34:	2b30      	cmp	r3, #48	@ 0x30
 8003e36:	d80e      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d012      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d80a      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d106      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e48:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	4a06      	ldr	r2, [pc, #24]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e52:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e54:	e00d      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e5c:	e009      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e007      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003e62:	bf00      	nop
 8003e64:	e005      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003e66:	bf00      	nop
 8003e68:	44020c00 	.word	0x44020c00
 8003e6c:	44020800 	.word	0x44020800
        break;
 8003e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e72:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003e7a:	4bb5      	ldr	r3, [pc, #724]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8a:	49b1      	ldr	r1, [pc, #708]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003e92:	e003      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e98:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003e9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003ea8:	623b      	str	r3, [r7, #32]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d03c      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d81d      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003edd 	.word	0x08003edd
 8003ecc:	08003eeb 	.word	0x08003eeb
 8003ed0:	08003eff 	.word	0x08003eff
 8003ed4:	08003f07 	.word	0x08003f07
 8003ed8:	08003f07 	.word	0x08003f07
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003edc:	4b9c      	ldr	r3, [pc, #624]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	4a9b      	ldr	r2, [pc, #620]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003ee8:	e00e      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003eea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eee:	3308      	adds	r3, #8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 fb65 	bl	80055c0 <RCCEx_PLL2_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003f10:	4b8f      	ldr	r3, [pc, #572]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f16:	f023 0207 	bic.w	r2, r3, #7
 8003f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f20:	498b      	ldr	r1, [pc, #556]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f2e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d03c      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d01f      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d819      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003f5c:	2b18      	cmp	r3, #24
 8003f5e:	d01d      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003f60:	2b18      	cmp	r3, #24
 8003f62:	d815      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d007      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003f6c:	e010      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6e:	4b78      	ldr	r3, [pc, #480]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	4a77      	ldr	r2, [pc, #476]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f78:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f7a:	e010      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f80:	3308      	adds	r3, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 fb1c 	bl	80055c0 <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f8e:	e006      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8003f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fac:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4966      	ldr	r1, [pc, #408]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003fbe:	e003      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fc4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d03e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003fe4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fee:	d020      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff4:	d819      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ff8:	d01d      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ffc:	d815      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8004002:	2b40      	cmp	r3, #64	@ 0x40
 8004004:	d007      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004006:	e010      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4b51      	ldr	r3, [pc, #324]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800400a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400c:	4a50      	ldr	r2, [pc, #320]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004012:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004014:	e010      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004016:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800401a:	3308      	adds	r3, #8
 800401c:	4618      	mov	r0, r3
 800401e:	f001 facf 	bl	80055c0 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004028:	e006      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004038:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10c      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004040:	4b43      	ldr	r3, [pc, #268]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004046:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800404a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800404e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004050:	493f      	ldr	r1, [pc, #252]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004058:	e003      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800405e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004062:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	2100      	movs	r1, #0
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004078:	460b      	mov	r3, r1
 800407a:	4313      	orrs	r3, r2
 800407c:	d038      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800407e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004088:	d00e      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800408a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800408e:	d815      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d017      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004098:	d110      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409a:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80040a6:	e00e      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ac:	3308      	adds	r3, #8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fa86 	bl	80055c0 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80040c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80040ce:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80040d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040de:	491c      	ldr	r1, [pc, #112]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040ec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	2100      	movs	r1, #0
 80040fa:	6039      	str	r1, [r7, #0]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d039      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800410c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004112:	2b30      	cmp	r3, #48	@ 0x30
 8004114:	d01e      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004116:	2b30      	cmp	r3, #48	@ 0x30
 8004118:	d815      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800411a:	2b10      	cmp	r3, #16
 800411c:	d002      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800411e:	2b20      	cmp	r3, #32
 8004120:	d007      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8004122:	e010      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004124:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800412a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800412e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004130:	e011      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004132:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004136:	3308      	adds	r3, #8
 8004138:	4618      	mov	r0, r3
 800413a:	f001 fa41 	bl	80055c0 <RCCEx_PLL2_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004144:	e007      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800414e:	bf00      	nop
 8004150:	44020c00 	.word	0x44020c00
        break;
 8004154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004156:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800415e:	4b0c      	ldr	r3, [pc, #48]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004160:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004164:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004168:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800416c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416e:	4908      	ldr	r1, [pc, #32]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004176:	e003      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800417c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8004180:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8004184:	4618      	mov	r0, r3
 8004186:	37a8      	adds	r7, #168	@ 0xa8
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	44020c00 	.word	0x44020c00

08004194 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004194:	b480      	push	{r7}
 8004196:	b08b      	sub	sp, #44	@ 0x2c
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800419c:	4bae      	ldr	r3, [pc, #696]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800419e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80041a6:	4bac      	ldr	r3, [pc, #688]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80041b0:	4ba9      	ldr	r3, [pc, #676]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041ba:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80041bc:	4ba6      	ldr	r3, [pc, #664]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80041c8:	4ba3      	ldr	r3, [pc, #652]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	08db      	lsrs	r3, r3, #3
 80041ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8126 	beq.w	8004438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d053      	beq.n	800429a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d86f      	bhi.n	80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d003      	beq.n	8004206 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d02b      	beq.n	800425c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004204:	e068      	b.n	80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004206:	4b94      	ldr	r3, [pc, #592]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	08db      	lsrs	r3, r3, #3
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	4a92      	ldr	r2, [pc, #584]	@ (800445c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a04 	vldr	s12, [r7, #16]
 800423e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004460 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800425a:	e068      	b.n	800432e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004464 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004278:	ed97 6a04 	vldr	s12, [r7, #16]
 800427c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004460 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004294:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004298:	e049      	b.n	800432e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	ee07 3a90 	vmov	s15, r3
 80042a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004468 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80042a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80042ba:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004460 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80042d6:	e02a      	b.n	800432e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	08db      	lsrs	r3, r3, #3
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	4a5e      	ldr	r2, [pc, #376]	@ (800445c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004310:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004460 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004328:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800432c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800432e:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800433a:	d121      	bne.n	8004380 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800433c:	4b46      	ldr	r3, [pc, #280]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d017      	beq.n	8004378 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004348:	4b43      	ldr	r3, [pc, #268]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800434a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434c:	0a5b      	lsrs	r3, r3, #9
 800434e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800435a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800435e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004362:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800436e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e006      	b.n	8004386 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e002      	b.n	8004386 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004386:	4b34      	ldr	r3, [pc, #208]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004392:	d121      	bne.n	80043d8 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004394:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d017      	beq.n	80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80043b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80043ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	e006      	b.n	80043de <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	e002      	b.n	80043de <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043de:	4b1e      	ldr	r3, [pc, #120]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043ea:	d121      	bne.n	8004430 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80043ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d017      	beq.n	8004428 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043f8:	4b17      	ldr	r3, [pc, #92]	@ (8004458 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fc:	0e1b      	lsrs	r3, r3, #24
 80043fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800440a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800440e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004412:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004426:	e010      	b.n	800444a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
}
 800442e:	e00c      	b.n	800444a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
}
 8004436:	e008      	b.n	800444a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
}
 800444a:	bf00      	nop
 800444c:	372c      	adds	r7, #44	@ 0x2c
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	44020c00 	.word	0x44020c00
 800445c:	03d09000 	.word	0x03d09000
 8004460:	46000000 	.word	0x46000000
 8004464:	4a742400 	.word	0x4a742400
 8004468:	4af42400 	.word	0x4af42400

0800446c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800446c:	b480      	push	{r7}
 800446e:	b08b      	sub	sp, #44	@ 0x2c
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004474:	4bae      	ldr	r3, [pc, #696]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800447e:	4bac      	ldr	r3, [pc, #688]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004488:	4ba9      	ldr	r3, [pc, #676]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004492:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004494:	4ba6      	ldr	r3, [pc, #664]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80044a0:	4ba3      	ldr	r3, [pc, #652]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8126 	beq.w	8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d053      	beq.n	8004572 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d86f      	bhi.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d02b      	beq.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80044dc:	e068      	b.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044de:	4b94      	ldr	r3, [pc, #592]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	08db      	lsrs	r3, r3, #3
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	4a92      	ldr	r2, [pc, #584]	@ (8004734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80044ea:	fa22 f303 	lsr.w	r3, r2, r3
 80044ee:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a04 	vldr	s12, [r7, #16]
 8004516:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004738 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004532:	e068      	b.n	8004606 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800473c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004550:	ed97 6a04 	vldr	s12, [r7, #16]
 8004554:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004738 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004560:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004570:	e049      	b.n	8004606 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8004580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004592:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004738 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80045ae:	e02a      	b.n	8004606 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	08db      	lsrs	r3, r3, #3
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80045e8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004738 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80045ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004600:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004604:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004606:	4b4a      	ldr	r3, [pc, #296]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800460e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004612:	d121      	bne.n	8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004614:	4b46      	ldr	r3, [pc, #280]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d017      	beq.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004620:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004624:	0a5b      	lsrs	r3, r3, #9
 8004626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004636:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800463a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800463e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004646:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e006      	b.n	800465e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e002      	b.n	800465e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800465e:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800466a:	d121      	bne.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800466c:	4b30      	ldr	r3, [pc, #192]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d017      	beq.n	80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004678:	4b2d      	ldr	r3, [pc, #180]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800467a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800468a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800468e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004692:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c2:	d121      	bne.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80046c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d017      	beq.n	8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046d0:	4b17      	ldr	r3, [pc, #92]	@ (8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80046e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80046ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80046ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046fe:	e010      	b.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
}
 8004706:	e00c      	b.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]
}
 800470e:	e008      	b.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
}
 8004722:	bf00      	nop
 8004724:	372c      	adds	r7, #44	@ 0x2c
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	44020c00 	.word	0x44020c00
 8004734:	03d09000 	.word	0x03d09000
 8004738:	46000000 	.word	0x46000000
 800473c:	4a742400 	.word	0x4a742400
 8004740:	4af42400 	.word	0x4af42400

08004744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08c      	sub	sp, #48	@ 0x30
 8004748:	af00      	add	r7, sp, #0
 800474a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800474e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004752:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004756:	430b      	orrs	r3, r1
 8004758:	d14b      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800475a:	4bc4      	ldr	r3, [pc, #784]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800475c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004766:	4bc1      	ldr	r3, [pc, #772]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d108      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800477a:	d104      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800477c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	f000 bf14 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004786:	4bb9      	ldr	r3, [pc, #740]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800478c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004794:	d108      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800479c:	d104      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800479e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80047a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a4:	f000 bf03 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80047a8:	4bb0      	ldr	r3, [pc, #704]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047b4:	d119      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047bc:	d115      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80047be:	4bab      	ldr	r3, [pc, #684]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ca:	d30a      	bcc.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80047cc:	4ba7      	ldr	r3, [pc, #668]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d6:	4aa6      	ldr	r2, [pc, #664]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80047de:	f000 bee6 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80047e6:	f000 bee2 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ee:	f000 bede 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80047f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f6:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80047fa:	ea52 0301 	orrs.w	r3, r2, r1
 80047fe:	f000 838e 	beq.w	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004806:	2a01      	cmp	r2, #1
 8004808:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 800480c:	f080 86cc 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004814:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004818:	ea52 0301 	orrs.w	r3, r2, r1
 800481c:	f000 82aa 	beq.w	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004824:	2a01      	cmp	r2, #1
 8004826:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 800482a:	f080 86bd 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800482e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004832:	f1a3 0110 	sub.w	r1, r3, #16
 8004836:	ea52 0301 	orrs.w	r3, r2, r1
 800483a:	f000 8681 	beq.w	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800483e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004842:	2a01      	cmp	r2, #1
 8004844:	f173 0310 	sbcs.w	r3, r3, #16
 8004848:	f080 86ae 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800484c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004850:	1f19      	subs	r1, r3, #4
 8004852:	ea52 0301 	orrs.w	r3, r2, r1
 8004856:	f000 84b1 	beq.w	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800485a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800485e:	2a01      	cmp	r2, #1
 8004860:	f173 0304 	sbcs.w	r3, r3, #4
 8004864:	f080 86a0 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800486c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004870:	430b      	orrs	r3, r1
 8004872:	f000 85aa 	beq.w	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8004876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800487a:	497e      	ldr	r1, [pc, #504]	@ (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800487c:	428a      	cmp	r2, r1
 800487e:	f173 0300 	sbcs.w	r3, r3, #0
 8004882:	f080 8691 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800488a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800488e:	430b      	orrs	r3, r1
 8004890:	f000 8532 	beq.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004898:	4977      	ldr	r1, [pc, #476]	@ (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800489a:	428a      	cmp	r2, r1
 800489c:	f173 0300 	sbcs.w	r3, r3, #0
 80048a0:	f080 8682 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80048a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80048ac:	430b      	orrs	r3, r1
 80048ae:	f000 84bc 	beq.w	800522a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80048b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b6:	4971      	ldr	r1, [pc, #452]	@ (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80048b8:	428a      	cmp	r2, r1
 80048ba:	f173 0300 	sbcs.w	r3, r3, #0
 80048be:	f080 8673 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80048c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80048ca:	430b      	orrs	r3, r1
 80048cc:	f000 85f2 	beq.w	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80048d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d4:	496a      	ldr	r1, [pc, #424]	@ (8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80048d6:	428a      	cmp	r2, r1
 80048d8:	f173 0300 	sbcs.w	r3, r3, #0
 80048dc:	f080 8664 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80048e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e4:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80048e8:	430b      	orrs	r3, r1
 80048ea:	f000 81e5 	beq.w	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80048ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f2:	4964      	ldr	r1, [pc, #400]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80048f4:	428a      	cmp	r2, r1
 80048f6:	f173 0300 	sbcs.w	r3, r3, #0
 80048fa:	f080 8655 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80048fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004902:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004906:	430b      	orrs	r3, r1
 8004908:	f000 83cc 	beq.w	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800490c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004910:	495d      	ldr	r1, [pc, #372]	@ (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004912:	428a      	cmp	r2, r1
 8004914:	f173 0300 	sbcs.w	r3, r3, #0
 8004918:	f080 8646 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800491c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004920:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004924:	430b      	orrs	r3, r1
 8004926:	f000 8331 	beq.w	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800492a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800492e:	4957      	ldr	r1, [pc, #348]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004930:	428a      	cmp	r2, r1
 8004932:	f173 0300 	sbcs.w	r3, r3, #0
 8004936:	f080 8637 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800493a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800493e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004942:	430b      	orrs	r3, r1
 8004944:	f000 82bb 	beq.w	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800494c:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004950:	f173 0300 	sbcs.w	r3, r3, #0
 8004954:	f080 8628 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800495c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004960:	430b      	orrs	r3, r1
 8004962:	f000 826d 	beq.w	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800496e:	428a      	cmp	r2, r1
 8004970:	f173 0300 	sbcs.w	r3, r3, #0
 8004974:	f080 8618 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800497c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004980:	430b      	orrs	r3, r1
 8004982:	f000 821e 	beq.w	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498a:	f242 0101 	movw	r1, #8193	@ 0x2001
 800498e:	428a      	cmp	r2, r1
 8004990:	f173 0300 	sbcs.w	r3, r3, #0
 8004994:	f080 8608 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800499c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80049a0:	430b      	orrs	r3, r1
 80049a2:	f000 8137 	beq.w	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80049a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049aa:	f241 0101 	movw	r1, #4097	@ 0x1001
 80049ae:	428a      	cmp	r2, r1
 80049b0:	f173 0300 	sbcs.w	r3, r3, #0
 80049b4:	f080 85f8 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049bc:	1f11      	subs	r1, r2, #4
 80049be:	430b      	orrs	r3, r1
 80049c0:	f000 80d2 	beq.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80049c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c8:	2a05      	cmp	r2, #5
 80049ca:	f173 0300 	sbcs.w	r3, r3, #0
 80049ce:	f080 85eb 	bcs.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d6:	1e51      	subs	r1, r2, #1
 80049d8:	430b      	orrs	r3, r1
 80049da:	d006      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80049dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e0:	1e91      	subs	r1, r2, #2
 80049e2:	430b      	orrs	r3, r1
 80049e4:	d06c      	beq.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80049e6:	f000 bddf 	b.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80049ea:	4b20      	ldr	r3, [pc, #128]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80049ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fe fd7a 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8004a00:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a02:	f000 bdd4 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004a06:	4b19      	ldr	r3, [pc, #100]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a12:	d10a      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a1a:	f107 030c 	add.w	r3, r7, #12
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fd24 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a28:	e048      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004a2a:	4b10      	ldr	r3, [pc, #64]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	4a12      	ldr	r2, [pc, #72]	@ (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4e:	e035      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5c:	d11c      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d119      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a68:	e028      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004a6a:	bf00      	nop
 8004a6c:	44020c00 	.word	0x44020c00
 8004a70:	007a1200 	.word	0x007a1200
 8004a74:	20000001 	.word	0x20000001
 8004a78:	10000001 	.word	0x10000001
 8004a7c:	08000001 	.word	0x08000001
 8004a80:	04000001 	.word	0x04000001
 8004a84:	00200001 	.word	0x00200001
 8004a88:	00040001 	.word	0x00040001
 8004a8c:	00020001 	.word	0x00020001
 8004a90:	03d09000 	.word	0x03d09000
 8004a94:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004a98:	4b9f      	ldr	r3, [pc, #636]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d103      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab2:	e003      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ab8:	f000 bd79 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004abc:	f000 bd77 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004ac0:	4b95      	ldr	r3, [pc, #596]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ad2:	f7fe fcf9 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004ad6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ad8:	f000 bd69 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004adc:	4b8e      	ldr	r3, [pc, #568]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae8:	d10a      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d107      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004af0:	f107 030c 	add.w	r3, r7, #12
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fcb9 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afe:	e031      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004b00:	4b85      	ldr	r3, [pc, #532]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d10c      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	2b18      	cmp	r3, #24
 8004b10:	d109      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b12:	4b81      	ldr	r3, [pc, #516]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	08db      	lsrs	r3, r3, #3
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	4a7f      	ldr	r2, [pc, #508]	@ (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b24:	e01e      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004b26:	4b7c      	ldr	r3, [pc, #496]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b32:	d105      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d102      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004b3a:	4b79      	ldr	r3, [pc, #484]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b3e:	e011      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004b40:	4b75      	ldr	r3, [pc, #468]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	2b28      	cmp	r3, #40	@ 0x28
 8004b52:	d103      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b5a:	e003      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b60:	f000 bd25 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004b64:	f000 bd23 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004b68:	4b6b      	ldr	r3, [pc, #428]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b6e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b7a:	f7fe fca5 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004b7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b80:	f000 bd15 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004b84:	4b64      	ldr	r3, [pc, #400]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b90:	d10a      	bne.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fc65 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba6:	e033      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bb8:	d109      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bba:	4b57      	ldr	r3, [pc, #348]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	08db      	lsrs	r3, r3, #3
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	4a55      	ldr	r2, [pc, #340]	@ (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bcc:	e020      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004bce:	4b52      	ldr	r3, [pc, #328]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bda:	d106      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be2:	d102      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004be4:	4b4e      	ldr	r3, [pc, #312]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004be8:	e012      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004bea:	4b4b      	ldr	r3, [pc, #300]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004bfe:	d103      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c06:	e003      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c0c:	f000 bccf 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c10:	f000 bccd 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004c14:	4b40      	ldr	r3, [pc, #256]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004c1e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004c26:	f7fe fc7b 	bl	8003520 <HAL_RCC_GetPCLK3Freq>
 8004c2a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c2c:	f000 bcbf 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c36:	d108      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fc15 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c46:	f000 bcb2 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004c4a:	4b33      	ldr	r3, [pc, #204]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d10d      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	08db      	lsrs	r3, r3, #3
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	4a2c      	ldr	r2, [pc, #176]	@ (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c70:	e020      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004c72:	4b29      	ldr	r3, [pc, #164]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c7e:	d106      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c86:	d102      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004c88:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c8c:	e012      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004c8e:	4b22      	ldr	r3, [pc, #136]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d107      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ca2:	d103      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cb0:	f000 bc7d 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004cb4:	f000 bc7b 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004cb8:	4b17      	ldr	r3, [pc, #92]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d104      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004cca:	f7fe fbe1 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8004cce:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004cd0:	f000 bc6d 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d104      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cda:	f7fe faad 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8004cde:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004ce0:	f000 bc65 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d108      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cea:	f107 030c 	add.w	r3, r7, #12
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fbbc 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cf8:	f000 bc59 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004cfc:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d08:	d10e      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d10b      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004d10:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d14:	e02c      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004d16:	bf00      	nop
 8004d18:	44020c00 	.word	0x44020c00
 8004d1c:	03d09000 	.word	0x03d09000
 8004d20:	003d0900 	.word	0x003d0900
 8004d24:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004d28:	4b95      	ldr	r3, [pc, #596]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d10c      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d109      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d3a:	4b91      	ldr	r3, [pc, #580]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	08db      	lsrs	r3, r3, #3
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	4a8f      	ldr	r2, [pc, #572]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d46:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d4c:	e010      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004d4e:	4b8c      	ldr	r3, [pc, #560]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d102      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004d62:	4b89      	ldr	r3, [pc, #548]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d6c:	f000 bc1f 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d70:	f000 bc1d 	b.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004d74:	4b82      	ldr	r3, [pc, #520]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004d80:	4b7f      	ldr	r3, [pc, #508]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d106      	bne.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d103      	bne.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d9a:	e011      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004d9c:	4b78      	ldr	r3, [pc, #480]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004daa:	d106      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d103      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004db2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db8:	e002      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004dbe:	e3f6      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004dc0:	e3f5      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fe fb78 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004dda:	e3e8      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de2:	d107      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fb3f 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004df2:	e3dc      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004df4:	4b62      	ldr	r3, [pc, #392]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d10d      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e06:	d109      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e08:	4b5d      	ldr	r3, [pc, #372]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	08db      	lsrs	r3, r3, #3
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	4a5c      	ldr	r2, [pc, #368]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e1a:	e010      	b.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004e1c:	4b58      	ldr	r3, [pc, #352]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e28:	d106      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e30:	d102      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004e32:	4b55      	ldr	r3, [pc, #340]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e36:	e002      	b.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e3c:	e3b7      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004e3e:	e3b6      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004e40:	4b4f      	ldr	r3, [pc, #316]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e46:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004e4a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e52:	f7fe fb39 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004e56:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004e58:	e3a9      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e60:	d107      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e62:	f107 030c 	add.w	r3, r7, #12
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fb00 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e70:	e39d      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004e72:	4b43      	ldr	r3, [pc, #268]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d10d      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e84:	d109      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e86:	4b3e      	ldr	r3, [pc, #248]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	08db      	lsrs	r3, r3, #3
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	4a3c      	ldr	r2, [pc, #240]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e98:	e010      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004e9a:	4b39      	ldr	r3, [pc, #228]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8004eb0:	4b35      	ldr	r3, [pc, #212]	@ (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb4:	e002      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004eba:	e378      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ebc:	e377      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004ebe:	4b30      	ldr	r3, [pc, #192]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ec4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7fe fafa 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004ed4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ed6:	e36a      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ee0:	f107 030c 	add.w	r3, r7, #12
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fac1 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004eee:	e35e      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004ef0:	4b23      	ldr	r3, [pc, #140]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f02:	d109      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f04:	4b1e      	ldr	r3, [pc, #120]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	08db      	lsrs	r3, r3, #3
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f16:	e34a      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f1c:	e347      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004f1e:	4b18      	ldr	r3, [pc, #96]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f24:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004f28:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004f30:	f7fe faf6 	bl	8003520 <HAL_RCC_GetPCLK3Freq>
 8004f34:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f36:	e33a      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fa91 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f4e:	e32e      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004f50:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d10d      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f62:	d109      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f64:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	4a05      	ldr	r2, [pc, #20]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f76:	e31a      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f7c:	e317      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f7e:	bf00      	nop
 8004f80:	44020c00 	.word	0x44020c00
 8004f84:	03d09000 	.word	0x03d09000
 8004f88:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004f8c:	4b9b      	ldr	r3, [pc, #620]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004f8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004f9e:	d044      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004fa6:	d879      	bhi.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fae:	d02d      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb6:	d871      	bhi.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fbe:	d017      	beq.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc6:	d869      	bhi.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd4:	d004      	beq.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004fd6:	e061      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004fd8:	f7fe faa2 	bl	8003520 <HAL_RCC_GetPCLK3Freq>
 8004fdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8004fde:	e060      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fe0:	f107 030c 	add.w	r3, r7, #12
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fa41 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8004fee:	e058      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ff0:	4b82      	ldr	r3, [pc, #520]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8004ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d103      	bne.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8004ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005002:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005004:	e04d      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800500a:	e04a      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800500c:	4b7b      	ldr	r3, [pc, #492]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800500e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800501a:	d103      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 800501c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005022:	e03e      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005028:	e03b      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800502a:	4b74      	ldr	r3, [pc, #464]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800502c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005030:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005036:	4b71      	ldr	r3, [pc, #452]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d10c      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005048:	4b6c      	ldr	r3, [pc, #432]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	4a6b      	ldr	r2, [pc, #428]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800505a:	e01e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800505c:	4b67      	ldr	r3, [pc, #412]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005068:	d106      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005070:	d102      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005072:	4b64      	ldr	r3, [pc, #400]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005076:	e010      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005078:	4b60      	ldr	r3, [pc, #384]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005084:	d106      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800508c:	d102      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800508e:	4b5e      	ldr	r3, [pc, #376]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005092:	e002      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005098:	e003      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 800509a:	e002      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80050a0:	bf00      	nop
          }
        }
        break;
 80050a2:	e284      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80050a4:	4b55      	ldr	r3, [pc, #340]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80050a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80050aa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80050ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050b6:	d044      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050be:	d879      	bhi.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050c6:	d02d      	beq.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050ce:	d871      	bhi.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050d6:	d017      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050de:	d869      	bhi.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ec:	d004      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80050ee:	e061      	b.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fe f9ea 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 80050f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80050f6:	e060      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050f8:	f107 030c 	add.w	r3, r7, #12
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff f9b5 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005106:	e058      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005108:	4b3c      	ldr	r3, [pc, #240]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800510a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d103      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800511c:	e04d      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005122:	e04a      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005124:	4b35      	ldr	r3, [pc, #212]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800512a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800512e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005132:	d103      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8005134:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800513a:	e03e      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005140:	e03b      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005142:	4b2e      	ldr	r3, [pc, #184]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005148:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800514e:	4b2b      	ldr	r3, [pc, #172]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d10c      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005160:	4b26      	ldr	r3, [pc, #152]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	4a25      	ldr	r2, [pc, #148]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
 8005170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005172:	e01e      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005174:	4b21      	ldr	r3, [pc, #132]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005180:	d106      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005188:	d102      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800518a:	4b1e      	ldr	r3, [pc, #120]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800518c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800518e:	e010      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005190:	4b1a      	ldr	r3, [pc, #104]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800519c:	d106      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051a4:	d102      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80051a6:	4b18      	ldr	r3, [pc, #96]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051aa:	e002      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80051b2:	e002      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051b8:	bf00      	nop
          }
        }
        break;
 80051ba:	e1f8      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80051bc:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80051c8:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051d4:	d105      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80051e0:	e1e5      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e8:	d110      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ea:	f107 0318 	add.w	r3, r7, #24
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe ffd0 	bl	8004194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051f8:	e1d9      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80051fa:	bf00      	nop
 80051fc:	44020c00 	.word	0x44020c00
 8005200:	03d09000 	.word	0x03d09000
 8005204:	003d0900 	.word	0x003d0900
 8005208:	007a1200 	.word	0x007a1200
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005212:	d107      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005214:	f107 030c 	add.w	r3, r7, #12
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff f927 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005222:	e1c4      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005228:	e1c1      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800522a:	4b9d      	ldr	r3, [pc, #628]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800522c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2b04      	cmp	r3, #4
 800523a:	d859      	bhi.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800523c:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005259 	.word	0x08005259
 8005248:	08005269 	.word	0x08005269
 800524c:	080052f1 	.word	0x080052f1
 8005250:	08005279 	.word	0x08005279
 8005254:	0800527f 	.word	0x0800527f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005258:	f107 0318 	add.w	r3, r7, #24
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe ff99 	bl	8004194 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005266:	e046      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff f8fd 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005276:	e03e      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005278:	4b8a      	ldr	r3, [pc, #552]	@ (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800527a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800527c:	e03b      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800527e:	4b88      	ldr	r3, [pc, #544]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005284:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800528a:	4b85      	ldr	r3, [pc, #532]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800529c:	4b80      	ldr	r3, [pc, #512]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	4a80      	ldr	r2, [pc, #512]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ae:	e01e      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052b0:	4b7b      	ldr	r3, [pc, #492]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052bc:	d106      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c4:	d102      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80052c6:	4b79      	ldr	r3, [pc, #484]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80052c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ca:	e010      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052cc:	4b74      	ldr	r3, [pc, #464]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052d8:	d106      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052e0:	d102      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80052e2:	4b73      	ldr	r3, [pc, #460]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80052e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80052ee:	e002      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80052f4:	bf00      	nop
          }
        }
        break;
 80052f6:	e15a      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80052f8:	4b69      	ldr	r3, [pc, #420]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005306:	2b20      	cmp	r3, #32
 8005308:	d022      	beq.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	2b20      	cmp	r3, #32
 800530e:	d858      	bhi.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	2b18      	cmp	r3, #24
 8005314:	d019      	beq.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	2b18      	cmp	r3, #24
 800531a:	d852      	bhi.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005324:	2b08      	cmp	r3, #8
 8005326:	d008      	beq.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005328:	e04b      	b.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800532a:	f107 0318 	add.w	r3, r7, #24
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe ff30 	bl	8004194 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005338:	e046      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff f894 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005348:	e03e      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800534a:	4b56      	ldr	r3, [pc, #344]	@ (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800534e:	e03b      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005350:	4b53      	ldr	r3, [pc, #332]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005356:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800535c:	4b50      	ldr	r3, [pc, #320]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d10c      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800536e:	4b4c      	ldr	r3, [pc, #304]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	08db      	lsrs	r3, r3, #3
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	4a4b      	ldr	r2, [pc, #300]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005380:	e01e      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005382:	4b47      	ldr	r3, [pc, #284]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800538a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538e:	d106      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005396:	d102      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005398:	4b44      	ldr	r3, [pc, #272]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539c:	e010      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800539e:	4b40      	ldr	r3, [pc, #256]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053aa:	d106      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b2:	d102      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80053b4:	4b3e      	ldr	r3, [pc, #248]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80053b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b8:	e002      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80053be:	e003      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80053c6:	bf00      	nop
          }
        }
        break;
 80053c8:	e0f1      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80053ca:	4b35      	ldr	r3, [pc, #212]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053d0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053dc:	d023      	beq.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e4:	d858      	bhi.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80053ea:	d019      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80053f0:	d852      	bhi.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	2b40      	cmp	r3, #64	@ 0x40
 80053fc:	d008      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 80053fe:	e04b      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005400:	f107 0318 	add.w	r3, r7, #24
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe fec5 	bl	8004194 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800540e:	e046      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005410:	f107 030c 	add.w	r3, r7, #12
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff f829 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800541e:	e03e      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005420:	4b20      	ldr	r3, [pc, #128]	@ (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005422:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005424:	e03b      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005426:	4b1e      	ldr	r3, [pc, #120]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800542c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005432:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b02      	cmp	r3, #2
 800543c:	d10c      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005444:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	4a16      	ldr	r2, [pc, #88]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
 8005454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005456:	e01e      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005458:	4b11      	ldr	r3, [pc, #68]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005464:	d106      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546c:	d102      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800546e:	4b0f      	ldr	r3, [pc, #60]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005472:	e010      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005480:	d106      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005488:	d102      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800548a:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800548e:	e002      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005494:	e003      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005496:	e002      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800549c:	bf00      	nop
          }
        }
        break;
 800549e:	e086      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80054a0:	44020c00 	.word	0x44020c00
 80054a4:	00bb8000 	.word	0x00bb8000
 80054a8:	03d09000 	.word	0x03d09000
 80054ac:	003d0900 	.word	0x003d0900
 80054b0:	007a1200 	.word	0x007a1200
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80054b4:	4b40      	ldr	r3, [pc, #256]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80054b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054be:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80054c0:	4b3d      	ldr	r3, [pc, #244]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054cc:	d105      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80054d4:	4b39      	ldr	r3, [pc, #228]	@ (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d8:	e031      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80054da:	4b37      	ldr	r3, [pc, #220]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054e6:	d10a      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80054e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d107      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054ee:	f107 0318 	add.w	r3, r7, #24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fe4e 	bl	8004194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054fc:	e01f      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80054fe:	4b2e      	ldr	r3, [pc, #184]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b02      	cmp	r3, #2
 800550a:	d106      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	2b20      	cmp	r3, #32
 8005510:	d103      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8005512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005518:	e011      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800551a:	4b27      	ldr	r3, [pc, #156]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800551c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005528:	d106      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	2b30      	cmp	r3, #48	@ 0x30
 800552e:	d103      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005530:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005536:	e002      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800553c:	e037      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800553e:	e036      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005540:	4b1d      	ldr	r3, [pc, #116]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005546:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800554a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	2b10      	cmp	r3, #16
 8005550:	d107      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005552:	f107 0318 	add.w	r3, r7, #24
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fe1c 	bl	8004194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8005560:	e025      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800556a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800556e:	d10a      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8005570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005572:	2b20      	cmp	r3, #32
 8005574:	d107      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005576:	f107 030c 	add.w	r3, r7, #12
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe ff76 	bl	800446c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005584:	e00f      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005586:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005592:	d105      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	2b30      	cmp	r3, #48	@ 0x30
 8005598:	d102      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800559a:	4b08      	ldr	r3, [pc, #32]	@ (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800559e:	e002      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80055a4:	e003      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80055a6:	e002      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055ac:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3730      	adds	r7, #48	@ 0x30
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	44020c00 	.word	0x44020c00
 80055bc:	02dc6c00 	.word	0x02dc6c00

080055c0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80055c8:	4b48      	ldr	r3, [pc, #288]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a47      	ldr	r2, [pc, #284]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80055ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055d4:	f7fb fe76 	bl	80012c4 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055da:	e008      	b.n	80055ee <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055dc:	f7fb fe72 	bl	80012c4 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e07a      	b.n	80056e4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055ee:	4b3f      	ldr	r3, [pc, #252]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80055fa:	4b3c      	ldr	r3, [pc, #240]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6811      	ldr	r1, [r2, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6852      	ldr	r2, [r2, #4]
 800560e:	0212      	lsls	r2, r2, #8
 8005610:	430a      	orrs	r2, r1
 8005612:	4936      	ldr	r1, [pc, #216]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	3b01      	subs	r3, #1
 800561e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	3b01      	subs	r3, #1
 8005628:	025b      	lsls	r3, r3, #9
 800562a:	b29b      	uxth	r3, r3
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	3b01      	subs	r3, #1
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	3b01      	subs	r3, #1
 8005642:	061b      	lsls	r3, r3, #24
 8005644:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005648:	4928      	ldr	r1, [pc, #160]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 800564a:	4313      	orrs	r3, r2
 800564c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800564e:	4b27      	ldr	r3, [pc, #156]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 8005650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005652:	f023 020c 	bic.w	r2, r3, #12
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	4924      	ldr	r1, [pc, #144]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005660:	4b22      	ldr	r3, [pc, #136]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	f023 0220 	bic.w	r2, r3, #32
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	491f      	ldr	r1, [pc, #124]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005672:	4b1e      	ldr	r3, [pc, #120]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 8005674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	491c      	ldr	r1, [pc, #112]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 800567c:	4313      	orrs	r3, r2
 800567e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005680:	4b1a      	ldr	r3, [pc, #104]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	4a19      	ldr	r2, [pc, #100]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800568c:	4b17      	ldr	r3, [pc, #92]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005694:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6a12      	ldr	r2, [r2, #32]
 800569c:	00d2      	lsls	r2, r2, #3
 800569e:	4913      	ldr	r1, [pc, #76]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80056a4:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	4a10      	ldr	r2, [pc, #64]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80056aa:	f043 0310 	orr.w	r3, r3, #16
 80056ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80056b0:	4b0e      	ldr	r3, [pc, #56]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a0d      	ldr	r2, [pc, #52]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80056b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056bc:	f7fb fe02 	bl	80012c4 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056c4:	f7fb fdfe 	bl	80012c4 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e006      	b.n	80056e4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056d6:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <RCCEx_PLL2_Config+0x12c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0

}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	44020c00 	.word	0x44020c00

080056f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e049      	b.n	8005796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fb f9a4 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f000 facc 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d101      	bne.n	80057be <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
 80057bc:	e067      	b.n	800588e <HAL_TIM_Base_Start_DMA+0xee>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d125      	bne.n	8005816 <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) || (Length == 0U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_TIM_Base_Start_DMA+0x36>
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e059      	b.n	800588e <HAL_TIM_Base_Start_DMA+0xee>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005898 <HAL_TIM_Base_Start_DMA+0xf8>)
 80057e8:	661a      	str	r2, [r3, #96]	@ 0x60
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	4a2b      	ldr	r2, [pc, #172]	@ (800589c <HAL_TIM_Base_Start_DMA+0xfc>)
 80057f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	4a2a      	ldr	r2, [pc, #168]	@ (80058a0 <HAL_TIM_Base_Start_DMA+0x100>)
 80057f8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the DMA channel */
  if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a18      	ldr	r0, [r3, #32]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	332c      	adds	r3, #44	@ 0x2c
 8005806:	461a      	mov	r2, r3
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	f000 f9a1 	bl	8005b50 <TIM_DMA_Start_IT>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <HAL_TIM_Base_Start_DMA+0x7e>
 8005814:	e001      	b.n	800581a <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e039      	b.n	800588e <HAL_TIM_Base_Start_DMA+0xee>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e037      	b.n	800588e <HAL_TIM_Base_Start_DMA+0xee>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800582c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <HAL_TIM_Base_Start_DMA+0x104>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_TIM_Base_Start_DMA+0xac>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005840:	d004      	beq.n	800584c <HAL_TIM_Base_Start_DMA+0xac>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	@ (80058a8 <HAL_TIM_Base_Start_DMA+0x108>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d115      	bne.n	8005878 <HAL_TIM_Base_Start_DMA+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	4b16      	ldr	r3, [pc, #88]	@ (80058ac <HAL_TIM_Base_Start_DMA+0x10c>)
 8005854:	4013      	ands	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d015      	beq.n	800588a <HAL_TIM_Base_Start_DMA+0xea>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005864:	d011      	beq.n	800588a <HAL_TIM_Base_Start_DMA+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	e008      	b.n	800588a <HAL_TIM_Base_Start_DMA+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e000      	b.n	800588c <HAL_TIM_Base_Start_DMA+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	08005c95 	.word	0x08005c95
 800589c:	08005cb1 	.word	0x08005cb1
 80058a0:	08005c03 	.word	0x08005c03
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40000400 	.word	0x40000400
 80058ac:	00010007 	.word	0x00010007

080058b0 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c6:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fc f86b 	bl	80019a8 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10f      	bne.n	8005902 <HAL_TIM_Base_Stop_DMA+0x52>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <HAL_TIM_Base_Stop_DMA+0x52>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_TIM_ConfigClockSource+0x1c>
 800592c:	2302      	movs	r3, #2
 800592e:	e0fe      	b.n	8005b2e <HAL_TIM_ConfigClockSource+0x21a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800594e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800595a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800596c:	f000 80c9 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 8005970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005974:	f200 80ce 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005978:	4a6f      	ldr	r2, [pc, #444]	@ (8005b38 <HAL_TIM_ConfigClockSource+0x224>)
 800597a:	4293      	cmp	r3, r2
 800597c:	f000 80c1 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 8005980:	4a6d      	ldr	r2, [pc, #436]	@ (8005b38 <HAL_TIM_ConfigClockSource+0x224>)
 8005982:	4293      	cmp	r3, r2
 8005984:	f200 80c6 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005988:	4a6c      	ldr	r2, [pc, #432]	@ (8005b3c <HAL_TIM_ConfigClockSource+0x228>)
 800598a:	4293      	cmp	r3, r2
 800598c:	f000 80b9 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 8005990:	4a6a      	ldr	r2, [pc, #424]	@ (8005b3c <HAL_TIM_ConfigClockSource+0x228>)
 8005992:	4293      	cmp	r3, r2
 8005994:	f200 80be 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005998:	4a69      	ldr	r2, [pc, #420]	@ (8005b40 <HAL_TIM_ConfigClockSource+0x22c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	f000 80b1 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 80059a0:	4a67      	ldr	r2, [pc, #412]	@ (8005b40 <HAL_TIM_ConfigClockSource+0x22c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	f200 80b6 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 80059a8:	4a66      	ldr	r2, [pc, #408]	@ (8005b44 <HAL_TIM_ConfigClockSource+0x230>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	f000 80a9 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 80059b0:	4a64      	ldr	r2, [pc, #400]	@ (8005b44 <HAL_TIM_ConfigClockSource+0x230>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	f200 80ae 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 80059b8:	4a63      	ldr	r2, [pc, #396]	@ (8005b48 <HAL_TIM_ConfigClockSource+0x234>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	f000 80a1 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 80059c0:	4a61      	ldr	r2, [pc, #388]	@ (8005b48 <HAL_TIM_ConfigClockSource+0x234>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	f200 80a6 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 80059c8:	4a60      	ldr	r2, [pc, #384]	@ (8005b4c <HAL_TIM_ConfigClockSource+0x238>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	f000 8099 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 80059d0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b4c <HAL_TIM_ConfigClockSource+0x238>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	f200 809e 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 80059d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80059dc:	f000 8091 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 80059e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80059e4:	f200 8096 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 80059e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ec:	f000 8089 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 80059f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f4:	f200 808e 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 80059f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059fc:	d03e      	beq.n	8005a7c <HAL_TIM_ConfigClockSource+0x168>
 80059fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a02:	f200 8087 	bhi.w	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0a:	f000 8086 	beq.w	8005b1a <HAL_TIM_ConfigClockSource+0x206>
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a12:	d87f      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a14:	2b70      	cmp	r3, #112	@ 0x70
 8005a16:	d01a      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x13a>
 8005a18:	2b70      	cmp	r3, #112	@ 0x70
 8005a1a:	d87b      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a1c:	2b60      	cmp	r3, #96	@ 0x60
 8005a1e:	d050      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a20:	2b60      	cmp	r3, #96	@ 0x60
 8005a22:	d877      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a24:	2b50      	cmp	r3, #80	@ 0x50
 8005a26:	d03c      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x18e>
 8005a28:	2b50      	cmp	r3, #80	@ 0x50
 8005a2a:	d873      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d058      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005a30:	2b40      	cmp	r3, #64	@ 0x40
 8005a32:	d86f      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a34:	2b30      	cmp	r3, #48	@ 0x30
 8005a36:	d064      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a38:	2b30      	cmp	r3, #48	@ 0x30
 8005a3a:	d86b      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d060      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d867      	bhi.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d05c      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d05a      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x1ee>
 8005a4c:	e062      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a5e:	f000 fa17 	bl	8005e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	609a      	str	r2, [r3, #8]
      break;
 8005a7a:	e04f      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a8c:	f000 fa00 	bl	8005e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a9e:	609a      	str	r2, [r3, #8]
      break;
 8005aa0:	e03c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 f972 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2150      	movs	r1, #80	@ 0x50
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f9cb 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e02c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f000 f991 	bl	8005df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2160      	movs	r1, #96	@ 0x60
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f9bb 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005ae0:	e01c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 f952 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2140      	movs	r1, #64	@ 0x40
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f9ab 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005b00:	e00c      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f000 f9a2 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005b12:	e003      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      break;
 8005b18:	e000      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x208>
      break;
 8005b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	00100070 	.word	0x00100070
 8005b3c:	00100060 	.word	0x00100060
 8005b40:	00100050 	.word	0x00100050
 8005b44:	00100040 	.word	0x00100040
 8005b48:	00100030 	.word	0x00100030
 8005b4c:	00100020 	.word	0x00100020

08005b50 <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d020      	beq.n	8005bac <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d019      	beq.n	8005ba6 <TIM_DMA_Start_IT+0x56>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d014      	beq.n	8005ba6 <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f7fc fa90 	bl	80020c0 <HAL_DMAEx_List_Start_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75fb      	strb	r3, [r7, #23]
 8005ba4:	e00a      	b.n	8005bbc <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
 8005baa:	e007      	b.n	8005bbc <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7fb fe1c 	bl	80017f0 <HAL_DMA_Start_IT>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d107      	bne.n	8005c2a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c28:	e02a      	b.n	8005c80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d107      	bne.n	8005c44 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2202      	movs	r2, #2
 8005c38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c42:	e01d      	b.n	8005c80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d107      	bne.n	8005c5e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2204      	movs	r2, #4
 8005c52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c5c:	e010      	b.n	8005c80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d107      	bne.n	8005c78 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2208      	movs	r2, #8
 8005c6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c76:	e003      	b.n	8005c80 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff ffb4 	bl	8005bee <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff ff8f 	bl	8005bc6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff8b 	bl	8005bda <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <TIM_Base_SetConfig+0xc4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_Base_SetConfig+0x28>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cea:	d003      	beq.n	8005cf4 <TIM_Base_SetConfig+0x28>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a29      	ldr	r2, [pc, #164]	@ (8005d94 <TIM_Base_SetConfig+0xc8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d108      	bne.n	8005d06 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a21      	ldr	r2, [pc, #132]	@ (8005d90 <TIM_Base_SetConfig+0xc4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d007      	beq.n	8005d1e <TIM_Base_SetConfig+0x52>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d14:	d003      	beq.n	8005d1e <TIM_Base_SetConfig+0x52>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1e      	ldr	r2, [pc, #120]	@ (8005d94 <TIM_Base_SetConfig+0xc8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d108      	bne.n	8005d30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a0e      	ldr	r2, [pc, #56]	@ (8005d90 <TIM_Base_SetConfig+0xc4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d103      	bne.n	8005d64 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	611a      	str	r2, [r3, #16]
  }
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40000400 	.word	0x40000400

08005d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 030a 	bic.w	r3, r3, #10
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0210 	bic.w	r2, r3, #16
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	031b      	lsls	r3, r3, #12
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f043 0307 	orr.w	r3, r3, #7
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	609a      	str	r2, [r3, #8]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e051      	b.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a22      	ldr	r2, [pc, #136]	@ (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a14      	ldr	r2, [pc, #80]	@ (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d009      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f54:	d004      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a10      	ldr	r2, [pc, #64]	@ (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10c      	bne.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40000400 	.word	0x40000400

08005fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e042      	b.n	8006038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fa fdb5 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2224      	movs	r2, #36	@ 0x24
 8005fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fe70 	bl	8006cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fcef 	bl	80069d4 <UART_SetConfig>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e01b      	b.n	8006038 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800600e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800601e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 feef 	bl	8006e14 <UART_CheckIdleState>
 8006036:	4603      	mov	r3, r0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006040:	b480      	push	{r7}
 8006042:	b091      	sub	sp, #68	@ 0x44
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006054:	2b20      	cmp	r3, #32
 8006056:	f040 8088 	bne.w	800616a <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <HAL_UART_Transmit_IT+0x26>
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e080      	b.n	800616c <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006074:	2b80      	cmp	r3, #128	@ 0x80
 8006076:	d107      	bne.n	8006088 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006086:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	88fa      	ldrh	r2, [r7, #6]
 800609a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2221      	movs	r2, #33	@ 0x21
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060bc:	d12a      	bne.n	8006114 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c6:	d107      	bne.n	80060d8 <HAL_UART_Transmit_IT+0x98>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d103      	bne.n	80060d8 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a29      	ldr	r2, [pc, #164]	@ (8006178 <HAL_UART_Transmit_IT+0x138>)
 80060d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80060d6:	e002      	b.n	80060de <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a28      	ldr	r2, [pc, #160]	@ (800617c <HAL_UART_Transmit_IT+0x13c>)
 80060dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8006100:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e5      	bne.n	80060de <HAL_UART_Transmit_IT+0x9e>
 8006112:	e028      	b.n	8006166 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611c:	d107      	bne.n	800612e <HAL_UART_Transmit_IT+0xee>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a15      	ldr	r2, [pc, #84]	@ (8006180 <HAL_UART_Transmit_IT+0x140>)
 800612a:	679a      	str	r2, [r3, #120]	@ 0x78
 800612c:	e002      	b.n	8006134 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a14      	ldr	r2, [pc, #80]	@ (8006184 <HAL_UART_Transmit_IT+0x144>)
 8006132:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	613b      	str	r3, [r7, #16]
   return(result);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	69f9      	ldr	r1, [r7, #28]
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e6      	bne.n	8006134 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800616a:	2302      	movs	r3, #2
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3744      	adds	r7, #68	@ 0x44
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	0800761d 	.word	0x0800761d
 800617c:	0800753d 	.word	0x0800753d
 8006180:	0800747b 	.word	0x0800747b
 8006184:	080073c3 	.word	0x080073c3

08006188 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	@ 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800619c:	2b20      	cmp	r3, #32
 800619e:	d146      	bne.n	800622e <HAL_UART_Receive_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_UART_Receive_IT+0x24>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e03f      	b.n	8006230 <HAL_UART_Receive_IT+0xa8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	2b40      	cmp	r3, #64	@ 0x40
 80061c2:	d107      	bne.n	80061d4 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a17      	ldr	r2, [pc, #92]	@ (8006238 <HAL_UART_Receive_IT+0xb0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01f      	beq.n	800621e <HAL_UART_Receive_IT+0x96>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d018      	beq.n	800621e <HAL_UART_Receive_IT+0x96>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	613b      	str	r3, [r7, #16]
   return(result);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	69f9      	ldr	r1, [r7, #28]
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	61bb      	str	r3, [r7, #24]
   return(result);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <HAL_UART_Receive_IT+0x64>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	461a      	mov	r2, r3
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 ff0d 	bl	8007044 <UART_Start_Receive_IT>
 800622a:	4603      	mov	r3, r0
 800622c:	e000      	b.n	8006230 <HAL_UART_Receive_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800622e:	2302      	movs	r3, #2
  }
}
 8006230:	4618      	mov	r0, r3
 8006232:	3728      	adds	r7, #40	@ 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	44002400 	.word	0x44002400

0800623c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b094      	sub	sp, #80	@ 0x50
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006262:	643b      	str	r3, [r7, #64]	@ 0x40
 8006264:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006268:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e6      	bne.n	8006244 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	61fb      	str	r3, [r7, #28]
   return(result);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800629a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800629c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e3      	bne.n	8006276 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d118      	bne.n	80062e8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	613b      	str	r3, [r7, #16]
   return(result);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e6      	bne.n	80062b6 <HAL_UART_AbortReceive_IT+0x7a>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f2:	2b40      	cmp	r3, #64	@ 0x40
 80062f4:	d13a      	bne.n	800636c <HAL_UART_AbortReceive_IT+0x130>
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d017      	beq.n	8006330 <HAL_UART_AbortReceive_IT+0xf4>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006306:	4a26      	ldr	r2, [pc, #152]	@ (80063a0 <HAL_UART_AbortReceive_IT+0x164>)
 8006308:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006310:	4618      	mov	r0, r3
 8006312:	f7fb fb49 	bl	80019a8 <HAL_DMA_Abort_IT>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d03c      	beq.n	8006396 <HAL_UART_AbortReceive_IT+0x15a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800632a:	4610      	mov	r0, r2
 800632c:	4798      	blx	r3
 800632e:	e032      	b.n	8006396 <HAL_UART_AbortReceive_IT+0x15a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	220f      	movs	r2, #15
 8006344:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0208 	orr.w	r2, r2, #8
 8006354:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fb1f 	bl	80069a8 <HAL_UART_AbortReceiveCpltCallback>
 800636a:	e014      	b.n	8006396 <HAL_UART_AbortReceive_IT+0x15a>
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	220f      	movs	r2, #15
 8006380:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fb09 	bl	80069a8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3750      	adds	r7, #80	@ 0x50
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	08007379 	.word	0x08007379

080063a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b0ae      	sub	sp, #184	@ 0xb8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80063d2:	4013      	ands	r3, r2
 80063d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80063d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d11b      	bne.n	8006418 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d015      	beq.n	8006418 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d009      	beq.n	8006418 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 82ac 	beq.w	8006966 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
      }
      return;
 8006416:	e2a6      	b.n	8006966 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80fd 	beq.w	800661c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006422:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006426:	4b7a      	ldr	r3, [pc, #488]	@ (8006610 <HAL_UART_IRQHandler+0x26c>)
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800642e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006432:	4b78      	ldr	r3, [pc, #480]	@ (8006614 <HAL_UART_IRQHandler+0x270>)
 8006434:	4013      	ands	r3, r2
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80f0 	beq.w	800661c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800643c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d011      	beq.n	800646c <HAL_UART_IRQHandler+0xc8>
 8006448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800644c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006462:	f043 0201 	orr.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800646c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d011      	beq.n	800649c <HAL_UART_IRQHandler+0xf8>
 8006478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2202      	movs	r2, #2
 800648a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	f043 0204 	orr.w	r2, r3, #4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800649c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d011      	beq.n	80064cc <HAL_UART_IRQHandler+0x128>
 80064a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2204      	movs	r2, #4
 80064ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c2:	f043 0202 	orr.w	r2, r3, #2
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d017      	beq.n	8006508 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064e8:	4b49      	ldr	r3, [pc, #292]	@ (8006610 <HAL_UART_IRQHandler+0x26c>)
 80064ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2208      	movs	r2, #8
 80064f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fe:	f043 0208 	orr.w	r2, r3, #8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006508:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800650c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <HAL_UART_IRQHandler+0x196>
 8006514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006518:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00c      	beq.n	800653a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006530:	f043 0220 	orr.w	r2, r3, #32
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8212 	beq.w	800696a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d013      	beq.n	800657a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d105      	bne.n	800656a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800655e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006580:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	d005      	beq.n	800659e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006596:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02e      	beq.n	80065fc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fe72 	bl	8007288 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ae:	2b40      	cmp	r3, #64	@ 0x40
 80065b0:	d120      	bne.n	80065f4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d017      	beq.n	80065ec <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065c2:	4a15      	ldr	r2, [pc, #84]	@ (8006618 <HAL_UART_IRQHandler+0x274>)
 80065c4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fb f9eb 	bl	80019a8 <HAL_DMA_Abort_IT>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d019      	beq.n	800660c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80065e6:	4610      	mov	r0, r2
 80065e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ea:	e00f      	b.n	800660c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f9d1 	bl	8006994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f2:	e00b      	b.n	800660c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f9cd 	bl	8006994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fa:	e007      	b.n	800660c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f9c9 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800660a:	e1ae      	b.n	800696a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	bf00      	nop
    return;
 800660e:	e1ac      	b.n	800696a <HAL_UART_IRQHandler+0x5c6>
 8006610:	10000001 	.word	0x10000001
 8006614:	04000120 	.word	0x04000120
 8006618:	08007355 	.word	0x08007355

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 8142 	bne.w	80068aa <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 813b 	beq.w	80068aa <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8134 	beq.w	80068aa <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2210      	movs	r2, #16
 8006648:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006654:	2b40      	cmp	r3, #64	@ 0x40
 8006656:	f040 80aa 	bne.w	80067ae <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006664:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8006668:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8084 	beq.w	800677a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006678:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800667c:	429a      	cmp	r2, r3
 800667e:	d27c      	bcs.n	800677a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006686:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006692:	2b81      	cmp	r3, #129	@ 0x81
 8006694:	d060      	beq.n	8006758 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066bc:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e2      	bne.n	8006696 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80066f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006702:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e3      	bne.n	80066d0 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006726:	f023 0310 	bic.w	r3, r3, #16
 800672a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006738:	65bb      	str	r3, [r7, #88]	@ 0x58
 800673a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800673e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e4      	bne.n	8006716 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006752:	4618      	mov	r0, r3
 8006754:	f7fb f8ac 	bl	80018b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800676a:	b29b      	uxth	r3, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	b29b      	uxth	r3, r3
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f922 	bl	80069bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006778:	e0f9      	b.n	800696e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006780:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006784:	429a      	cmp	r2, r3
 8006786:	f040 80f2 	bne.w	800696e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006792:	2b81      	cmp	r3, #129	@ 0x81
 8006794:	f040 80eb 	bne.w	800696e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f908 	bl	80069bc <HAL_UARTEx_RxEventCallback>
      return;
 80067ac:	e0df      	b.n	800696e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 80d1 	beq.w	8006972 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 80067d0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80cc 	beq.w	8006972 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80067fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006802:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800680a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e4      	bne.n	80067da <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	623b      	str	r3, [r7, #32]
   return(result);
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3308      	adds	r3, #8
 8006834:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006838:	633a      	str	r2, [r7, #48]	@ 0x30
 800683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800683e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e1      	bne.n	8006810 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	60fb      	str	r3, [r7, #12]
   return(result);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f023 0310 	bic.w	r3, r3, #16
 8006874:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	69b9      	ldr	r1, [r7, #24]
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	617b      	str	r3, [r7, #20]
   return(result);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e4      	bne.n	8006860 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800689c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f88a 	bl	80069bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068a8:	e063      	b.n	8006972 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <HAL_UART_IRQHandler+0x530>
 80068b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fc65 	bl	800819c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068d2:	e051      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d014      	beq.n	800690a <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80068e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d03a      	beq.n	8006976 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
    }
    return;
 8006908:	e035      	b.n	8006976 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800690a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800690e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_UART_IRQHandler+0x586>
 8006916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800691a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 feef 	bl	8007706 <UART_EndTransmit_IT>
    return;
 8006928:	e026      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800692a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800692e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <HAL_UART_IRQHandler+0x5a6>
 8006936:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800693a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fc3e 	bl	80081c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006948:	e016      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800694a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800694e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d010      	beq.n	8006978 <HAL_UART_IRQHandler+0x5d4>
 8006956:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800695a:	2b00      	cmp	r3, #0
 800695c:	da0c      	bge.n	8006978 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fc26 	bl	80081b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006964:	e008      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
      return;
 8006966:	bf00      	nop
 8006968:	e006      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
    return;
 800696a:	bf00      	nop
 800696c:	e004      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
      return;
 800696e:	bf00      	nop
 8006970:	e002      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
      return;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <HAL_UART_IRQHandler+0x5d4>
    return;
 8006976:	bf00      	nop
  }
}
 8006978:	37b8      	adds	r7, #184	@ 0xb8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop

08006980 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b094      	sub	sp, #80	@ 0x50
 80069da:	af00      	add	r7, sp, #0
 80069dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	498a      	ldr	r1, [pc, #552]	@ (8006c2c <UART_SetConfig+0x258>)
 8006a04:	4019      	ands	r1, r3
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	68d9      	ldr	r1, [r3, #12]
 8006a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	ea40 0301 	orr.w	r3, r0, r1
 8006a26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b7f      	ldr	r3, [pc, #508]	@ (8006c30 <UART_SetConfig+0x25c>)
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d004      	beq.n	8006a42 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3a:	6a1a      	ldr	r2, [r3, #32]
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006a4c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a56:	430b      	orrs	r3, r1
 8006a58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	f023 000f 	bic.w	r0, r3, #15
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	ea40 0301 	orr.w	r3, r0, r1
 8006a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b6f      	ldr	r3, [pc, #444]	@ (8006c34 <UART_SetConfig+0x260>)
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d102      	bne.n	8006a82 <UART_SetConfig+0xae>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a80:	e01a      	b.n	8006ab8 <UART_SetConfig+0xe4>
 8006a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b6c      	ldr	r3, [pc, #432]	@ (8006c38 <UART_SetConfig+0x264>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d102      	bne.n	8006a92 <UART_SetConfig+0xbe>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a90:	e012      	b.n	8006ab8 <UART_SetConfig+0xe4>
 8006a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b69      	ldr	r3, [pc, #420]	@ (8006c3c <UART_SetConfig+0x268>)
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d102      	bne.n	8006aa2 <UART_SetConfig+0xce>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa0:	e00a      	b.n	8006ab8 <UART_SetConfig+0xe4>
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b62      	ldr	r3, [pc, #392]	@ (8006c30 <UART_SetConfig+0x25c>)
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d103      	bne.n	8006ab4 <UART_SetConfig+0xe0>
 8006aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab2:	e001      	b.n	8006ab8 <UART_SetConfig+0xe4>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c30 <UART_SetConfig+0x25c>)
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d171      	bne.n	8006ba6 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	623b      	str	r3, [r7, #32]
 8006ac8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006aca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ace:	f7fd fe39 	bl	8004744 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ad2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80e2 	beq.w	8006ca0 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	4a57      	ldr	r2, [pc, #348]	@ (8006c40 <UART_SetConfig+0x26c>)
 8006ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	4413      	add	r3, r2
 8006afa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d305      	bcc.n	8006b0c <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d903      	bls.n	8006b14 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006b12:	e0c5      	b.n	8006ca0 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b16:	2200      	movs	r2, #0
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	61fa      	str	r2, [r7, #28]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b20:	4a47      	ldr	r2, [pc, #284]	@ (8006c40 <UART_SetConfig+0x26c>)
 8006b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2200      	movs	r2, #0
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	617a      	str	r2, [r7, #20]
 8006b2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b36:	f7f9 fbaf 	bl	8000298 <__aeabi_uldivmod>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4619      	mov	r1, r3
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	020b      	lsls	r3, r1, #8
 8006b4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b50:	0202      	lsls	r2, r0, #8
 8006b52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b54:	6849      	ldr	r1, [r1, #4]
 8006b56:	0849      	lsrs	r1, r1, #1
 8006b58:	2000      	movs	r0, #0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	eb12 0804 	adds.w	r8, r2, r4
 8006b62:	eb43 0905 	adc.w	r9, r3, r5
 8006b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	60fa      	str	r2, [r7, #12]
 8006b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b74:	4640      	mov	r0, r8
 8006b76:	4649      	mov	r1, r9
 8006b78:	f7f9 fb8e 	bl	8000298 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4613      	mov	r3, r2
 8006b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8a:	d308      	bcc.n	8006b9e <UART_SetConfig+0x1ca>
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b92:	d204      	bcs.n	8006b9e <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	e080      	b.n	8006ca0 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006ba4:	e07c      	b.n	8006ca0 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bae:	d149      	bne.n	8006c44 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bbc:	f7fd fdc2 	bl	8004744 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bc0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d06b      	beq.n	8006ca0 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c40 <UART_SetConfig+0x26c>)
 8006bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bda:	005a      	lsls	r2, r3, #1
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	441a      	add	r2, r3
 8006be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d916      	bls.n	8006c22 <UART_SetConfig+0x24e>
 8006bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfa:	d212      	bcs.n	8006c22 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f023 030f 	bic.w	r3, r3, #15
 8006c04:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c14:	4313      	orrs	r3, r2
 8006c16:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006c1e:	60da      	str	r2, [r3, #12]
 8006c20:	e03e      	b.n	8006ca0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006c28:	e03a      	b.n	8006ca0 <UART_SetConfig+0x2cc>
 8006c2a:	bf00      	nop
 8006c2c:	cfff69f3 	.word	0xcfff69f3
 8006c30:	44002400 	.word	0x44002400
 8006c34:	40013800 	.word	0x40013800
 8006c38:	40004400 	.word	0x40004400
 8006c3c:	40004800 	.word	0x40004800
 8006c40:	08008468 	.word	0x08008468
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c46:	2200      	movs	r2, #0
 8006c48:	469a      	mov	sl, r3
 8006c4a:	4693      	mov	fp, r2
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	4659      	mov	r1, fp
 8006c50:	f7fd fd78 	bl	8004744 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c54:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d021      	beq.n	8006ca0 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	4a1a      	ldr	r2, [pc, #104]	@ (8006ccc <UART_SetConfig+0x2f8>)
 8006c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	441a      	add	r2, r3
 8006c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d909      	bls.n	8006c9a <UART_SetConfig+0x2c6>
 8006c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8c:	d205      	bcs.n	8006c9a <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e002      	b.n	8006ca0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	2200      	movs	r2, #0
 8006cba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3750      	adds	r7, #80	@ 0x50
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cca:	bf00      	nop
 8006ccc:	08008468 	.word	0x08008468

08006cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dce:	d10a      	bne.n	8006de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b098      	sub	sp, #96	@ 0x60
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e24:	f7fa fa4e 	bl	80012c4 <HAL_GetTick>
 8006e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d12f      	bne.n	8006e98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e40:	2200      	movs	r2, #0
 8006e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f88e 	bl	8006f68 <UART_WaitOnFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d022      	beq.n	8006e98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e063      	b.n	8006f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0304 	and.w	r3, r3, #4
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d149      	bne.n	8006f3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f857 	bl	8006f68 <UART_WaitOnFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d03c      	beq.n	8006f3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e6      	bne.n	8006ec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f023 0301 	bic.w	r3, r3, #1
 8006f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f12:	61fa      	str	r2, [r7, #28]
 8006f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e012      	b.n	8006f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3758      	adds	r7, #88	@ 0x58
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f78:	e04f      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d04b      	beq.n	800701a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f82:	f7fa f99f 	bl	80012c4 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d302      	bcc.n	8006f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e04e      	b.n	800703a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d037      	beq.n	800701a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b80      	cmp	r3, #128	@ 0x80
 8006fae:	d034      	beq.n	800701a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b40      	cmp	r3, #64	@ 0x40
 8006fb4:	d031      	beq.n	800701a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d110      	bne.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f95b 	bl	8007288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e029      	b.n	800703a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff4:	d111      	bne.n	800701a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f941 	bl	8007288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e00f      	b.n	800703a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4013      	ands	r3, r2
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	429a      	cmp	r2, r3
 8007028:	bf0c      	ite	eq
 800702a:	2301      	moveq	r3, #1
 800702c:	2300      	movne	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	429a      	cmp	r2, r3
 8007036:	d0a0      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007044:	b480      	push	{r7}
 8007046:	b0a3      	sub	sp, #140	@ 0x8c
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007076:	d10e      	bne.n	8007096 <UART_Start_Receive_IT+0x52>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d105      	bne.n	800708c <UART_Start_Receive_IT+0x48>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800708a:	e02d      	b.n	80070e8 <UART_Start_Receive_IT+0xa4>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	22ff      	movs	r2, #255	@ 0xff
 8007090:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007094:	e028      	b.n	80070e8 <UART_Start_Receive_IT+0xa4>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10d      	bne.n	80070ba <UART_Start_Receive_IT+0x76>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d104      	bne.n	80070b0 <UART_Start_Receive_IT+0x6c>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	22ff      	movs	r2, #255	@ 0xff
 80070aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070ae:	e01b      	b.n	80070e8 <UART_Start_Receive_IT+0xa4>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	227f      	movs	r2, #127	@ 0x7f
 80070b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070b8:	e016      	b.n	80070e8 <UART_Start_Receive_IT+0xa4>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070c2:	d10d      	bne.n	80070e0 <UART_Start_Receive_IT+0x9c>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <UART_Start_Receive_IT+0x92>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	227f      	movs	r2, #127	@ 0x7f
 80070d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070d4:	e008      	b.n	80070e8 <UART_Start_Receive_IT+0xa4>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	223f      	movs	r2, #63	@ 0x3f
 80070da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070de:	e003      	b.n	80070e8 <UART_Start_Receive_IT+0xa4>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2222      	movs	r2, #34	@ 0x22
 80070f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800711c:	673a      	str	r2, [r7, #112]	@ 0x70
 800711e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007122:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800712a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e3      	bne.n	80070f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007138:	d14f      	bne.n	80071da <UART_Start_Receive_IT+0x196>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007140:	88fa      	ldrh	r2, [r7, #6]
 8007142:	429a      	cmp	r2, r3
 8007144:	d349      	bcc.n	80071da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800714e:	d107      	bne.n	8007160 <UART_Start_Receive_IT+0x11c>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a47      	ldr	r2, [pc, #284]	@ (8007278 <UART_Start_Receive_IT+0x234>)
 800715c:	675a      	str	r2, [r3, #116]	@ 0x74
 800715e:	e002      	b.n	8007166 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4a46      	ldr	r2, [pc, #280]	@ (800727c <UART_Start_Receive_IT+0x238>)
 8007164:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01a      	beq.n	80071a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800717c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800717e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007192:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007196:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800719e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e4      	bne.n	800716e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3308      	adds	r3, #8
 80071aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80071c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80071ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80071d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e5      	bne.n	80071a4 <UART_Start_Receive_IT+0x160>
 80071d8:	e046      	b.n	8007268 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e2:	d107      	bne.n	80071f4 <UART_Start_Receive_IT+0x1b0>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a24      	ldr	r2, [pc, #144]	@ (8007280 <UART_Start_Receive_IT+0x23c>)
 80071f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80071f2:	e002      	b.n	80071fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4a23      	ldr	r2, [pc, #140]	@ (8007284 <UART_Start_Receive_IT+0x240>)
 80071f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d019      	beq.n	8007236 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007216:	677b      	str	r3, [r7, #116]	@ 0x74
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
 8007222:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e6      	bne.n	8007202 <UART_Start_Receive_IT+0x1be>
 8007234:	e018      	b.n	8007268 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	613b      	str	r3, [r7, #16]
   return(result);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f043 0320 	orr.w	r3, r3, #32
 800724a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007254:	623b      	str	r3, [r7, #32]
 8007256:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	69f9      	ldr	r1, [r7, #28]
 800725a:	6a3a      	ldr	r2, [r7, #32]
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	61bb      	str	r3, [r7, #24]
   return(result);
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e6      	bne.n	8007236 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	378c      	adds	r7, #140	@ 0x8c
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	08007e31 	.word	0x08007e31
 800727c:	08007acd 	.word	0x08007acd
 8007280:	08007915 	.word	0x08007915
 8007284:	0800775d 	.word	0x0800775d

08007288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b095      	sub	sp, #84	@ 0x54
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80072b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e6      	bne.n	8007290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e3      	bne.n	80072c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d118      	bne.n	8007334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f023 0310 	bic.w	r3, r3, #16
 8007316:	647b      	str	r3, [r7, #68]	@ 0x44
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6979      	ldr	r1, [r7, #20]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	613b      	str	r3, [r7, #16]
   return(result);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e6      	bne.n	8007302 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007348:	bf00      	nop
 800734a:	3754      	adds	r7, #84	@ 0x54
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7ff fb12 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007384:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	220f      	movs	r2, #15
 8007394:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0208 	orr.w	r2, r2, #8
 80073a4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f7ff faf7 	bl	80069a8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b08f      	sub	sp, #60	@ 0x3c
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d0:	2b21      	cmp	r3, #33	@ 0x21
 80073d2:	d14c      	bne.n	800746e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d132      	bne.n	8007446 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007400:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e6      	bne.n	80073e0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007426:	633b      	str	r3, [r7, #48]	@ 0x30
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6979      	ldr	r1, [r7, #20]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	613b      	str	r3, [r7, #16]
   return(result);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e6      	bne.n	8007412 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007444:	e013      	b.n	800746e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800746e:	bf00      	nop
 8007470:	373c      	adds	r7, #60	@ 0x3c
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800747a:	b480      	push	{r7}
 800747c:	b091      	sub	sp, #68	@ 0x44
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	2b21      	cmp	r3, #33	@ 0x21
 800748a:	d151      	bne.n	8007530 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007492:	b29b      	uxth	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d132      	bne.n	80074fe <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	623b      	str	r3, [r7, #32]
   return(result);
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80074b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e6      	bne.n	8007498 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074de:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	69b9      	ldr	r1, [r7, #24]
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	617b      	str	r3, [r7, #20]
   return(result);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e6      	bne.n	80074ca <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80074fc:	e018      	b.n	8007530 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007502:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007512:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007518:	1c9a      	adds	r2, r3, #2
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007530:	bf00      	nop
 8007532:	3744      	adds	r7, #68	@ 0x44
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800753c:	b480      	push	{r7}
 800753e:	b091      	sub	sp, #68	@ 0x44
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754a:	2b21      	cmp	r3, #33	@ 0x21
 800754c:	d160      	bne.n	8007610 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007554:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007556:	e057      	b.n	8007608 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d133      	bne.n	80075cc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3308      	adds	r3, #8
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	623b      	str	r3, [r7, #32]
   return(result);
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800757a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007584:	633a      	str	r2, [r7, #48]	@ 0x30
 8007586:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800758a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e5      	bne.n	8007564 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b6:	61fb      	str	r3, [r7, #28]
 80075b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	69b9      	ldr	r1, [r7, #24]
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	617b      	str	r3, [r7, #20]
   return(result);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e6      	bne.n	8007598 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80075ca:	e021      	b.n	8007610 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d013      	beq.n	8007602 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007602:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007604:	3b01      	subs	r3, #1
 8007606:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007608:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1a4      	bne.n	8007558 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800760e:	e7ff      	b.n	8007610 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007610:	bf00      	nop
 8007612:	3744      	adds	r7, #68	@ 0x44
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b091      	sub	sp, #68	@ 0x44
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	2b21      	cmp	r3, #33	@ 0x21
 800762c:	d165      	bne.n	80076fa <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007634:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007636:	e05c      	b.n	80076f2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d133      	bne.n	80076ac <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	61fb      	str	r3, [r7, #28]
   return(result);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007666:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800766a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	60bb      	str	r3, [r7, #8]
   return(result);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800768c:	633b      	str	r3, [r7, #48]	@ 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6979      	ldr	r1, [r7, #20]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	613b      	str	r3, [r7, #16]
   return(result);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e6      	bne.n	8007678 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80076aa:	e026      	b.n	80076fa <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d018      	beq.n	80076ec <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076be:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80076c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ce:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d4:	1c9a      	adds	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80076ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80076ee:	3b01      	subs	r3, #1
 80076f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80076f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d19f      	bne.n	8007638 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80076f8:	e7ff      	b.n	80076fa <UART_TxISR_16BIT_FIFOEN+0xde>
 80076fa:	bf00      	nop
 80076fc:	3744      	adds	r7, #68	@ 0x44
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b088      	sub	sp, #32
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60bb      	str	r3, [r7, #8]
   return(result);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6979      	ldr	r1, [r7, #20]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	613b      	str	r3, [r7, #16]
   return(result);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e6      	bne.n	800770e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff f916 	bl	8006980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007754:	bf00      	nop
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b09c      	sub	sp, #112	@ 0x70
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800776a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007774:	2b22      	cmp	r3, #34	@ 0x22
 8007776:	f040 80be 	bne.w	80078f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007780:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007784:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007788:	b2d9      	uxtb	r1, r3
 800778a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800778e:	b2da      	uxtb	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007794:	400a      	ands	r2, r1
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f040 80a1 	bne.w	8007906 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e6      	bne.n	80077c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007808:	f023 0301 	bic.w	r3, r3, #1
 800780c:	667b      	str	r3, [r7, #100]	@ 0x64
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007816:	647a      	str	r2, [r7, #68]	@ 0x44
 8007818:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800781c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e5      	bne.n	80077f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a33      	ldr	r2, [pc, #204]	@ (8007910 <UART_RxISR_8BIT+0x1b4>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d01f      	beq.n	8007888 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d018      	beq.n	8007888 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	623b      	str	r3, [r7, #32]
   return(result);
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800786a:	663b      	str	r3, [r7, #96]	@ 0x60
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007874:	633b      	str	r3, [r7, #48]	@ 0x30
 8007876:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800787a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d12e      	bne.n	80078ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0310 	bic.w	r3, r3, #16
 80078aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078b4:	61fb      	str	r3, [r7, #28]
 80078b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	69b9      	ldr	r1, [r7, #24]
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	617b      	str	r3, [r7, #20]
   return(result);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e6      	bne.n	8007896 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f003 0310 	and.w	r3, r3, #16
 80078d2:	2b10      	cmp	r3, #16
 80078d4:	d103      	bne.n	80078de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2210      	movs	r2, #16
 80078dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff f868 	bl	80069bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078ec:	e00b      	b.n	8007906 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7f9 fb58 	bl	8000fa4 <HAL_UART_RxCpltCallback>
}
 80078f4:	e007      	b.n	8007906 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0208 	orr.w	r2, r2, #8
 8007904:	619a      	str	r2, [r3, #24]
}
 8007906:	bf00      	nop
 8007908:	3770      	adds	r7, #112	@ 0x70
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	44002400 	.word	0x44002400

08007914 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b09c      	sub	sp, #112	@ 0x70
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007922:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800792c:	2b22      	cmp	r3, #34	@ 0x22
 800792e:	f040 80be 	bne.w	8007aae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007938:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007940:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007942:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007946:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800794a:	4013      	ands	r3, r2
 800794c:	b29a      	uxth	r2, r3
 800794e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007950:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007956:	1c9a      	adds	r2, r3, #2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	f040 80a1 	bne.w	8007abe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800798a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800798c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007990:	667b      	str	r3, [r7, #100]	@ 0x64
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800799a:	657b      	str	r3, [r7, #84]	@ 0x54
 800799c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e6      	bne.n	800797c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	f023 0301 	bic.w	r3, r3, #1
 80079c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3308      	adds	r3, #8
 80079cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80079d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e5      	bne.n	80079ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a33      	ldr	r2, [pc, #204]	@ (8007ac8 <UART_RxISR_16BIT+0x1b4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d01f      	beq.n	8007a40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e6      	bne.n	8007a0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d12e      	bne.n	8007aa6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f023 0310 	bic.w	r3, r3, #16
 8007a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6979      	ldr	r1, [r7, #20]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e6      	bne.n	8007a4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b10      	cmp	r3, #16
 8007a8c:	d103      	bne.n	8007a96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2210      	movs	r2, #16
 8007a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fe ff8c 	bl	80069bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aa4:	e00b      	b.n	8007abe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7f9 fa7c 	bl	8000fa4 <HAL_UART_RxCpltCallback>
}
 8007aac:	e007      	b.n	8007abe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0208 	orr.w	r2, r2, #8
 8007abc:	619a      	str	r2, [r3, #24]
}
 8007abe:	bf00      	nop
 8007ac0:	3770      	adds	r7, #112	@ 0x70
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	44002400 	.word	0x44002400

08007acc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b0ac      	sub	sp, #176	@ 0xb0
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ada:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b02:	2b22      	cmp	r3, #34	@ 0x22
 8007b04:	f040 8183 	bne.w	8007e0e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b0e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b12:	e126      	b.n	8007d62 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007b22:	b2d9      	uxtb	r1, r3
 8007b24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2e:	400a      	ands	r2, r1
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d053      	beq.n	8007c0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d011      	beq.n	8007b96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2201      	movs	r2, #1
 8007b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8c:	f043 0201 	orr.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d011      	beq.n	8007bc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bbc:	f043 0204 	orr.w	r2, r3, #4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d011      	beq.n	8007bf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2204      	movs	r2, #4
 8007be4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bec:	f043 0202 	orr.w	r2, r3, #2
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7fe fec7 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f040 80a3 	bne.w	8007d62 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c40:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007c44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e4      	bne.n	8007c1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3308      	adds	r3, #8
 8007c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c68:	f023 0301 	bic.w	r3, r3, #1
 8007c6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c7a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007c7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007c80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e1      	bne.n	8007c52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a60      	ldr	r2, [pc, #384]	@ (8007e28 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d021      	beq.n	8007cf0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01a      	beq.n	8007cf0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007cdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cde:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ce2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e4      	bne.n	8007cba <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d130      	bne.n	8007d5a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	f023 0310 	bic.w	r3, r3, #16
 8007d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e4      	bne.n	8007cfe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f003 0310 	and.w	r3, r3, #16
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d103      	bne.n	8007d4a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2210      	movs	r2, #16
 8007d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fe fe32 	bl	80069bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007d58:	e00e      	b.n	8007d78 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7f9 f922 	bl	8000fa4 <HAL_UART_RxCpltCallback>
        break;
 8007d60:	e00a      	b.n	8007d78 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d62:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d006      	beq.n	8007d78 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d6e:	f003 0320 	and.w	r3, r3, #32
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f47f aece 	bne.w	8007b14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d7e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d049      	beq.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x352>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d90:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d242      	bcs.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e3      	bne.n	8007d98 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a16      	ldr	r2, [pc, #88]	@ (8007e2c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007dd4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f043 0320 	orr.w	r3, r3, #32
 8007dea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	6979      	ldr	r1, [r7, #20]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	613b      	str	r3, [r7, #16]
   return(result);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e4      	bne.n	8007dd6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e0c:	e007      	b.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	699a      	ldr	r2, [r3, #24]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0208 	orr.w	r2, r2, #8
 8007e1c:	619a      	str	r2, [r3, #24]
}
 8007e1e:	bf00      	nop
 8007e20:	37b0      	adds	r7, #176	@ 0xb0
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	44002400 	.word	0x44002400
 8007e2c:	0800775d 	.word	0x0800775d

08007e30 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b0ae      	sub	sp, #184	@ 0xb8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e3e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e66:	2b22      	cmp	r3, #34	@ 0x22
 8007e68:	f040 8187 	bne.w	800817a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e72:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e76:	e12a      	b.n	80080ce <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e8a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007e8e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007e92:	4013      	ands	r3, r2
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea0:	1c9a      	adds	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d053      	beq.n	8007f76 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d011      	beq.n	8007efe <UART_RxISR_16BIT_FIFOEN+0xce>
 8007eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f24:	f043 0204 	orr.w	r2, r3, #4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f54:	f043 0202 	orr.w	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d006      	beq.n	8007f76 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fe fd13 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 80a5 	bne.w	80080ce <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007fa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e2      	bne.n	8007f84 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007fe6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e1      	bne.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a60      	ldr	r2, [pc, #384]	@ (8008194 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d021      	beq.n	800805c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01a      	beq.n	800805c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800802e:	e853 3f00 	ldrex	r3, [r3]
 8008032:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008036:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800803a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800804a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800804e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e4      	bne.n	8008026 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008060:	2b01      	cmp	r3, #1
 8008062:	d130      	bne.n	80080c6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807a:	f023 0310 	bic.w	r3, r3, #16
 800807e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800808c:	647b      	str	r3, [r7, #68]	@ 0x44
 800808e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800809a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e4      	bne.n	800806a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f003 0310 	and.w	r3, r3, #16
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d103      	bne.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2210      	movs	r2, #16
 80080b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe fc7c 	bl	80069bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80080c4:	e00e      	b.n	80080e4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7f8 ff6c 	bl	8000fa4 <HAL_UART_RxCpltCallback>
        break;
 80080cc:	e00a      	b.n	80080e4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080ce:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d006      	beq.n	80080e4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80080d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f47f aeca 	bne.w	8007e78 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ea:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d049      	beq.n	800818a <UART_RxISR_16BIT_FIFOEN+0x35a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080fc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008100:	429a      	cmp	r2, r3
 8008102:	d242      	bcs.n	800818a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	623b      	str	r3, [r7, #32]
   return(result);
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800811a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008128:	633a      	str	r2, [r7, #48]	@ 0x30
 800812a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800812e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e3      	bne.n	8008104 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a16      	ldr	r2, [pc, #88]	@ (8008198 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008140:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f043 0320 	orr.w	r3, r3, #32
 8008156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008168:	69b9      	ldr	r1, [r7, #24]
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	e841 2300 	strex	r3, r2, [r1]
 8008170:	617b      	str	r3, [r7, #20]
   return(result);
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e4      	bne.n	8008142 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008178:	e007      	b.n	800818a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699a      	ldr	r2, [r3, #24]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f042 0208 	orr.w	r2, r2, #8
 8008188:	619a      	str	r2, [r3, #24]
}
 800818a:	bf00      	nop
 800818c:	37b8      	adds	r7, #184	@ 0xb8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	44002400 	.word	0x44002400
 8008198:	08007915 	.word	0x08007915

0800819c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_UARTEx_DisableFifoMode+0x16>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e027      	b.n	800823e <HAL_UARTEx_DisableFifoMode+0x66>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2224      	movs	r2, #36	@ 0x24
 80081fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800821c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800825e:	2302      	movs	r3, #2
 8008260:	e02d      	b.n	80082be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2224      	movs	r2, #36	@ 0x24
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f850 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082da:	2302      	movs	r3, #2
 80082dc:	e02d      	b.n	800833a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	@ 0x24
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f812 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008364:	e031      	b.n	80083ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008366:	2308      	movs	r3, #8
 8008368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800836a:	2308      	movs	r3, #8
 800836c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	0e5b      	lsrs	r3, r3, #25
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	0f5b      	lsrs	r3, r3, #29
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	7b3a      	ldrb	r2, [r7, #12]
 8008392:	4911      	ldr	r1, [pc, #68]	@ (80083d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008394:	5c8a      	ldrb	r2, [r1, r2]
 8008396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800839a:	7b3a      	ldrb	r2, [r7, #12]
 800839c:	490f      	ldr	r1, [pc, #60]	@ (80083dc <UARTEx_SetNbDataToProcess+0x98>)
 800839e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	7b7a      	ldrb	r2, [r7, #13]
 80083b0:	4909      	ldr	r1, [pc, #36]	@ (80083d8 <UARTEx_SetNbDataToProcess+0x94>)
 80083b2:	5c8a      	ldrb	r2, [r1, r2]
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083b8:	7b7a      	ldrb	r2, [r7, #13]
 80083ba:	4908      	ldr	r1, [pc, #32]	@ (80083dc <UARTEx_SetNbDataToProcess+0x98>)
 80083bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083be:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	08008480 	.word	0x08008480
 80083dc:	08008488 	.word	0x08008488

080083e0 <memset>:
 80083e0:	4402      	add	r2, r0
 80083e2:	4603      	mov	r3, r0
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d100      	bne.n	80083ea <memset+0xa>
 80083e8:	4770      	bx	lr
 80083ea:	f803 1b01 	strb.w	r1, [r3], #1
 80083ee:	e7f9      	b.n	80083e4 <memset+0x4>

080083f0 <__libc_init_array>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008428 <__libc_init_array+0x38>)
 80083f4:	2600      	movs	r6, #0
 80083f6:	4c0d      	ldr	r4, [pc, #52]	@ (800842c <__libc_init_array+0x3c>)
 80083f8:	1b64      	subs	r4, r4, r5
 80083fa:	10a4      	asrs	r4, r4, #2
 80083fc:	42a6      	cmp	r6, r4
 80083fe:	d109      	bne.n	8008414 <__libc_init_array+0x24>
 8008400:	4d0b      	ldr	r5, [pc, #44]	@ (8008430 <__libc_init_array+0x40>)
 8008402:	2600      	movs	r6, #0
 8008404:	4c0b      	ldr	r4, [pc, #44]	@ (8008434 <__libc_init_array+0x44>)
 8008406:	f000 f817 	bl	8008438 <_init>
 800840a:	1b64      	subs	r4, r4, r5
 800840c:	10a4      	asrs	r4, r4, #2
 800840e:	42a6      	cmp	r6, r4
 8008410:	d105      	bne.n	800841e <__libc_init_array+0x2e>
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	f855 3b04 	ldr.w	r3, [r5], #4
 8008418:	3601      	adds	r6, #1
 800841a:	4798      	blx	r3
 800841c:	e7ee      	b.n	80083fc <__libc_init_array+0xc>
 800841e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008422:	3601      	adds	r6, #1
 8008424:	4798      	blx	r3
 8008426:	e7f2      	b.n	800840e <__libc_init_array+0x1e>
 8008428:	08008498 	.word	0x08008498
 800842c:	08008498 	.word	0x08008498
 8008430:	08008498 	.word	0x08008498
 8008434:	0800849c 	.word	0x0800849c

08008438 <_init>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr

08008444 <_fini>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr
