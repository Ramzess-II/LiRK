
LIRK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008374  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080085cc  080085cc  000095cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800860c  0800860c  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  0800860c  0800860c  0000960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008614  08008614  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008614  08008614  00009614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008618  08008618  00009618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800861c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006230  20000018  08008634  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006248  08008634  0000a248  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d9c  00000000  00000000  0000a04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c63  00000000  00000000  00021dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00024a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2b  00000000  00000000  00025db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211de  00000000  00000000  00026ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a18  00000000  00000000  00047ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf700  00000000  00000000  000608d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ffd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000527c  00000000  00000000  0013001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00135298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000018 	.word	0x20000018
 8000274:	00000000 	.word	0x00000000
 8000278:	080085b4 	.word	0x080085b4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000001c 	.word	0x2000001c
 8000294:	080085b4 	.word	0x080085b4

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fe7a 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f812 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9ca 	bl	8000954 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005c0:	f000 f87e 	bl	80006c0 <MX_GPDMA1_Init>
  MX_GPDMA2_Init();
 80005c4:	f000 f89c 	bl	8000700 <MX_GPDMA2_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f916 	bl	80007f8 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f976 	bl	80008bc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005d0:	f000 f926 	bl	8000820 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	doWork();
 80005d4:	f000 fd42 	bl	800105c <doWork>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  work();
 80005d8:	f000 fd5c 	bl	8001094 <work>
 80005dc:	e7fc      	b.n	80005d8 <main+0x28>
	...

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09c      	sub	sp, #112	@ 0x70
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2250      	movs	r2, #80	@ 0x50
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 ffb4 	bl	800855c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000606:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <SystemClock_Config+0xd8>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4a2b      	ldr	r2, [pc, #172]	@ (80006b8 <SystemClock_Config+0xd8>)
 800060c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000610:	6113      	str	r3, [r2, #16]
 8000612:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <SystemClock_Config+0xd8>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800061e:	bf00      	nop
 8000620:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <SystemClock_Config+0xd8>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	2b08      	cmp	r3, #8
 800062a:	d1f9      	bne.n	8000620 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800063a:	2303      	movs	r3, #3
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000642:	2328      	movs	r3, #40	@ 0x28
 8000644:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000652:	230c      	movs	r3, #12
 8000654:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000656:	2300      	movs	r3, #0
 8000658:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f8b6 	bl	80027d4 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800066e:	f000 fa1b 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	231f      	movs	r3, #31
 8000674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fcd7 	bl	8003044 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800069c:	f000 fa04 	bl	8000aa8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <SystemClock_Config+0xdc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <SystemClock_Config+0xdc>)
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	3770      	adds	r7, #112	@ 0x70
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	44020800 	.word	0x44020800
 80006bc:	40022000 	.word	0x40022000

080006c0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_GPDMA1_Init+0x3c>)
 80006c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006cc:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <MX_GPDMA1_Init+0x3c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_GPDMA1_Init+0x3c>)
 80006d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	201b      	movs	r0, #27
 80006ea:	f000 ff99 	bl	8001620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80006ee:	201b      	movs	r0, #27
 80006f0:	f000 ffb0 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	44020c00 	.word	0x44020c00

08000700 <MX_GPDMA2_Init>:
  * @brief GPDMA2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GPDMA2_Init 0 */

  /* USER CODE END GPDMA2_Init 0 */

  DMA_TriggerConfTypeDef TriggerConfig = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA2_CLK_ENABLE();
 8000710:	4b36      	ldr	r3, [pc, #216]	@ (80007ec <MX_GPDMA2_Init+0xec>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000716:	4a35      	ldr	r2, [pc, #212]	@ (80007ec <MX_GPDMA2_Init+0xec>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000720:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <MX_GPDMA2_Init+0xec>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /* GPDMA2 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA2_Channel0_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	205a      	movs	r0, #90	@ 0x5a
 8000734:	f000 ff74 	bl	8001620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel0_IRQn);
 8000738:	205a      	movs	r0, #90	@ 0x5a
 800073a:	f000 ff8b 	bl	8001654 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA2_Init 1 */

  /* USER CODE END GPDMA2_Init 1 */
  handle_GPDMA2_Channel0.Instance = GPDMA2_Channel0;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000740:	4a2c      	ldr	r2, [pc, #176]	@ (80007f4 <MX_GPDMA2_Init+0xf4>)
 8000742:	601a      	str	r2, [r3, #0]
  handle_GPDMA2_Channel0.Init.Request = DMA_REQUEST_SW;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074a:	605a      	str	r2, [r3, #4]
  handle_GPDMA2_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  handle_GPDMA2_Channel0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000752:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000758:	60da      	str	r2, [r3, #12]
  handle_GPDMA2_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 800075a:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 800075c:	2208      	movs	r2, #8
 800075e:	611a      	str	r2, [r3, #16]
  handle_GPDMA2_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  handle_GPDMA2_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000766:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000768:	2202      	movs	r2, #2
 800076a:	619a      	str	r2, [r3, #24]
  handle_GPDMA2_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 800076e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000772:	61da      	str	r2, [r3, #28]
  handle_GPDMA2_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000776:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800077a:	621a      	str	r2, [r3, #32]
  handle_GPDMA2_Channel0.Init.SrcBurstLength = 1;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 800077e:	2201      	movs	r2, #1
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  handle_GPDMA2_Channel0.Init.DestBurstLength = 1;
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000784:	2201      	movs	r2, #1
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  handle_GPDMA2_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 800078a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
  handle_GPDMA2_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000792:	2200      	movs	r2, #0
 8000794:	631a      	str	r2, [r3, #48]	@ 0x30
  handle_GPDMA2_Channel0.Init.Mode = DMA_NORMAL;
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 8000798:	2200      	movs	r2, #0
 800079a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA_Init(&handle_GPDMA2_Channel0) != HAL_OK)
 800079c:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 800079e:	f001 f817 	bl	80017d0 <HAL_DMA_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_GPDMA2_Init+0xac>
  {
    Error_Handler();
 80007a8:	f000 f97e 	bl	8000aa8 <Error_Handler>
  }
  TriggerConfig.TriggerMode = DMA_TRIGM_SINGLE_BURST_TRANSFER;
 80007ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
  TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80007b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80007b6:	60bb      	str	r3, [r7, #8]
  TriggerConfig.TriggerSelection = GPDMA2_TRIGGER_TIM2_TRGO;
 80007b8:	2322      	movs	r3, #34	@ 0x22
 80007ba:	60fb      	str	r3, [r7, #12]
  if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA2_Channel0, &TriggerConfig) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 80007c2:	f001 fdb7 	bl	8002334 <HAL_DMAEx_ConfigTrigger>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_GPDMA2_Init+0xd0>
  {
    Error_Handler();
 80007cc:	f000 f96c 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80007d0:	2110      	movs	r1, #16
 80007d2:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <MX_GPDMA2_Init+0xf0>)
 80007d4:	f001 fb5c 	bl	8001e90 <HAL_DMA_ConfigChannelAttributes>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_GPDMA2_Init+0xe2>
  {
    Error_Handler();
 80007de:	f000 f963 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA2_Init 2 */

  /* USER CODE END GPDMA2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	44020c00 	.word	0x44020c00
 80007f0:	20000034 	.word	0x20000034
 80007f4:	40021050 	.word	0x40021050

080007f8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 ff9d 	bl	800273c <HAL_ICACHE_ConfigAssociativityMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000808:	f000 f94e 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800080c:	f001 ffb6 	bl	800277c <HAL_ICACHE_Enable>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000816:	f000 f947 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <MX_TIM2_Init+0x98>)
 8000840:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000844:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <MX_TIM2_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_TIM2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <MX_TIM2_Init+0x98>)
 8000854:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_TIM2_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_TIM2_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000866:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <MX_TIM2_Init+0x98>)
 8000868:	f005 f800 	bl	800586c <HAL_TIM_Base_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000872:	f000 f919 	bl	8000aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <MX_TIM2_Init+0x98>)
 8000884:	f005 f904 	bl	8005a90 <HAL_TIM_ConfigClockSource>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800088e:	f000 f90b 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000892:	2320      	movs	r3, #32
 8000894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000896:	2380      	movs	r3, #128	@ 0x80
 8000898:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	@ (80008b8 <MX_TIM2_Init+0x98>)
 80008a0:	f005 fbd4 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008aa:	f000 f8fd 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3720      	adds	r7, #32
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000ac 	.word	0x200000ac

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008c2:	4a23      	ldr	r2, [pc, #140]	@ (8000950 <MX_USART1_UART_Init+0x94>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART1_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000904:	4811      	ldr	r0, [pc, #68]	@ (800094c <MX_USART1_UART_Init+0x90>)
 8000906:	f005 fc09 	bl	800611c <HAL_UART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000910:	f000 f8ca 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_USART1_UART_Init+0x90>)
 8000918:	f007 fd55 	bl	80083c6 <HAL_UARTEx_SetTxFifoThreshold>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000922:	f000 f8c1 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000926:	2100      	movs	r1, #0
 8000928:	4808      	ldr	r0, [pc, #32]	@ (800094c <MX_USART1_UART_Init+0x90>)
 800092a:	f007 fd8a 	bl	8008442 <HAL_UARTEx_SetRxFifoThreshold>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 f8b8 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_USART1_UART_Init+0x90>)
 800093a:	f007 fd0b 	bl	8008354 <HAL_UARTEx_DisableFifoMode>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f8b0 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000170 	.word	0x20000170
 8000950:	40013800 	.word	0x40013800

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b4b      	ldr	r3, [pc, #300]	@ (8000a98 <MX_GPIO_Init+0x144>)
 800096c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000970:	4a49      	ldr	r2, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x144>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097a:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <MX_GPIO_Init+0x144>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000988:	4b43      	ldr	r3, [pc, #268]	@ (8000a98 <MX_GPIO_Init+0x144>)
 800098a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098e:	4a42      	ldr	r2, [pc, #264]	@ (8000a98 <MX_GPIO_Init+0x144>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000994:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000998:	4b3f      	ldr	r3, [pc, #252]	@ (8000a98 <MX_GPIO_Init+0x144>)
 800099a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000a98 <MX_GPIO_Init+0x144>)
 80009a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ac:	4a3a      	ldr	r2, [pc, #232]	@ (8000a98 <MX_GPIO_Init+0x144>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b6:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <MX_GPIO_Init+0x144>)
 80009b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <MX_GPIO_Init+0x144>)
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <MX_GPIO_Init+0x144>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d4:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <MX_GPIO_Init+0x144>)
 80009d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80009e8:	482c      	ldr	r0, [pc, #176]	@ (8000a9c <MX_GPIO_Init+0x148>)
 80009ea:	f001 fe75 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, out0_Pin|out1_Pin|out2_Pin|out3_Pin
 80009ee:	2200      	movs	r2, #0
 80009f0:	21ff      	movs	r1, #255	@ 0xff
 80009f2:	482b      	ldr	r0, [pc, #172]	@ (8000aa0 <MX_GPIO_Init+0x14c>)
 80009f4:	f001 fe70 	bl	80026d8 <HAL_GPIO_WritePin>
                          |out4_Pin|out5_Pin|out6_Pin|out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_Pin|voltage5_Pin|voltage3_3_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6150 	mov.w	r1, #3328	@ 0xd00
 80009fe:	4829      	ldr	r0, [pc, #164]	@ (8000aa4 <MX_GPIO_Init+0x150>)
 8000a00:	f001 fe6a 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 8000a04:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481f      	ldr	r0, [pc, #124]	@ (8000a9c <MX_GPIO_Init+0x148>)
 8000a1e:	f001 fcf1 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : keyStart_Pin */
  GPIO_InitStruct.Pin = keyStart_Pin;
 8000a22:	2308      	movs	r3, #8
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(keyStart_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	481b      	ldr	r0, [pc, #108]	@ (8000aa4 <MX_GPIO_Init+0x150>)
 8000a36:	f001 fce5 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : out0_Pin out1_Pin out2_Pin out3_Pin
                           out5_Pin out6_Pin out7_Pin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin
 8000a3a:	23ef      	movs	r3, #239	@ 0xef
 8000a3c:	617b      	str	r3, [r7, #20]
                          |out5_Pin|out6_Pin|out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a52:	f001 fcd7 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_Pin voltage5_Pin voltage3_3_Pin */
  GPIO_InitStruct.Pin = led_Pin|voltage5_Pin|voltage3_3_Pin;
 8000a56:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <MX_GPIO_Init+0x150>)
 8000a70:	f001 fcc8 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : out4_Pin */
  GPIO_InitStruct.Pin = out4_Pin;
 8000a74:	2310      	movs	r3, #16
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(out4_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a8c:	f001 fcba 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	@ 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	44020c00 	.word	0x44020c00
 8000a9c:	42020800 	.word	0x42020800
 8000aa0:	42020400 	.word	0x42020400
 8000aa4:	42020000 	.word	0x42020000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad4:	d153      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <HAL_TIM_Base_MspInit+0xc4>)
 8000ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000adc:	4a2a      	ldr	r2, [pc, #168]	@ (8000b88 <HAL_TIM_Base_MspInit+0xc4>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <HAL_TIM_Base_MspInit+0xc4>)
 8000ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* GPDMA1_REQUEST_TIM2_UP Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000af4:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000af6:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <HAL_TIM_Base_MspInit+0xcc>)
 8000af8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_TIM2_UP;
 8000afa:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000afc:	224c      	movs	r2, #76	@ 0x4c
 8000afe:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b26:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_HIGH_PRIORITY;
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b2a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b2e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000b50:	480e      	ldr	r0, [pc, #56]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b52:	f000 fe3d 	bl	80017d0 <HAL_DMA_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_TIM_Base_MspInit+0x9c>
    {
      Error_Handler();
 8000b5c:	f7ff ffa4 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], handle_GPDMA1_Channel0);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b64:	621a      	str	r2, [r3, #32]
 8000b66:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <HAL_TIM_Base_MspInit+0xc8>)
 8000b70:	f001 f98e 	bl	8001e90 <HAL_DMA_ConfigChannelAttributes>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 8000b7a:	f7ff ff95 	bl	8000aa8 <Error_Handler>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	44020c00 	.word	0x44020c00
 8000b8c:	200000f8 	.word	0x200000f8
 8000b90:	40020050 	.word	0x40020050

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ac      	sub	sp, #176	@ 0xb0
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2288      	movs	r2, #136	@ 0x88
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fcd1 	bl	800855c <memset>
  if(huart->Instance==USART1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000c68 <HAL_UART_MspInit+0xd4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d14c      	bne.n	8000c5e <HAL_UART_MspInit+0xca>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bc4:	f04f 0201 	mov.w	r2, #1
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fd75 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000be4:	f7ff ff60 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be8:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <HAL_UART_MspInit+0xd8>)
 8000bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000bee:	4a1f      	ldr	r2, [pc, #124]	@ (8000c6c <HAL_UART_MspInit+0xd8>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <HAL_UART_MspInit+0xd8>)
 8000bfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <HAL_UART_MspInit+0xd8>)
 8000c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c0c:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <HAL_UART_MspInit+0xd8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_UART_MspInit+0xd8>)
 8000c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA2     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000c24:	2306      	movs	r3, #6
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <HAL_UART_MspInit+0xdc>)
 8000c4a:	f001 fbdb 	bl	8002404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	203a      	movs	r0, #58	@ 0x3a
 8000c54:	f000 fce4 	bl	8001620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c58:	203a      	movs	r0, #58	@ 0x3a
 8000c5a:	f000 fcfb 	bl	8001654 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c5e:	bf00      	nop
 8000c60:	37b0      	adds	r7, #176	@ 0xb0
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	44020c00 	.word	0x44020c00
 8000c70:	42020000 	.word	0x42020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 fb8d 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <GPDMA1_Channel0_IRQHandler+0x10>)
 8000cda:	f000 ff34 	bl	8001b46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */
  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000f8 	.word	0x200000f8

08000ce8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <USART1_IRQHandler+0x10>)
 8000cee:	f005 fc17 	bl	8006520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000170 	.word	0x20000170

08000cfc <GPDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 0 global interrupt.
  */
void GPDMA2_Channel0_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 0 */

  /* USER CODE END GPDMA2_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel0);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <GPDMA2_Channel0_IRQHandler+0x10>)
 8000d02:	f000 ff20 	bl	8001b46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 1 */

  /* USER CODE END GPDMA2_Channel0_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000034 	.word	0x20000034

08000d10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d16:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <SystemInit+0xc8>)
 8000d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd8 <SystemInit+0xc8>)
 8000d1e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <SystemInit+0xcc>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <SystemInit+0xcc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d32:	4b2a      	ldr	r3, [pc, #168]	@ (8000ddc <SystemInit+0xcc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d38:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <SystemInit+0xcc>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4927      	ldr	r1, [pc, #156]	@ (8000ddc <SystemInit+0xcc>)
 8000d3e:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <SystemInit+0xd0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <SystemInit+0xcc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000d4a:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <SystemInit+0xcc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <SystemInit+0xcc>)
 8000d52:	4a24      	ldr	r2, [pc, #144]	@ (8000de4 <SystemInit+0xd4>)
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <SystemInit+0xcc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <SystemInit+0xcc>)
 8000d5e:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <SystemInit+0xd4>)
 8000d60:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <SystemInit+0xcc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <SystemInit+0xcc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <SystemInit+0xcc>)
 8000d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <SystemInit+0xcc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <SystemInit+0xc8>)
 8000d7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d80:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <SystemInit+0xd8>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000d8a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000d92:	d003      	beq.n	8000d9c <SystemInit+0x8c>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d9a:	d117      	bne.n	8000dcc <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <SystemInit+0xd8>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <SystemInit+0xd8>)
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <SystemInit+0xdc>)
 8000dac:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <SystemInit+0xd8>)
 8000db0:	4a0f      	ldr	r2, [pc, #60]	@ (8000df0 <SystemInit+0xe0>)
 8000db2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <SystemInit+0xd8>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <SystemInit+0xd8>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <SystemInit+0xd8>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <SystemInit+0xd8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	61d3      	str	r3, [r2, #28]
  }
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	44020c00 	.word	0x44020c00
 8000de0:	fae2eae3 	.word	0xfae2eae3
 8000de4:	01010280 	.word	0x01010280
 8000de8:	40022000 	.word	0x40022000
 8000dec:	08192a3b 	.word	0x08192a3b
 8000df0:	4c5d6e7f 	.word	0x4c5d6e7f

08000df4 <init_uart>:
uint32_t start_time = 0;  			   // Для отслеживания тайм-аута
uint32_t lenght = 0;

//------------------------------ функции ---------------------------------------------//

void init_uart(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, rxBufUart, 4);     // Начальный прием заголовка
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4903      	ldr	r1, [pc, #12]	@ (8000e08 <init_uart+0x14>)
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <init_uart+0x18>)
 8000dfe:	f005 fa81 	bl	8006304 <HAL_UART_Receive_IT>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20006228 	.word	0x20006228
 8000e0c:	20000170 	.word	0x20000170

08000e10 <sendOk>:

void sendOk (void) {                                // ответить ок
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	txBufUart [0] = 0xAA;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <sendOk+0x20>)
 8000e16:	22aa      	movs	r2, #170	@ 0xaa
 8000e18:	701a      	strb	r2, [r3, #0]
	txBufUart [1] = 0xBB;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <sendOk+0x20>)
 8000e1c:	22bb      	movs	r2, #187	@ 0xbb
 8000e1e:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit_IT(&huart1, txBufUart, 2);    // отправка по прерываниям
 8000e20:	2202      	movs	r2, #2
 8000e22:	4903      	ldr	r1, [pc, #12]	@ (8000e30 <sendOk+0x20>)
 8000e24:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <sendOk+0x24>)
 8000e26:	f005 f9c9 	bl	80061bc <HAL_UART_Transmit_IT>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000621c 	.word	0x2000621c
 8000e34:	20000170 	.word	0x20000170

08000e38 <parsingData>:

uint32_t parsingData (void) {                                                                     // парсинг данных
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	if (calbackOk) {                                                                              // если сработал колбек
 8000e3c:	4b49      	ldr	r3, [pc, #292]	@ (8000f64 <parsingData+0x12c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 808b 	beq.w	8000f5c <parsingData+0x124>
		calbackOk = false;																	      // сбросим его
 8000e46:	4b47      	ldr	r3, [pc, #284]	@ (8000f64 <parsingData+0x12c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
		if (uartProcess == WAIT_DATA) {															  // если ожидание данных было
 8000e4c:	4b46      	ldr	r3, [pc, #280]	@ (8000f68 <parsingData+0x130>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d175      	bne.n	8000f40 <parsingData+0x108>
			if (rxBufUart[0] == 0xAA ){                                                           // проверим нулевой байт
 8000e54:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <parsingData+0x134>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2baa      	cmp	r3, #170	@ 0xaa
 8000e5a:	d16b      	bne.n	8000f34 <parsingData+0xfc>
				if (rxBufUart[1] == 0x55 || rxBufUart[1] == 0x56 || rxBufUart[1] == 0x33) {       // проверим первый байт это данные или команда
 8000e5c:	4b43      	ldr	r3, [pc, #268]	@ (8000f6c <parsingData+0x134>)
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	2b55      	cmp	r3, #85	@ 0x55
 8000e62:	d007      	beq.n	8000e74 <parsingData+0x3c>
 8000e64:	4b41      	ldr	r3, [pc, #260]	@ (8000f6c <parsingData+0x134>)
 8000e66:	785b      	ldrb	r3, [r3, #1]
 8000e68:	2b56      	cmp	r3, #86	@ 0x56
 8000e6a:	d003      	beq.n	8000e74 <parsingData+0x3c>
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <parsingData+0x134>)
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	2b33      	cmp	r3, #51	@ 0x33
 8000e72:	d121      	bne.n	8000eb8 <parsingData+0x80>
					timeoutStart = 0;                                                             // тут сбросим второй тайм аут, который нужен для приема первых 4 байт
 8000e74:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <parsingData+0x138>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
					lenght = rxBufUart [2] << 8;                                                  // соберем длительность
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f6c <parsingData+0x134>)
 8000e7c:	789b      	ldrb	r3, [r3, #2]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4a3c      	ldr	r2, [pc, #240]	@ (8000f74 <parsingData+0x13c>)
 8000e82:	6013      	str	r3, [r2, #0]
					lenght |= rxBufUart [3];
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <parsingData+0x134>)
 8000e86:	78db      	ldrb	r3, [r3, #3]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f74 <parsingData+0x13c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	4a38      	ldr	r2, [pc, #224]	@ (8000f74 <parsingData+0x13c>)
 8000e92:	6013      	str	r3, [r2, #0]
					if (lenght > BUF_SIZE) {                                                      // если она больше буфера
 8000e94:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <parsingData+0x13c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f243 020c 	movw	r2, #12300	@ 0x300c
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d906      	bls.n	8000eae <parsingData+0x76>
						HAL_UART_Receive_IT(&huart1, rxBufUart, 4);                               // на новый захват
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4932      	ldr	r1, [pc, #200]	@ (8000f6c <parsingData+0x134>)
 8000ea4:	4834      	ldr	r0, [pc, #208]	@ (8000f78 <parsingData+0x140>)
 8000ea6:	f005 fa2d 	bl	8006304 <HAL_UART_Receive_IT>
						return ENTRY;                                                             // выйдем
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e057      	b.n	8000f5e <parsingData+0x126>
					}
					start_time = HAL_GetTick();                                                   // если не вышли взводим второй таймаут на большую посылку
 8000eae:	f000 faaf 	bl	8001410 <HAL_GetTick>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4a31      	ldr	r2, [pc, #196]	@ (8000f7c <parsingData+0x144>)
 8000eb6:	6013      	str	r3, [r2, #0]
				}
				switch (rxBufUart[1]) {                                                           // в зависимиости от данных во втором байте выполняем действия
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <parsingData+0x134>)
 8000eba:	785b      	ldrb	r3, [r3, #1]
 8000ebc:	2b56      	cmp	r3, #86	@ 0x56
 8000ebe:	dc4d      	bgt.n	8000f5c <parsingData+0x124>
 8000ec0:	2b55      	cmp	r3, #85	@ 0x55
 8000ec2:	da04      	bge.n	8000ece <parsingData+0x96>
 8000ec4:	2b33      	cmp	r3, #51	@ 0x33
 8000ec6:	d01b      	beq.n	8000f00 <parsingData+0xc8>
 8000ec8:	2b44      	cmp	r3, #68	@ 0x44
 8000eca:	d02c      	beq.n	8000f26 <parsingData+0xee>
 8000ecc:	e046      	b.n	8000f5c <parsingData+0x124>
				case 0x55:
				case 0x56:
					HAL_UART_Receive_IT(&huart1, (uint8_t*) ptrBufTime, lenght - 4);              // в буфер времени принимаем нужное количество
 8000ece:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <parsingData+0x148>)
 8000ed0:	6819      	ldr	r1, [r3, #0]
 8000ed2:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <parsingData+0x13c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3b04      	subs	r3, #4
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	4826      	ldr	r0, [pc, #152]	@ (8000f78 <parsingData+0x140>)
 8000ee0:	f005 fa10 	bl	8006304 <HAL_UART_Receive_IT>
					uartProcess = DATA_RECIVE;                                                    // ставим статус приема данных
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <parsingData+0x130>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	701a      	strb	r2, [r3, #0]
					outVoltage = (rxBufUart[1] == 0x55) ? VOLTAGE3_3 : VOLTAGE5;                  // в зависимости от байта у нас либо 3,3в либо 5
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <parsingData+0x134>)
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	2b55      	cmp	r3, #85	@ 0x55
 8000ef0:	d101      	bne.n	8000ef6 <parsingData+0xbe>
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	e000      	b.n	8000ef8 <parsingData+0xc0>
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <parsingData+0x14c>)
 8000efa:	701a      	strb	r2, [r3, #0]
					return DATA_RECIVE;
 8000efc:	2302      	movs	r3, #2
 8000efe:	e02e      	b.n	8000f5e <parsingData+0x126>
				break;
				case 0x33:
					HAL_UART_Receive_IT(&huart1, (uint8_t*) ptrbufGpio, lenght - 4);              // тоже самое но в другой буфер
 8000f00:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <parsingData+0x150>)
 8000f02:	6819      	ldr	r1, [r3, #0]
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <parsingData+0x13c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4819      	ldr	r0, [pc, #100]	@ (8000f78 <parsingData+0x140>)
 8000f12:	f005 f9f7 	bl	8006304 <HAL_UART_Receive_IT>
					uartProcess = DATA_RECIVE;
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <parsingData+0x130>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	701a      	strb	r2, [r3, #0]
					dataNotEmpty = true;                                                          // это фиксируем что данные загруженны в мк
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <parsingData+0x154>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
					return DATA_RECIVE;
 8000f22:	2302      	movs	r3, #2
 8000f24:	e01b      	b.n	8000f5e <parsingData+0x126>
				break;
				case 0x44:                                                                        // это команда старта
					HAL_UART_Receive_IT(&huart1, rxBufUart, 4);              				      // Перезапуск приема заголовка
 8000f26:	2204      	movs	r2, #4
 8000f28:	4910      	ldr	r1, [pc, #64]	@ (8000f6c <parsingData+0x134>)
 8000f2a:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <parsingData+0x140>)
 8000f2c:	f005 f9ea 	bl	8006304 <HAL_UART_Receive_IT>
					return RECIVE_START;
 8000f30:	2304      	movs	r3, #4
 8000f32:	e014      	b.n	8000f5e <parsingData+0x126>
				break;
				}
			} else {
				HAL_UART_Receive_IT(&huart1, rxBufUart, 4);              						  // Перезапуск приема заголовка
 8000f34:	2204      	movs	r2, #4
 8000f36:	490d      	ldr	r1, [pc, #52]	@ (8000f6c <parsingData+0x134>)
 8000f38:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <parsingData+0x140>)
 8000f3a:	f005 f9e3 	bl	8006304 <HAL_UART_Receive_IT>
 8000f3e:	e00d      	b.n	8000f5c <parsingData+0x124>
			}
		} else if (uartProcess == DATA_RECIVE){                                                   // если принимали данные
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <parsingData+0x130>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d109      	bne.n	8000f5c <parsingData+0x124>
			HAL_UART_Receive_IT(&huart1, rxBufUart, 4);              						      // Перезапуск приема заголовка
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4908      	ldr	r1, [pc, #32]	@ (8000f6c <parsingData+0x134>)
 8000f4c:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <parsingData+0x140>)
 8000f4e:	f005 f9d9 	bl	8006304 <HAL_UART_Receive_IT>
			uartProcess = WAIT_DATA;                                                              // переключимся в прием заголовка
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <parsingData+0x130>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
			return DATA_OK;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <parsingData+0x126>
		}
	}
	return ENTRY;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20006232 	.word	0x20006232
 8000f68:	2000000c 	.word	0x2000000c
 8000f6c:	20006228 	.word	0x20006228
 8000f70:	20006233 	.word	0x20006233
 8000f74:	2000623c 	.word	0x2000623c
 8000f78:	20000170 	.word	0x20000170
 8000f7c:	20006238 	.word	0x20006238
 8000f80:	20000004 	.word	0x20000004
 8000f84:	20006235 	.word	0x20006235
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20006234 	.word	0x20006234

08000f90 <check_timeout>:

void check_timeout(void) {                                                             // таймауты для юарта
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	if (!timeoutStart && huart1.RxXferCount < 4 ) {                                    // это если первые 4 байта по какой то причине долго идут
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <check_timeout+0x8c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10d      	bne.n	8000fb8 <check_timeout+0x28>
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <check_timeout+0x90>)
 8000f9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d807      	bhi.n	8000fb8 <check_timeout+0x28>
		start_time = HAL_GetTick();                                                    // захват времени
 8000fa8:	f000 fa32 	bl	8001410 <HAL_GetTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <check_timeout+0x94>)
 8000fb0:	6013      	str	r3, [r2, #0]
		timeoutStart = true;                                                           // взводим флаг
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <check_timeout+0x8c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
	}
	if (timeoutStart && (HAL_GetTick() - start_time >= 5)) {                           // 5 при скорости 115200 может передаться 500 бит
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <check_timeout+0x8c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d012      	beq.n	8000fe6 <check_timeout+0x56>
 8000fc0:	f000 fa26 	bl	8001410 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <check_timeout+0x94>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d90a      	bls.n	8000fe6 <check_timeout+0x56>
		timeoutStart = false;                                                          // сбросим флаг
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <check_timeout+0x8c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
    	HAL_UART_AbortReceive_IT(&huart1);                                             // сбросим прием
 8000fd6:	4812      	ldr	r0, [pc, #72]	@ (8001020 <check_timeout+0x90>)
 8000fd8:	f005 f9ee 	bl	80063b8 <HAL_UART_AbortReceive_IT>
        HAL_UART_Receive_IT(&huart1, rxBufUart, 4);   			                       // Перезапуск приема заголовка
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4912      	ldr	r1, [pc, #72]	@ (8001028 <check_timeout+0x98>)
 8000fe0:	480f      	ldr	r0, [pc, #60]	@ (8001020 <check_timeout+0x90>)
 8000fe2:	f005 f98f 	bl	8006304 <HAL_UART_Receive_IT>
	}
    if (uartProcess == DATA_RECIVE && (HAL_GetTick() - start_time >= TIMEOUT_MS)) {    // а это уже для приема большого буфера
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <check_timeout+0x9c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d113      	bne.n	8001016 <check_timeout+0x86>
 8000fee:	f000 fa0f 	bl	8001410 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <check_timeout+0x94>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ffe:	d30a      	bcc.n	8001016 <check_timeout+0x86>
    	uartProcess = WAIT_DATA;                                                       // вернемся в прием первых 4 байт
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <check_timeout+0x9c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
    	HAL_UART_AbortReceive_IT(&huart1);                                             // сбросим прием
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <check_timeout+0x90>)
 8001008:	f005 f9d6 	bl	80063b8 <HAL_UART_AbortReceive_IT>
        HAL_UART_Receive_IT(&huart1, rxBufUart, 4);   			                       // Перезапуск приема заголовка
 800100c:	2204      	movs	r2, #4
 800100e:	4906      	ldr	r1, [pc, #24]	@ (8001028 <check_timeout+0x98>)
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <check_timeout+0x90>)
 8001012:	f005 f977 	bl	8006304 <HAL_UART_Receive_IT>
    }
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20006233 	.word	0x20006233
 8001020:	20000170 	.word	0x20000170
 8001024:	20006238 	.word	0x20006238
 8001028:	20006228 	.word	0x20006228
 800102c:	2000000c 	.word	0x2000000c

08001030 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <HAL_UART_RxCpltCallback+0x24>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d102      	bne.n	8001048 <HAL_UART_RxCpltCallback+0x18>
    	calbackOk = 1;                                                                 // скажем что колбек сработал
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_UART_RxCpltCallback+0x28>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
    }
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40013800 	.word	0x40013800
 8001058:	20006232 	.word	0x20006232

0800105c <doWork>:
extern uint32_t *ptrBufTime;
extern uint32_t *ptrbufGpio;
//----------------------- переменные из этого файла ----------------------------------//
uint32_t ledblinkTime = 0;
//------------------------------ функции ---------------------------------------------//
void doWork (void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	  init_uart();                                                                                        // запускаем прием
 8001060:	f7ff fec8 	bl	8000df4 <init_uart>
	  HAL_DMA_RegisterCallback(&handle_GPDMA2_Channel0, HAL_DMA_XFER_CPLT_CB_ID, MyDMACpltCallback);      // Регистрация колбека
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <doWork+0x28>)
 8001066:	2100      	movs	r1, #0
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <doWork+0x2c>)
 800106a:	f000 fecd 	bl	8001e08 <HAL_DMA_RegisterCallback>
	  HAL_GPIO_WritePin(voltage3_3_GPIO_Port, voltage3_3_Pin, GPIO_PIN_SET);                              // по умолчанию 3.3В
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <doWork+0x30>)
 8001076:	f001 fb2f 	bl	80026d8 <HAL_GPIO_WritePin>
	  outVoltage = VOLTAGE3_3;
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <doWork+0x34>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	08001109 	.word	0x08001109
 8001088:	20000034 	.word	0x20000034
 800108c:	42020000 	.word	0x42020000
 8001090:	20006235 	.word	0x20006235

08001094 <work>:

void work (void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	  blinkLed();                                          // моргаем светиком
 8001098:	f000 f81a 	bl	80010d0 <blinkLed>
	  check_timeout ();                                    // проверим таймауты
 800109c:	f7ff ff78 	bl	8000f90 <check_timeout>
	  checkButton ();                                      // проверим кнопку
 80010a0:	f000 f8c4 	bl	800122c <checkButton>
	  switch (parsingData()) {                             // проверим новые данные
 80010a4:	f7ff fec8 	bl	8000e38 <parsingData>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d002      	beq.n	80010b4 <work+0x20>
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d003      	beq.n	80010ba <work+0x26>
		 sendOk();                                         // ответим по юарту
		 HAL_Delay(500);                                   // костыль но пока так, подождать пока работает юарт, чтоб не выйти из сна от передачи данных
		 startprogramm();                                  // стартуем выполнять цикл
	  break;
	  }
}
 80010b2:	e00b      	b.n	80010cc <work+0x38>
		 sendOk();
 80010b4:	f7ff feac 	bl	8000e10 <sendOk>
	  break;
 80010b8:	e008      	b.n	80010cc <work+0x38>
		 sendOk();                                         // ответим по юарту
 80010ba:	f7ff fea9 	bl	8000e10 <sendOk>
		 HAL_Delay(500);                                   // костыль но пока так, подождать пока работает юарт, чтоб не выйти из сна от передачи данных
 80010be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c2:	f000 f9b1 	bl	8001428 <HAL_Delay>
		 startprogramm();                                  // стартуем выполнять цикл
 80010c6:	f000 f83d 	bl	8001144 <startprogramm>
	  break;
 80010ca:	bf00      	nop
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <blinkLed>:

void blinkLed (void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - ledblinkTime >= BLINK_TIME) {      // моргание без делея
 80010d4:	f000 f99c 	bl	8001410 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <blinkLed+0x30>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010e4:	d309      	bcc.n	80010fa <blinkLed+0x2a>
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80010e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <blinkLed+0x34>)
 80010ec:	f001 fb0c 	bl	8002708 <HAL_GPIO_TogglePin>
		ledblinkTime = HAL_GetTick();
 80010f0:	f000 f98e 	bl	8001410 <HAL_GetTick>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a02      	ldr	r2, [pc, #8]	@ (8001100 <blinkLed+0x30>)
 80010f8:	6013      	str	r3, [r2, #0]
	}
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20006240 	.word	0x20006240
 8001104:	42020800 	.word	0x42020800

08001108 <MyDMACpltCallback>:

void MyDMACpltCallback(DMA_HandleTypeDef *hdma) {          					 // Обработать завершение передачи DMA
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if (hdma->Instance == GPDMA2_Channel0) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <MyDMACpltCallback+0x30>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10a      	bne.n	8001130 <MyDMACpltCallback+0x28>
		HAL_ResumeTick();                                  					 // возобновим таймер
 800111a:	f000 f9b9 	bl	8001490 <HAL_ResumeTick>
		HAL_TIM_Base_Stop_DMA(&htim2);                     					 // остановим дма, без этого не хотело нормально работать
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <MyDMACpltCallback+0x34>)
 8001120:	f004 fc84 	bl	8005a2c <HAL_TIM_Base_Stop_DMA>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);         // погасим светик
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MyDMACpltCallback+0x38>)
 800112c:	f001 fad4 	bl	80026d8 <HAL_GPIO_WritePin>
	}
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021050 	.word	0x40021050
 800113c:	200000ac 	.word	0x200000ac
 8001140:	42020800 	.word	0x42020800

08001144 <startprogramm>:

void startprogramm (void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	uint32_t bsrrAddress = (uint32_t)&(GPIOB->BSRR);                                                          // адрес типа в памяти куда нужно передать данные по дма
 800114a:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <startprogramm+0xbc>)
 800114c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);                                                // включим светик на момент выполнения
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001154:	482b      	ldr	r0, [pc, #172]	@ (8001204 <startprogramm+0xc0>)
 8001156:	f001 fabf 	bl	80026d8 <HAL_GPIO_WritePin>
	if (outVoltage == VOLTAGE3_3) {
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <startprogramm+0xc4>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10c      	bne.n	800117c <startprogramm+0x38>
		HAL_GPIO_WritePin(voltage5_GPIO_Port, voltage5_Pin, GPIO_PIN_RESET);                                  // сбросим 5В
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001168:	4828      	ldr	r0, [pc, #160]	@ (800120c <startprogramm+0xc8>)
 800116a:	f001 fab5 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(voltage3_3_GPIO_Port, voltage3_3_Pin, GPIO_PIN_SET);                                // включим 3.3В
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001174:	4825      	ldr	r0, [pc, #148]	@ (800120c <startprogramm+0xc8>)
 8001176:	f001 faaf 	bl	80026d8 <HAL_GPIO_WritePin>
 800117a:	e00f      	b.n	800119c <startprogramm+0x58>
	} else if (outVoltage == VOLTAGE5) {
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <startprogramm+0xc4>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d10b      	bne.n	800119c <startprogramm+0x58>
		HAL_GPIO_WritePin(voltage3_3_GPIO_Port, voltage3_3_Pin, GPIO_PIN_RESET);                              // сбросим 3.3В
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800118a:	4820      	ldr	r0, [pc, #128]	@ (800120c <startprogramm+0xc8>)
 800118c:	f001 faa4 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(voltage5_GPIO_Port, voltage5_Pin, GPIO_PIN_SET);                                    // включим 5В
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001196:	481d      	ldr	r0, [pc, #116]	@ (800120c <startprogramm+0xc8>)
 8001198:	f001 fa9e 	bl	80026d8 <HAL_GPIO_WritePin>
	}
	TIM2->ARR = *ptrBufTime;                                                                                  // напрямую разыменовываем первый элемент буффера
 800119c:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <startprogramm+0xcc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	GPIOB->BSRR = *ptrbufGpio;                                                                                // и напрямую выставим состояния ног из буффера
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <startprogramm+0xd0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001218 <startprogramm+0xd4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6193      	str	r3, [r2, #24]
	HAL_TIM_Base_Start_DMA(&htim2, ptrBufTime + 1, ((lenght - 4) - 8));                                       // передавать количество байт а не слов! -8 по тому что 4 вначале не используем и на 4 меньше чем gpio
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <startprogramm+0xcc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	1d19      	adds	r1, r3, #4
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <startprogramm+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3b0c      	subs	r3, #12
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	4816      	ldr	r0, [pc, #88]	@ (8001220 <startprogramm+0xdc>)
 80011c6:	f004 fba9 	bl	800591c <HAL_TIM_Base_Start_DMA>
    CLEAR_BIT(GPDMA1_Channel0->CCR, DMA_CCR_HTIE);                                                            // Явное отключение Half-Transfer Interrupt (конченый HAL)
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <startprogramm+0xe0>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a15      	ldr	r2, [pc, #84]	@ (8001224 <startprogramm+0xe0>)
 80011d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80011d4:	6153      	str	r3, [r2, #20]
	HAL_DMA_Start_IT(&handle_GPDMA2_Channel0, (uint32_t)(ptrbufGpio + 1), bsrrAddress, ((lenght - 4) - 4));   // запуск дма на передачу по триггеру от таймера должно быть на 1 больше чем время но так как в 4 в начале то 4 отнимаем
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <startprogramm+0xd0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3304      	adds	r3, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <startprogramm+0xd8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3b08      	subs	r3, #8
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4810      	ldr	r0, [pc, #64]	@ (8001228 <startprogramm+0xe4>)
 80011e8:	f000 fba8 	bl	800193c <HAL_DMA_Start_IT>
	HAL_SuspendTick();                                                                                        // остановим систик
 80011ec:	f000 f940 	bl	8001470 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);                                         // упадем в сон чтоб не мешать дма
 80011f0:	2101      	movs	r1, #1
 80011f2:	2000      	movs	r0, #0
 80011f4:	f001 fad2 	bl	800279c <HAL_PWR_EnterSLEEPMode>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	42020418 	.word	0x42020418
 8001204:	42020800 	.word	0x42020800
 8001208:	20006235 	.word	0x20006235
 800120c:	42020000 	.word	0x42020000
 8001210:	20000004 	.word	0x20000004
 8001214:	20000008 	.word	0x20000008
 8001218:	42020400 	.word	0x42020400
 800121c:	2000623c 	.word	0x2000623c
 8001220:	200000ac 	.word	0x200000ac
 8001224:	40020050 	.word	0x40020050
 8001228:	20000034 	.word	0x20000034

0800122c <checkButton>:

void checkButton (void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	if ((!HAL_GPIO_ReadPin(keyStart_GPIO_Port, keyStart_Pin)) &&  dataNotEmpty) {                             // если нажали кнопку и данные уже загружены
 8001230:	2108      	movs	r1, #8
 8001232:	4807      	ldr	r0, [pc, #28]	@ (8001250 <checkButton+0x24>)
 8001234:	f001 fa38 	bl	80026a8 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <checkButton+0x1e>
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <checkButton+0x28>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <checkButton+0x1e>
		 startprogramm();                                                                                     // стартуем выполнять цикл
 8001246:	f7ff ff7d 	bl	8001144 <startprogramm>
	}
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	42020000 	.word	0x42020000
 8001254:	20006234 	.word	0x20006234

08001258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001290 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800125c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800125e:	e003      	b.n	8001268 <LoopCopyDataInit>

08001260 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001262:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001264:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001266:	3104      	adds	r1, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001268:	480b      	ldr	r0, [pc, #44]	@ (8001298 <LoopForever+0xa>)
	ldr	r3, =_edata
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <LoopForever+0xe>)
	adds	r2, r0, r1
 800126c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800126e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001270:	d3f6      	bcc.n	8001260 <CopyDataInit>
	ldr	r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001274:	e002      	b.n	800127c <LoopFillZerobss>

08001276 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001276:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001278:	f842 3b04 	str.w	r3, [r2], #4

0800127c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <LoopForever+0x16>)
	cmp	r2, r3
 800127e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001280:	d3f9      	bcc.n	8001276 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001282:	f7ff fd45 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f007 f971 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128a:	f7ff f991 	bl	80005b0 <main>

0800128e <LoopForever>:

LoopForever:
    b LoopForever
 800128e:	e7fe      	b.n	800128e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001290:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001294:	0800861c 	.word	0x0800861c
	ldr	r0, =_sdata
 8001298:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800129c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 80012a0:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 80012a4:	20006248 	.word	0x20006248

080012a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_IRQHandler>
	...

080012ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f9aa 	bl	800160a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80012b6:	f002 f87d 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_Init+0x44>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	490b      	ldr	r1, [pc, #44]	@ (80012f4 <HAL_Init+0x48>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <HAL_Init+0x4c>)
 80012ce:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80012d0:	2004      	movs	r0, #4
 80012d2:	f000 f9ef 	bl	80016b4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d6:	200f      	movs	r0, #15
 80012d8:	f000 f810 	bl	80012fc <HAL_InitTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e002      	b.n	80012ec <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012e6:	f7ff fbe5 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	44020c00 	.word	0x44020c00
 80012f4:	080085cc 	.word	0x080085cc
 80012f8:	20000000 	.word	0x20000000

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001308:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_InitTick+0xdc>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e05c      	b.n	80013ce <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001314:	4b31      	ldr	r3, [pc, #196]	@ (80013dc <HAL_InitTick+0xe0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b04      	cmp	r3, #4
 800131e:	d10c      	bne.n	800133a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001320:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <HAL_InitTick+0xe4>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <HAL_InitTick+0xdc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e037      	b.n	80013aa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800133a:	f000 fa13 	bl	8001764 <HAL_SYSTICK_GetCLKSourceConfig>
 800133e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d023      	beq.n	800138e <HAL_InitTick+0x92>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d82d      	bhi.n	80013a8 <HAL_InitTick+0xac>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_InitTick+0x5e>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d00d      	beq.n	8001374 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001358:	e026      	b.n	80013a8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <HAL_InitTick+0xe4>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <HAL_InitTick+0xdc>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001368:	fbb3 f3f1 	udiv	r3, r3, r1
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	60fb      	str	r3, [r7, #12]
        break;
 8001372:	e01a      	b.n	80013aa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <HAL_InitTick+0xdc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001382:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	60fb      	str	r3, [r7, #12]
        break;
 800138c:	e00d      	b.n	80013aa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_InitTick+0xdc>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001398:	fbb3 f3f2 	udiv	r3, r3, r2
 800139c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	60fb      	str	r3, [r7, #12]
        break;
 80013a6:	e000      	b.n	80013aa <HAL_InitTick+0xae>
        break;
 80013a8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f960 	bl	8001670 <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e009      	b.n	80013ce <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ba:	2200      	movs	r2, #0
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	f04f 30ff 	mov.w	r0, #4294967295
 80013c2:	f000 f92d 	bl	8001620 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <HAL_InitTick+0xe8>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000014 	.word	0x20000014
 80013dc:	e000e010 	.word	0xe000e010
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000010 	.word	0x20000010

080013e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	@ (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000014 	.word	0x20000014
 800140c:	20006244 	.word	0x20006244

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20006244 	.word	0x20006244

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000014 	.word	0x20000014

08001470 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_SuspendTick+0x1c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <HAL_SuspendTick+0x1c>)
 800147a:	f023 0302 	bic.w	r3, r3, #2
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_ResumeTick+0x1c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <HAL_ResumeTick+0x1c>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	@ (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	@ (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	@ 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff4c 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800162e:	f7ff ff63 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001632:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	6978      	ldr	r0, [r7, #20]
 800163a:	f7ff ffb3 	bl	80015a4 <NVIC_EncodePriority>
 800163e:	4602      	mov	r2, r0
 8001640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff82 	bl	8001550 <__NVIC_SetPriority>
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff56 	bl	8001514 <__NVIC_EnableIRQ>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001680:	d301      	bcc.n	8001686 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001682:	2301      	movs	r3, #1
 8001684:	e00d      	b.n	80016a2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <HAL_SYSTICK_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <HAL_SYSTICK_Config+0x40>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_SYSTICK_Config+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <HAL_SYSTICK_Config+0x40>)
 800169a:	f043 0303 	orr.w	r3, r3, #3
 800169e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d844      	bhi.n	800174c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80016c2:	a201      	add	r2, pc, #4	@ (adr r2, 80016c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016eb 	.word	0x080016eb
 80016cc:	08001709 	.word	0x08001709
 80016d0:	0800172b 	.word	0x0800172b
 80016d4:	0800174d 	.word	0x0800174d
 80016d8:	080016dd 	.word	0x080016dd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6013      	str	r3, [r2, #0]
      break;
 80016e8:	e031      	b.n	800174e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016fc:	4a18      	ldr	r2, [pc, #96]	@ (8001760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016fe:	f023 030c 	bic.w	r3, r3, #12
 8001702:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001706:	e022      	b.n	800174e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001716:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800171a:	f023 030c 	bic.w	r3, r3, #12
 800171e:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001728:	e011      	b.n	800174e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001738:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800173c:	f023 030c 	bic.w	r3, r3, #12
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800174a:	e000      	b.n	800174e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800174c:	bf00      	nop
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010
 8001760:	44020c00 	.word	0x44020c00

08001764 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001776:	2304      	movs	r3, #4
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	e01e      	b.n	80017ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800177e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d00f      	beq.n	80017ae <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b08      	cmp	r3, #8
 8001792:	d80f      	bhi.n	80017b4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d003      	beq.n	80017a8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80017a0:	e008      	b.n	80017b4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
        break;
 80017a6:	e008      	b.n	80017ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80017a8:	2301      	movs	r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
        break;
 80017ac:	e005      	b.n	80017ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80017ae:	2302      	movs	r3, #2
 80017b0:	607b      	str	r3, [r7, #4]
        break;
 80017b2:	e002      	b.n	80017ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
        break;
 80017b8:	bf00      	nop
    }
  }
  return systick_source;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e010 	.word	0xe000e010
 80017cc:	44020c00 	.word	0x44020c00

080017d0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff fe1a 	bl	8001410 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e085      	b.n	80018f4 <HAL_DMA_Init+0x124>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a43      	ldr	r2, [pc, #268]	@ (80018fc <HAL_DMA_Init+0x12c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d049      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a42      	ldr	r2, [pc, #264]	@ (8001900 <HAL_DMA_Init+0x130>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d044      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a40      	ldr	r2, [pc, #256]	@ (8001904 <HAL_DMA_Init+0x134>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d03f      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a3f      	ldr	r2, [pc, #252]	@ (8001908 <HAL_DMA_Init+0x138>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d03a      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3d      	ldr	r2, [pc, #244]	@ (800190c <HAL_DMA_Init+0x13c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d035      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a3c      	ldr	r2, [pc, #240]	@ (8001910 <HAL_DMA_Init+0x140>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d030      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3a      	ldr	r2, [pc, #232]	@ (8001914 <HAL_DMA_Init+0x144>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a39      	ldr	r2, [pc, #228]	@ (8001918 <HAL_DMA_Init+0x148>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d026      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a37      	ldr	r2, [pc, #220]	@ (800191c <HAL_DMA_Init+0x14c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d021      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a36      	ldr	r2, [pc, #216]	@ (8001920 <HAL_DMA_Init+0x150>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d01c      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a34      	ldr	r2, [pc, #208]	@ (8001924 <HAL_DMA_Init+0x154>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d017      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a33      	ldr	r2, [pc, #204]	@ (8001928 <HAL_DMA_Init+0x158>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d012      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a31      	ldr	r2, [pc, #196]	@ (800192c <HAL_DMA_Init+0x15c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a30      	ldr	r2, [pc, #192]	@ (8001930 <HAL_DMA_Init+0x160>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d008      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2e      	ldr	r2, [pc, #184]	@ (8001934 <HAL_DMA_Init+0x164>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d003      	beq.n	8001886 <HAL_DMA_Init+0xb6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2d      	ldr	r2, [pc, #180]	@ (8001938 <HAL_DMA_Init+0x168>)
 8001884:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2202      	movs	r2, #2
 8001892:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0206 	orr.w	r2, r2, #6
 80018a4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80018a6:	e00f      	b.n	80018c8 <HAL_DMA_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80018a8:	f7ff fdb2 	bl	8001410 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d908      	bls.n	80018c8 <HAL_DMA_Init+0xf8>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2210      	movs	r2, #16
 80018ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2203      	movs	r2, #3
 80018c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e015      	b.n	80018f4 <HAL_DMA_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e8      	bne.n	80018a8 <HAL_DMA_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fb3c 	bl	8001f54 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40020050 	.word	0x40020050
 8001900:	400200d0 	.word	0x400200d0
 8001904:	40020150 	.word	0x40020150
 8001908:	400201d0 	.word	0x400201d0
 800190c:	40020250 	.word	0x40020250
 8001910:	400202d0 	.word	0x400202d0
 8001914:	40020350 	.word	0x40020350
 8001918:	400203d0 	.word	0x400203d0
 800191c:	40021050 	.word	0x40021050
 8001920:	400210d0 	.word	0x400210d0
 8001924:	40021150 	.word	0x40021150
 8001928:	400211d0 	.word	0x400211d0
 800192c:	40021250 	.word	0x40021250
 8001930:	400212d0 	.word	0x400212d0
 8001934:	40021350 	.word	0x40021350
 8001938:	400213d0 	.word	0x400213d0

0800193c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e04f      	b.n	80019f4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Start_IT+0x26>
 800195e:	2302      	movs	r3, #2
 8001960:	e048      	b.n	80019f4 <HAL_DMA_Start_IT+0xb8>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d136      	bne.n	80019e4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fabc 	bl	8001f08 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800199e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019ce:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e007      	b.n	80019f4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2240      	movs	r2, #64	@ 0x40
 80019e8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001a04:	f7ff fd04 	bl	8001410 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e06b      	b.n	8001aec <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e05c      	b.n	8001aec <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0204 	orr.w	r2, r2, #4
 8001a40:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2205      	movs	r2, #5
 8001a46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001a4a:	e020      	b.n	8001a8e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001a4c:	f7ff fce0 	bl	8001410 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d919      	bls.n	8001a8e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5e:	f043 0210 	orr.w	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7e:	2201      	movs	r2, #1
 8001a80:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e02e      	b.n	8001aec <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0d7      	beq.n	8001a4c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0202 	orr.w	r2, r2, #2
 8001aaa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001abc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e019      	b.n	8001b3a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d004      	beq.n	8001b1c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2220      	movs	r2, #32
 8001b16:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00e      	b.n	8001b3a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001b56:	f023 030f 	bic.w	r3, r3, #15
 8001b5a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	3b50      	subs	r3, #80	@ 0x50
 8001b66:	09db      	lsrs	r3, r3, #7
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 813b 	beq.w	8001dfc <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d011      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001baa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d011      	beq.n	8001bea <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bdc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	f043 0202 	orr.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d011      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c0e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	f043 0204 	orr.w	r2, r3, #4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d011      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c40:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f043 0208 	orr.w	r2, r3, #8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c72:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d04c      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d045      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d12e      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cc4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0202 	orr.w	r2, r2, #2
 8001cd4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cee:	2201      	movs	r2, #1
 8001cf0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d07a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
        }

        return;
 8001d12:	e075      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2205      	movs	r2, #5
 8001d18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d039      	beq.n	8001dae <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d032      	beq.n	8001dae <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d74:	2201      	movs	r2, #1
 8001d76:	731a      	strb	r2, [r3, #12]
 8001d78:	e008      	b.n	8001d8c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d94:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d025      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0202 	orr.w	r2, r2, #2
 8001dc4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dde:	2201      	movs	r2, #1
 8001de0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
 8001dfa:	e002      	b.n	8001e02 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001dfc:	bf00      	nop
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001e00:	bf00      	nop
    }
  }
}
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *const hdma,
                                           HAL_DMA_CallbackIDTypeDef CallbackID,
                                           void (*const pCallback)(DMA_HandleTypeDef *const _hdma))
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	460b      	mov	r3, r1
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e02f      	b.n	8001e84 <HAL_DMA_RegisterCallback+0x7c>
  }

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d126      	bne.n	8001e7e <HAL_DMA_RegisterCallback+0x76>
  {
    /* Check callback ID */
    switch (CallbackID)
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d820      	bhi.n	8001e78 <HAL_DMA_RegisterCallback+0x70>
 8001e36:	a201      	add	r2, pc, #4	@ (adr r2, 8001e3c <HAL_DMA_RegisterCallback+0x34>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e61 	.word	0x08001e61
 8001e48:	08001e69 	.word	0x08001e69
 8001e4c:	08001e71 	.word	0x08001e71
    {
      case HAL_DMA_XFER_CPLT_CB_ID:
      {
        /* Register transfer complete callback */
        hdma->XferCpltCallback = pCallback;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8001e56:	e014      	b.n	8001e82 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_HALFCPLT_CB_ID:
      {
        /* Register half transfer callback */
        hdma->XferHalfCpltCallback = pCallback;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8001e5e:	e010      	b.n	8001e82 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ERROR_CB_ID:
      {
        /* Register transfer error callback */
        hdma->XferErrorCallback = pCallback;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8001e66:	e00c      	b.n	8001e82 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ABORT_CB_ID:
      {
        /* Register abort callback */
        hdma->XferAbortCallback = pCallback;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8001e6e:	e008      	b.n	8001e82 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_SUSPEND_CB_ID:
      {
        /* Register suspend callback */
        hdma->XferSuspendCallback = pCallback;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8001e76:	e004      	b.n	8001e82 <HAL_DMA_RegisterCallback+0x7a>
      }

      default:
      {
        /* Update error status */
        status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	75fb      	strb	r3, [r7, #23]
        break;
 8001e7c:	e001      	b.n	8001e82 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    /* Update error status */
    status =  HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e02b      	b.n	8001efc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001eac:	f023 030f 	bic.w	r3, r3, #15
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eba:	3b50      	subs	r3, #80	@ 0x50
 8001ebc:	09db      	lsrs	r3, r3, #7
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d012      	beq.n	8001efa <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f003 0311 	and.w	r3, r3, #17
 8001eda:	2b11      	cmp	r3, #17
 8001edc:	d106      	bne.n	8001eec <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e006      	b.n	8001efa <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b291      	uxth	r1, r2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001f34:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a82      	ldr	r2, [pc, #520]	@ (800219c <DMA_Init+0x248>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d04a      	beq.n	800202e <DMA_Init+0xda>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a80      	ldr	r2, [pc, #512]	@ (80021a0 <DMA_Init+0x24c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d045      	beq.n	800202e <DMA_Init+0xda>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a7f      	ldr	r2, [pc, #508]	@ (80021a4 <DMA_Init+0x250>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d040      	beq.n	800202e <DMA_Init+0xda>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a7d      	ldr	r2, [pc, #500]	@ (80021a8 <DMA_Init+0x254>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d03b      	beq.n	800202e <DMA_Init+0xda>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7c      	ldr	r2, [pc, #496]	@ (80021ac <DMA_Init+0x258>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d036      	beq.n	800202e <DMA_Init+0xda>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a7a      	ldr	r2, [pc, #488]	@ (80021b0 <DMA_Init+0x25c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d031      	beq.n	800202e <DMA_Init+0xda>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a79      	ldr	r2, [pc, #484]	@ (80021b4 <DMA_Init+0x260>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d02c      	beq.n	800202e <DMA_Init+0xda>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a77      	ldr	r2, [pc, #476]	@ (80021b8 <DMA_Init+0x264>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d027      	beq.n	800202e <DMA_Init+0xda>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a76      	ldr	r2, [pc, #472]	@ (80021bc <DMA_Init+0x268>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <DMA_Init+0xda>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a74      	ldr	r2, [pc, #464]	@ (80021c0 <DMA_Init+0x26c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01d      	beq.n	800202e <DMA_Init+0xda>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a73      	ldr	r2, [pc, #460]	@ (80021c4 <DMA_Init+0x270>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d018      	beq.n	800202e <DMA_Init+0xda>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a71      	ldr	r2, [pc, #452]	@ (80021c8 <DMA_Init+0x274>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <DMA_Init+0xda>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a70      	ldr	r2, [pc, #448]	@ (80021cc <DMA_Init+0x278>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00e      	beq.n	800202e <DMA_Init+0xda>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6e      	ldr	r2, [pc, #440]	@ (80021d0 <DMA_Init+0x27c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <DMA_Init+0xda>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6d      	ldr	r2, [pc, #436]	@ (80021d4 <DMA_Init+0x280>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <DMA_Init+0xda>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6b      	ldr	r2, [pc, #428]	@ (80021d8 <DMA_Init+0x284>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <DMA_Init+0xde>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <DMA_Init+0xe0>
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <DMA_Init+0x10a>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	051b      	lsls	r3, r3, #20
 8002044:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002048:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	3b01      	subs	r3, #1
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002056:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002082:	d159      	bne.n	8002138 <DMA_Init+0x1e4>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a44      	ldr	r2, [pc, #272]	@ (800219c <DMA_Init+0x248>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d04a      	beq.n	8002124 <DMA_Init+0x1d0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a43      	ldr	r2, [pc, #268]	@ (80021a0 <DMA_Init+0x24c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d045      	beq.n	8002124 <DMA_Init+0x1d0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a41      	ldr	r2, [pc, #260]	@ (80021a4 <DMA_Init+0x250>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d040      	beq.n	8002124 <DMA_Init+0x1d0>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a40      	ldr	r2, [pc, #256]	@ (80021a8 <DMA_Init+0x254>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d03b      	beq.n	8002124 <DMA_Init+0x1d0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3e      	ldr	r2, [pc, #248]	@ (80021ac <DMA_Init+0x258>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d036      	beq.n	8002124 <DMA_Init+0x1d0>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3d      	ldr	r2, [pc, #244]	@ (80021b0 <DMA_Init+0x25c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d031      	beq.n	8002124 <DMA_Init+0x1d0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3b      	ldr	r2, [pc, #236]	@ (80021b4 <DMA_Init+0x260>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02c      	beq.n	8002124 <DMA_Init+0x1d0>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a3a      	ldr	r2, [pc, #232]	@ (80021b8 <DMA_Init+0x264>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d027      	beq.n	8002124 <DMA_Init+0x1d0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a38      	ldr	r2, [pc, #224]	@ (80021bc <DMA_Init+0x268>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d022      	beq.n	8002124 <DMA_Init+0x1d0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a37      	ldr	r2, [pc, #220]	@ (80021c0 <DMA_Init+0x26c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d01d      	beq.n	8002124 <DMA_Init+0x1d0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a35      	ldr	r2, [pc, #212]	@ (80021c4 <DMA_Init+0x270>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d018      	beq.n	8002124 <DMA_Init+0x1d0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a34      	ldr	r2, [pc, #208]	@ (80021c8 <DMA_Init+0x274>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <DMA_Init+0x1d0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <DMA_Init+0x278>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00e      	beq.n	8002124 <DMA_Init+0x1d0>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a31      	ldr	r2, [pc, #196]	@ (80021d0 <DMA_Init+0x27c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d009      	beq.n	8002124 <DMA_Init+0x1d0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2f      	ldr	r2, [pc, #188]	@ (80021d4 <DMA_Init+0x280>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <DMA_Init+0x1d0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2e      	ldr	r2, [pc, #184]	@ (80021d8 <DMA_Init+0x284>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <DMA_Init+0x1d4>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <DMA_Init+0x1d6>
 8002128:	2300      	movs	r3, #0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <DMA_Init+0x1f6>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e008      	b.n	800214a <DMA_Init+0x1f6>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002140:	d103      	bne.n	800214a <DMA_Init+0x1f6>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002148:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <DMA_Init+0x288>)
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	430b      	orrs	r3, r1
 8002166:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <DMA_Init+0x260>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00e      	beq.n	8002198 <DMA_Init+0x244>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a0e      	ldr	r2, [pc, #56]	@ (80021b8 <DMA_Init+0x264>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d009      	beq.n	8002198 <DMA_Init+0x244>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <DMA_Init+0x280>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d004      	beq.n	8002198 <DMA_Init+0x244>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <DMA_Init+0x284>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d123      	bne.n	80021e0 <DMA_Init+0x28c>
 8002198:	2301      	movs	r3, #1
 800219a:	e022      	b.n	80021e2 <DMA_Init+0x28e>
 800219c:	40020050 	.word	0x40020050
 80021a0:	400200d0 	.word	0x400200d0
 80021a4:	40020150 	.word	0x40020150
 80021a8:	400201d0 	.word	0x400201d0
 80021ac:	40020250 	.word	0x40020250
 80021b0:	400202d0 	.word	0x400202d0
 80021b4:	40020350 	.word	0x40020350
 80021b8:	400203d0 	.word	0x400203d0
 80021bc:	40021050 	.word	0x40021050
 80021c0:	400210d0 	.word	0x400210d0
 80021c4:	40021150 	.word	0x40021150
 80021c8:	400211d0 	.word	0x400211d0
 80021cc:	40021250 	.word	0x40021250
 80021d0:	400212d0 	.word	0x400212d0
 80021d4:	40021350 	.word	0x40021350
 80021d8:	400213d0 	.word	0x400213d0
 80021dc:	3cc02100 	.word	0x3cc02100
 80021e0:	2300      	movs	r3, #0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <DMA_Init+0x2a2>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2200      	movs	r2, #0
 80021f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2200      	movs	r2, #0
 80021fc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop

0800220c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_DMAEx_List_Start_IT+0x16>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e082      	b.n	800232c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800222c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002238:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d005      	beq.n	800224c <HAL_DMAEx_List_Start_IT+0x40>
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d16a      	bne.n	800231c <HAL_DMAEx_List_Start_IT+0x110>
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d067      	beq.n	800231c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d157      	bne.n	8002308 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_DMAEx_List_Start_IT+0x5a>
 8002262:	2302      	movs	r3, #2
 8002264:	e062      	b.n	800232c <HAL_DMAEx_List_Start_IT+0x120>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227a:	2202      	movs	r2, #2
 800227c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800229a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022ca:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f107 010c 	add.w	r1, r7, #12
 80022d6:	2200      	movs	r2, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f863 	bl	80023a4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	0c0b      	lsrs	r3, r1, #16
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80022fc:	4013      	ands	r3, r2
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e007      	b.n	800232c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2240      	movs	r2, #64	@ 0x40
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_DMAEx_ConfigTrigger+0x16>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e023      	b.n	8002396 <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d115      	bne.n	8002386 <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002360:	f023 734f 	bic.w	r3, r3, #54263808	@ 0x33c0000
 8002364:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	6851      	ldr	r1, [r2, #4]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4311      	orrs	r1, r2
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	0412      	lsls	r2, r2, #16
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	430b      	orrs	r3, r1
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e007      	b.n	8002396 <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2240      	movs	r2, #64	@ 0x40
 800238a:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00c      	beq.n	80023d6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <DMA_List_GetCLLRNodeInfo+0x58>)
 80023c6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00f      	beq.n	80023ee <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80023d4:	e00b      	b.n	80023ee <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4a08      	ldr	r2, [pc, #32]	@ (8002400 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80023e0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2205      	movs	r2, #5
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	fe010000 	.word	0xfe010000
 8002400:	f8010000 	.word	0xf8010000

08002404 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002412:	e136      	b.n	8002682 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8128 	beq.w	800267c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x38>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b12      	cmp	r3, #18
 800243a:	d125      	bne.n	8002488 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 020f 	and.w	r2, r3, #15
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	6979      	ldr	r1, [r7, #20]
 8002484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4013      	ands	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d00b      	beq.n	80024dc <HAL_GPIO_Init+0xd8>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d0:	2b11      	cmp	r3, #17
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b12      	cmp	r3, #18
 80024da:	d130      	bne.n	800253e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002512:	2201      	movs	r2, #1
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4013      	ands	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0201 	and.w	r2, r3, #1
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d017      	beq.n	8002576 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4013      	ands	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d07c      	beq.n	800267c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002582:	4a47      	ldr	r2, [pc, #284]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3318      	adds	r3, #24
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4013      	ands	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0a9a      	lsrs	r2, r3, #10
 80025aa:	4b3e      	ldr	r3, [pc, #248]	@ (80026a4 <HAL_GPIO_Init+0x2a0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	f002 0203 	and.w	r2, r2, #3
 80025b4:	00d2      	lsls	r2, r2, #3
 80025b6:	4093      	lsls	r3, r2
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80025be:	4938      	ldr	r1, [pc, #224]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3318      	adds	r3, #24
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80025cc:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4013      	ands	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80025f0:	4a2b      	ldr	r2, [pc, #172]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80025f6:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	43db      	mvns	r3, r3
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4013      	ands	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800261a:	4a21      	ldr	r2, [pc, #132]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002620:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 8002622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002626:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43db      	mvns	r3, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4013      	ands	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002646:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 8002650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002654:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002674:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <HAL_GPIO_Init+0x29c>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	3301      	adds	r3, #1
 8002680:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	f47f aec1 	bne.w	8002414 <HAL_GPIO_Init+0x10>
  }
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	44022000 	.word	0x44022000
 80026a4:	002f7f7f 	.word	0x002f7f7f

080026a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e001      	b.n	80026ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
 80026e4:	4613      	mov	r3, r2
 80026e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e8:	787b      	ldrb	r3, [r7, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43d9      	mvns	r1, r3
 8002726:	887b      	ldrh	r3, [r7, #2]
 8002728:	400b      	ands	r3, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e007      	b.n	800276a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0204 	bic.w	r2, r3, #4
 8002762:	4905      	ldr	r1, [pc, #20]	@ (8002778 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
  }

  return status;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40030400 	.word	0x40030400

0800277c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_ICACHE_Enable+0x1c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <HAL_ICACHE_Enable+0x1c>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40030400 	.word	0x40030400

0800279c <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, ticks interrupt must be disabled to avoid
  *         unexpected CPU wake up.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]

  /* Check the parameter */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Wait For Interrupt Request */
    __WFI();
 80027ba:	bf30      	wfi
    /* Wait For Event Request */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80027bc:	e002      	b.n	80027c4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80027be:	bf40      	sev
    __WFE();
 80027c0:	bf20      	wfe
    __WFE();
 80027c2:	bf20      	wfe
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f000 bc28 	b.w	8003038 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e8:	4b94      	ldr	r3, [pc, #592]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f003 0318 	and.w	r3, r3, #24
 80027f0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80027f2:	4b92      	ldr	r3, [pc, #584]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x46>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b18      	cmp	r3, #24
 8002812:	d114      	bne.n	800283e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d111      	bne.n	800283e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f000 bc08 	b.w	8003038 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002828:	4b84      	ldr	r3, [pc, #528]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	4981      	ldr	r1, [pc, #516]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002838:	4313      	orrs	r3, r2
 800283a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800283c:	e040      	b.n	80028c0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d023      	beq.n	800288e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002846:	4b7d      	ldr	r3, [pc, #500]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe fddd 	bl	8001410 <HAL_GetTick>
 8002856:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800285a:	f7fe fdd9 	bl	8001410 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e3e5      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800286c:	4b73      	ldr	r3, [pc, #460]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002878:	4b70      	ldr	r3, [pc, #448]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	041b      	lsls	r3, r3, #16
 8002886:	496d      	ldr	r1, [pc, #436]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002888:	4313      	orrs	r3, r2
 800288a:	618b      	str	r3, [r1, #24]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800288e:	4b6b      	ldr	r3, [pc, #428]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6a      	ldr	r2, [pc, #424]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fdb9 	bl	8001410 <HAL_GetTick>
 800289e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80028a2:	f7fe fdb5 	bl	8001410 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e3c1      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80028b4:	4b61      	ldr	r3, [pc, #388]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a0 	beq.w	8002a0e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_OscConfig+0x10c>
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b18      	cmp	r3, #24
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 8092 	bne.w	8002a0e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e3a4      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x132>
 80028f8:	4b50      	ldr	r3, [pc, #320]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a4f      	ldr	r2, [pc, #316]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e058      	b.n	80029b8 <HAL_RCC_OscConfig+0x1e4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d112      	bne.n	8002934 <HAL_RCC_OscConfig+0x160>
 800290e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a4a      	ldr	r2, [pc, #296]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b48      	ldr	r3, [pc, #288]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a47      	ldr	r2, [pc, #284]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002920:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b45      	ldr	r3, [pc, #276]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a44      	ldr	r2, [pc, #272]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800292c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e041      	b.n	80029b8 <HAL_RCC_OscConfig+0x1e4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x190>
 800293e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a3e      	ldr	r2, [pc, #248]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002950:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a38      	ldr	r2, [pc, #224]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e029      	b.n	80029b8 <HAL_RCC_OscConfig+0x1e4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800296c:	d112      	bne.n	8002994 <HAL_RCC_OscConfig+0x1c0>
 800296e:	4b33      	ldr	r3, [pc, #204]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a32      	ldr	r2, [pc, #200]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e011      	b.n	80029b8 <HAL_RCC_OscConfig+0x1e4>
 8002994:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a28      	ldr	r2, [pc, #160]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a25      	ldr	r2, [pc, #148]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80029b2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fd26 	bl	8001410 <HAL_GetTick>
 80029c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fd22 	bl	8001410 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e32e      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x1f4>
 80029e6:	e012      	b.n	8002a0e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fd12 	bl	8001410 <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fd0e 	bl	8001410 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e31a      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <HAL_RCC_OscConfig+0x268>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 809a 	beq.w	8002b50 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x25a>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	2b18      	cmp	r3, #24
 8002a26:	d149      	bne.n	8002abc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d146      	bne.n	8002abc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d104      	bne.n	8002a40 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e2fe      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
 8002a3a:	bf00      	nop
 8002a3c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002a46:	4b9a      	ldr	r3, [pc, #616]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0218 	and.w	r2, r3, #24
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d014      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002a56:	4b96      	ldr	r3, [pc, #600]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 0218 	bic.w	r2, r3, #24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	4993      	ldr	r1, [pc, #588]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002a68:	f000 fdd0 	bl	800360c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a6c:	4b91      	ldr	r3, [pc, #580]	@ (8002cb4 <HAL_RCC_OscConfig+0x4e0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fc43 	bl	80012fc <HAL_InitTick>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e2db      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fcc6 	bl	8001410 <HAL_GetTick>
 8002a84:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fcc2 	bl	8001410 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e2ce      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9a:	4b85      	ldr	r3, [pc, #532]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002aa6:	4b82      	ldr	r3, [pc, #520]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	497e      	ldr	r1, [pc, #504]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002aba:	e049      	b.n	8002b50 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d02c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002ac4:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 0218 	bic.w	r2, r3, #24
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4977      	ldr	r1, [pc, #476]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002ad6:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a75      	ldr	r2, [pc, #468]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fc95 	bl	8001410 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002aea:	f7fe fc91 	bl	8001410 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e29d      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afc:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002b08:	4b69      	ldr	r3, [pc, #420]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	4966      	ldr	r1, [pc, #408]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	610b      	str	r3, [r1, #16]
 8002b1c:	e018      	b.n	8002b50 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b64      	ldr	r3, [pc, #400]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a63      	ldr	r2, [pc, #396]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fc71 	bl	8001410 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b32:	f7fe fc6d 	bl	8001410 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e279      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b44:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d03c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01c      	beq.n	8002b9e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b64:	4b52      	ldr	r3, [pc, #328]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b6a:	4a51      	ldr	r2, [pc, #324]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fc4c 	bl	8001410 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fc48 	bl	8001410 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e254      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b8e:	4b48      	ldr	r3, [pc, #288]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ef      	beq.n	8002b7c <HAL_RCC_OscConfig+0x3a8>
 8002b9c:	e01b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9e:	4b44      	ldr	r3, [pc, #272]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba4:	4a42      	ldr	r2, [pc, #264]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002baa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe fc2f 	bl	8001410 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fc2b 	bl	8001410 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e237      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002bc8:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1ef      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80d2 	beq.w	8002d88 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002be4:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_RCC_OscConfig+0x4e4>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d118      	bne.n	8002c22 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002bf0:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <HAL_RCC_OscConfig+0x4e4>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	4a30      	ldr	r2, [pc, #192]	@ (8002cb8 <HAL_RCC_OscConfig+0x4e4>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfc:	f7fe fc08 	bl	8001410 <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7fe fc04 	bl	8001410 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e210      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002c16:	4b28      	ldr	r3, [pc, #160]	@ (8002cb8 <HAL_RCC_OscConfig+0x4e4>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_RCC_OscConfig+0x468>
 8002c2a:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c3a:	e074      	b.n	8002d26 <HAL_RCC_OscConfig+0x552>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d118      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4a2>
 8002c44:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c4a:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c54:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c5a:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c6a:	4a11      	ldr	r2, [pc, #68]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c74:	e057      	b.n	8002d26 <HAL_RCC_OscConfig+0x552>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d11e      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4e8>
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c84:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c94:	4a06      	ldr	r2, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c9e:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ca4:	4a02      	ldr	r2, [pc, #8]	@ (8002cb0 <HAL_RCC_OscConfig+0x4dc>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002cae:	e03a      	b.n	8002d26 <HAL_RCC_OscConfig+0x552>
 8002cb0:	44020c00 	.word	0x44020c00
 8002cb4:	20000010 	.word	0x20000010
 8002cb8:	44020800 	.word	0x44020800
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b85      	cmp	r3, #133	@ 0x85
 8002cc2:	d118      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x522>
 8002cc4:	4ba2      	ldr	r3, [pc, #648]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cca:	4aa1      	ldr	r2, [pc, #644]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002cd4:	4b9e      	ldr	r3, [pc, #632]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cda:	4a9d      	ldr	r2, [pc, #628]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cea:	4a99      	ldr	r2, [pc, #612]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002cf4:	e017      	b.n	8002d26 <HAL_RCC_OscConfig+0x552>
 8002cf6:	4b96      	ldr	r3, [pc, #600]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cfc:	4a94      	ldr	r2, [pc, #592]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d06:	4b92      	ldr	r3, [pc, #584]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d0c:	4a90      	ldr	r2, [pc, #576]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d16:	4b8e      	ldr	r3, [pc, #568]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d1c:	4a8c      	ldr	r2, [pc, #560]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fb6f 	bl	8001410 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fb6b 	bl	8001410 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e175      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4c:	4b80      	ldr	r3, [pc, #512]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ed      	beq.n	8002d36 <HAL_RCC_OscConfig+0x562>
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fb58 	bl	8001410 <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe fb54 	bl	8001410 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e15e      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7a:	4b75      	ldr	r3, [pc, #468]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ed      	bne.n	8002d64 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d036      	beq.n	8002e02 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d019      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002da2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002da6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe fb32 	bl	8001410 <HAL_GetTick>
 8002dac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002db0:	f7fe fb2e 	bl	8001410 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e13a      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x5dc>
 8002dce:	e018      	b.n	8002e02 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dd0:	4b5f      	ldr	r3, [pc, #380]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002dd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fb18 	bl	8001410 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002de4:	f7fe fb14 	bl	8001410 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e120      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002df6:	4b56      	ldr	r3, [pc, #344]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8115 	beq.w	8003036 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b18      	cmp	r3, #24
 8002e10:	f000 80af 	beq.w	8002f72 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	f040 8086 	bne.w	8002f2a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4b      	ldr	r2, [pc, #300]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe faf1 	bl	8001410 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002e32:	f7fe faed 	bl	8001410 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0f9      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e44:	4b42      	ldr	r3, [pc, #264]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002e50:	4b3f      	ldr	r3, [pc, #252]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e58:	f023 0303 	bic.w	r3, r3, #3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e64:	0212      	lsls	r2, r2, #8
 8002e66:	430a      	orrs	r2, r1
 8002e68:	4939      	ldr	r1, [pc, #228]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	3b01      	subs	r3, #1
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e9e:	492c      	ldr	r1, [pc, #176]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	4a29      	ldr	r2, [pc, #164]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb4:	4a26      	ldr	r2, [pc, #152]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002eba:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ec0:	f043 0310 	orr.w	r3, r3, #16
 8002ec4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002ec6:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	f023 020c 	bic.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	491f      	ldr	r1, [pc, #124]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	f023 0220 	bic.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee4:	491a      	ldr	r1, [pc, #104]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002eea:	4b19      	ldr	r3, [pc, #100]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002ef6:	4b16      	ldr	r3, [pc, #88]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a15      	ldr	r2, [pc, #84]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7fe fa85 	bl	8001410 <HAL_GetTick>
 8002f06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe fa81 	bl	8001410 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e08d      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x736>
 8002f28:	e085      	b.n	8003036 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <HAL_RCC_OscConfig+0x77c>)
 8002f30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe fa6b 	bl	8001410 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002f3e:	f7fe fa67 	bl	8001410 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d903      	bls.n	8002f54 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e073      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
 8002f50:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f54:	4b3a      	ldr	r3, [pc, #232]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ee      	bne.n	8002f3e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002f60:	4b37      	ldr	r3, [pc, #220]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	4a36      	ldr	r2, [pc, #216]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8002f66:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	6293      	str	r3, [r2, #40]	@ 0x28
 8002f70:	e061      	b.n	8003036 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002f72:	4b33      	ldr	r3, [pc, #204]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f78:	4b31      	ldr	r3, [pc, #196]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d031      	beq.n	8002fea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d12a      	bne.n	8002fea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d122      	bne.n	8002fea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fae:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d11a      	bne.n	8002fea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	0a5b      	lsrs	r3, r3, #9
 8002fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d111      	bne.n	8002fea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d108      	bne.n	8002fea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0e1b      	lsrs	r3, r3, #24
 8002fdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e024      	b.n	8003038 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002fee:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	08db      	lsrs	r3, r3, #3
 8002ff4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d01a      	beq.n	8003036 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	4a0e      	ldr	r2, [pc, #56]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8003006:	f023 0310 	bic.w	r3, r3, #16
 800300a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe fa00 	bl	8001410 <HAL_GetTick>
 8003010:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003012:	bf00      	nop
 8003014:	f7fe f9fc 	bl	8001410 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	4293      	cmp	r3, r2
 800301e:	d0f9      	beq.n	8003014 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003024:	4a06      	ldr	r2, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <HAL_RCC_OscConfig+0x86c>)
 8003030:	f043 0310 	orr.w	r3, r3, #16
 8003034:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	44020c00 	.word	0x44020c00

08003044 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e19e      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b83      	ldr	r3, [pc, #524]	@ (8003268 <HAL_RCC_ClockConfig+0x224>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b80      	ldr	r3, [pc, #512]	@ (8003268 <HAL_RCC_ClockConfig+0x224>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	497e      	ldr	r1, [pc, #504]	@ (8003268 <HAL_RCC_ClockConfig+0x224>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b7c      	ldr	r3, [pc, #496]	@ (8003268 <HAL_RCC_ClockConfig+0x224>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e186      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	4b74      	ldr	r3, [pc, #464]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d909      	bls.n	80030ba <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80030a6:	4b71      	ldr	r3, [pc, #452]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	496d      	ldr	r1, [pc, #436]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	4b68      	ldr	r3, [pc, #416]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d909      	bls.n	80030ec <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80030d8:	4b64      	ldr	r3, [pc, #400]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	4961      	ldr	r1, [pc, #388]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b5b      	ldr	r3, [pc, #364]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003104:	429a      	cmp	r2, r3
 8003106:	d908      	bls.n	800311a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003108:	4b58      	ldr	r3, [pc, #352]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4955      	ldr	r1, [pc, #340]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003116:	4313      	orrs	r3, r2
 8003118:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	4b50      	ldr	r3, [pc, #320]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	429a      	cmp	r2, r3
 8003134:	d908      	bls.n	8003148 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003136:	4b4d      	ldr	r3, [pc, #308]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 020f 	bic.w	r2, r3, #15
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	494a      	ldr	r1, [pc, #296]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003144:	4313      	orrs	r3, r2
 8003146:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8093 	beq.w	800327c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800315e:	4b43      	ldr	r3, [pc, #268]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d121      	bne.n	80031ae <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e113      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003176:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e107      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800318e:	4b37      	ldr	r3, [pc, #220]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0fb      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319e:	4b33      	ldr	r3, [pc, #204]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0f3      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80031ae:	4b2f      	ldr	r3, [pc, #188]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	492c      	ldr	r1, [pc, #176]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c0:	f7fe f926 	bl	8001410 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d112      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe f91e 	bl	8001410 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0d7      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e6:	4b21      	ldr	r3, [pc, #132]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 0318 	and.w	r3, r3, #24
 80031ee:	2b18      	cmp	r3, #24
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x18c>
 80031f2:	e043      	b.n	800327c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d112      	bne.n	8003222 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80031fe:	f7fe f907 	bl	8001410 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0c0      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003214:	4b15      	ldr	r3, [pc, #84]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 0318 	and.w	r3, r3, #24
 800321c:	2b10      	cmp	r3, #16
 800321e:	d1ee      	bne.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
 8003220:	e02c      	b.n	800327c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d122      	bne.n	8003270 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fe f8f0 	bl	8001410 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0a9      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003242:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <HAL_RCC_ClockConfig+0x228>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0318 	and.w	r3, r3, #24
 800324a:	2b08      	cmp	r3, #8
 800324c:	d1ee      	bne.n	800322c <HAL_RCC_ClockConfig+0x1e8>
 800324e:	e015      	b.n	800327c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe f8de 	bl	8001410 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d906      	bls.n	8003270 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e097      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
 8003266:	bf00      	nop
 8003268:	40022000 	.word	0x40022000
 800326c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003270:	4b4b      	ldr	r3, [pc, #300]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f003 0318 	and.w	r3, r3, #24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e9      	bne.n	8003250 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b44      	ldr	r3, [pc, #272]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	429a      	cmp	r2, r3
 8003296:	d208      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003298:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f023 020f 	bic.w	r2, r3, #15
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	493e      	ldr	r1, [pc, #248]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032aa:	4b3e      	ldr	r3, [pc, #248]	@ (80033a4 <HAL_RCC_ClockConfig+0x360>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d210      	bcs.n	80032da <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b8:	4b3a      	ldr	r3, [pc, #232]	@ (80033a4 <HAL_RCC_ClockConfig+0x360>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 020f 	bic.w	r2, r3, #15
 80032c0:	4938      	ldr	r1, [pc, #224]	@ (80033a4 <HAL_RCC_ClockConfig+0x360>)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c8:	4b36      	ldr	r3, [pc, #216]	@ (80033a4 <HAL_RCC_ClockConfig+0x360>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e05d      	b.n	8003396 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d208      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80032f6:	4b2a      	ldr	r3, [pc, #168]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4927      	ldr	r1, [pc, #156]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d012      	beq.n	800333a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003322:	429a      	cmp	r2, r3
 8003324:	d209      	bcs.n	800333a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003326:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	491a      	ldr	r1, [pc, #104]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003354:	429a      	cmp	r2, r3
 8003356:	d209      	bcs.n	800336c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003358:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	490e      	ldr	r1, [pc, #56]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800336c:	f000 f822 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	490b      	ldr	r1, [pc, #44]	@ (80033a8 <HAL_RCC_ClockConfig+0x364>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <HAL_RCC_ClockConfig+0x368>)
 8003384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_RCC_ClockConfig+0x36c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd ffb6 	bl	80012fc <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003394:	7afb      	ldrb	r3, [r7, #11]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	44020c00 	.word	0x44020c00
 80033a4:	40022000 	.word	0x40022000
 80033a8:	080085cc 	.word	0x080085cc
 80033ac:	20000000 	.word	0x20000000
 80033b0:	20000010 	.word	0x20000010

080033b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80033ba:	4b8c      	ldr	r3, [pc, #560]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 0318 	and.w	r3, r3, #24
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d102      	bne.n	80033cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033c6:	4b8a      	ldr	r3, [pc, #552]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x23c>)
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	e107      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033cc:	4b87      	ldr	r3, [pc, #540]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 0318 	and.w	r3, r3, #24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d112      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80033d8:	4b84      	ldr	r3, [pc, #528]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80033e4:	4b81      	ldr	r3, [pc, #516]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	08db      	lsrs	r3, r3, #3
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	4a81      	ldr	r2, [pc, #516]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e0f1      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80033f8:	4b7e      	ldr	r3, [pc, #504]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	e0ee      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fe:	4b7b      	ldr	r3, [pc, #492]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0318 	and.w	r3, r3, #24
 8003406:	2b10      	cmp	r3, #16
 8003408:	d102      	bne.n	8003410 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800340a:	4b7b      	ldr	r3, [pc, #492]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x244>)
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e0e5      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003410:	4b76      	ldr	r3, [pc, #472]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f003 0318 	and.w	r3, r3, #24
 8003418:	2b18      	cmp	r3, #24
 800341a:	f040 80dd 	bne.w	80035d8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800341e:	4b73      	ldr	r3, [pc, #460]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003428:	4b70      	ldr	r3, [pc, #448]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003432:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003434:	4b6d      	ldr	r3, [pc, #436]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003440:	4b6a      	ldr	r3, [pc, #424]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003444:	08db      	lsrs	r3, r3, #3
 8003446:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003458:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80b7 	beq.w	80035d2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0xbe>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d056      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x16a>
 8003470:	e077      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003472:	4b5e      	ldr	r3, [pc, #376]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02d      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800347e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	4a5a      	ldr	r2, [pc, #360]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x240>)
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a8:	4b50      	ldr	r3, [pc, #320]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 80034aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80034b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80034bc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x248>
 80034c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80034d8:	e065      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003600 <HAL_RCC_GetSysClockFreq+0x24c>
 80034e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ec:	4b3f      	ldr	r3, [pc, #252]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 80034ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80034fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003500:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x248>
 8003504:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003508:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800350c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003510:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003518:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800351c:	e043      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003528:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x250>
 800352c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003530:	4b2e      	ldr	r3, [pc, #184]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003540:	ed97 6a02 	vldr	s12, [r7, #8]
 8003544:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x248>
 8003548:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800354c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003550:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003554:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003560:	e021      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003608 <HAL_RCC_GetSysClockFreq+0x254>
 8003570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003574:	4b1d      	ldr	r3, [pc, #116]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003584:	ed97 6a02 	vldr	s12, [r7, #8]
 8003588:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x248>
 800358c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003590:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003594:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003598:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80035a4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80035a6:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x238>)
 80035a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035aa:	0a5b      	lsrs	r3, r3, #9
 80035ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035b0:	3301      	adds	r3, #1
 80035b2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035be:	edd7 6a06 	vldr	s13, [r7, #24]
 80035c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ca:	ee17 3a90 	vmov	r3, s15
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e004      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e001      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80035da:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80035dc:	69fb      	ldr	r3, [r7, #28]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	@ 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	44020c00 	.word	0x44020c00
 80035f0:	003d0900 	.word	0x003d0900
 80035f4:	03d09000 	.word	0x03d09000
 80035f8:	017d7840 	.word	0x017d7840
 80035fc:	46000000 	.word	0x46000000
 8003600:	4c742400 	.word	0x4c742400
 8003604:	4bbebc20 	.word	0x4bbebc20
 8003608:	4a742400 	.word	0x4a742400

0800360c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003610:	f7ff fed0 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800361a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800361e:	4907      	ldr	r1, [pc, #28]	@ (800363c <HAL_RCC_GetHCLKFreq+0x30>)
 8003620:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003622:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <HAL_RCC_GetHCLKFreq+0x34>)
 800362c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800362e:	4b04      	ldr	r3, [pc, #16]	@ (8003640 <HAL_RCC_GetHCLKFreq+0x34>)
 8003630:	681b      	ldr	r3, [r3, #0]
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	44020c00 	.word	0x44020c00
 800363c:	080085cc 	.word	0x080085cc
 8003640:	20000000 	.word	0x20000000

08003644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003648:	f7ff ffe0 	bl	800360c <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4904      	ldr	r1, [pc, #16]	@ (800366c <HAL_RCC_GetPCLK1Freq+0x28>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	44020c00 	.word	0x44020c00
 800366c:	080085dc 	.word	0x080085dc

08003670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003674:	f7ff ffca 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4904      	ldr	r1, [pc, #16]	@ (8003698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	44020c00 	.word	0x44020c00
 8003698:	080085dc 	.word	0x080085dc

0800369c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80036a0:	f7ff ffb4 	bl	800360c <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	0b1b      	lsrs	r3, r3, #12
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	@ (80036c4 <HAL_RCC_GetPCLK3Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	44020c00 	.word	0x44020c00
 80036c4:	080085dc 	.word	0x080085dc

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b0aa      	sub	sp, #168	@ 0xa8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80036ec:	2500      	movs	r5, #0
 80036ee:	ea54 0305 	orrs.w	r3, r4, r5
 80036f2:	d00b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80036f4:	4bb8      	ldr	r3, [pc, #736]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036fa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80036fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	4ab4      	ldr	r2, [pc, #720]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003706:	430b      	orrs	r3, r1
 8003708:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f002 0801 	and.w	r8, r2, #1
 8003718:	f04f 0900 	mov.w	r9, #0
 800371c:	ea58 0309 	orrs.w	r3, r8, r9
 8003720:	d038      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003722:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003728:	2b05      	cmp	r3, #5
 800372a:	d819      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003769 	.word	0x08003769
 8003738:	0800374d 	.word	0x0800374d
 800373c:	08003761 	.word	0x08003761
 8003740:	08003769 	.word	0x08003769
 8003744:	08003769 	.word	0x08003769
 8003748:	08003769 	.word	0x08003769
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800374c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003750:	3308      	adds	r3, #8
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fff2 	bl	800573c <RCCEx_PLL2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800375e:	e004      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003766:	e000      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003772:	4b99      	ldr	r3, [pc, #612]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003778:	f023 0107 	bic.w	r1, r3, #7
 800377c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003782:	4a95      	ldr	r2, [pc, #596]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003784:	430b      	orrs	r3, r1
 8003786:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800378a:	e003      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003790:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003794:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f002 0a02 	and.w	sl, r2, #2
 80037a0:	f04f 0b00 	mov.w	fp, #0
 80037a4:	ea5a 030b 	orrs.w	r3, sl, fp
 80037a8:	d03c      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80037aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	2b28      	cmp	r3, #40	@ 0x28
 80037b2:	d01b      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x124>
 80037b4:	2b28      	cmp	r3, #40	@ 0x28
 80037b6:	d815      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d019      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d811      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80037c0:	2b18      	cmp	r3, #24
 80037c2:	d017      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80037c4:	2b18      	cmp	r3, #24
 80037c6:	d80d      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d109      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037d4:	3308      	adds	r3, #8
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 ffb0 	bl	800573c <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80037e2:	e00a      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80037ea:	e006      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80037ec:	bf00      	nop
 80037ee:	e004      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80037f0:	bf00      	nop
 80037f2:	e002      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80037f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003802:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003808:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800380c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	4a71      	ldr	r2, [pc, #452]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003814:	430b      	orrs	r3, r1
 8003816:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003820:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003824:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 0304 	and.w	r3, r2, #4
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800383a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d040      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003844:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800384e:	d01e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003850:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003854:	d817      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800385a:	d01a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800385c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003860:	d811      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003862:	2bc0      	cmp	r3, #192	@ 0xc0
 8003864:	d017      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003866:	2bc0      	cmp	r3, #192	@ 0xc0
 8003868:	d80d      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d015      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d109      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003872:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003876:	3308      	adds	r3, #8
 8003878:	4618      	mov	r0, r3
 800387a:	f001 ff5f 	bl	800573c <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003884:	e00a      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800388e:	bf00      	nop
 8003890:	e004      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800389a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10c      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80038a4:	4b4c      	ldr	r3, [pc, #304]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038aa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80038ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b4:	4a48      	ldr	r2, [pc, #288]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038b6:	430b      	orrs	r3, r1
 80038b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038bc:	e003      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038c2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80038d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80038e0:	460b      	mov	r3, r1
 80038e2:	4313      	orrs	r3, r2
 80038e4:	d043      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80038e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038f0:	d021      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80038f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038f6:	d81a      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80038f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038fc:	d01d      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80038fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003902:	d814      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003904:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003908:	d019      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800390a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800390e:	d80e      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d016      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003918:	d109      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800391a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800391e:	3308      	adds	r3, #8
 8003920:	4618      	mov	r0, r3
 8003922:	f001 ff0b 	bl	800573c <RCCEx_PLL2_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800392c:	e00a      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003934:	e006      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003936:	bf00      	nop
 8003938:	e004      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800393a:	bf00      	nop
 800393c:	e002      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003944:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10c      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800394c:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800394e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003952:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003956:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	4a1e      	ldr	r2, [pc, #120]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800395e:	430b      	orrs	r3, r1
 8003960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003964:	e003      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800396a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800396e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800397a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800397c:	2300      	movs	r3, #0
 800397e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003980:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003984:	460b      	mov	r3, r1
 8003986:	4313      	orrs	r3, r2
 8003988:	d03e      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800398a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800398e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003990:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003994:	d01b      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003996:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800399a:	d814      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800399c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a0:	d017      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80039a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a6:	d80e      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d017      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d109      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039b6:	3308      	adds	r3, #8
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 febf 	bl	800573c <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80039c4:	e00b      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039cc:	e007      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80039ce:	bf00      	nop
 80039d0:	e005      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80039d2:	bf00      	nop
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x316>
 80039d6:	bf00      	nop
 80039d8:	44020c00 	.word	0x44020c00
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80039e6:	4ba5      	ldr	r3, [pc, #660]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80039e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80039f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4aa1      	ldr	r2, [pc, #644]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a04:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a14:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a16:	2300      	movs	r3, #0
 8003a18:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a1a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d03b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a2e:	d01b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003a30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a34:	d814      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003a36:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a3a:	d017      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003a3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a40:	d80e      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d014      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003a46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a4a:	d109      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a50:	3308      	adds	r3, #8
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fe72 	bl	800573c <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003a5e:	e008      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003a68:	bf00      	nop
 8003a6a:	e002      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003a6c:	bf00      	nop
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003a7a:	4b80      	ldr	r3, [pc, #512]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a80:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a98:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003a9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aaa:	2300      	movs	r3, #0
 8003aac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d033      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac2:	d015      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003ac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac8:	d80e      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d012      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003ace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ad8:	3308      	adds	r3, #8
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fe2e 	bl	800573c <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003ae6:	e006      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003aee:	e002      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003af0:	bf00      	nop
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003afe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b04:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	6639      	str	r1, [r7, #96]	@ 0x60
 8003b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b30:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d033      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b46:	d015      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003b48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b4c:	d80e      	bhi.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d012      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b56:	d109      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fdec 	bl	800573c <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003b6a:	e006      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b72:	e002      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003b74:	bf00      	nop
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003b78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003b82:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b88:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b92:	4a3a      	ldr	r2, [pc, #232]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b94:	430b      	orrs	r3, r1
 8003b96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b9a:	e003      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ba0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	2100      	movs	r1, #0
 8003bae:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003bc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bca:	61d3      	str	r3, [r2, #28]
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bd8:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bec:	2300      	movs	r3, #0
 8003bee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bf0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	d046      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003bfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c00:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003c04:	d021      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003c06:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003c0a:	d81a      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c10:	d01d      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c16:	d814      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c22:	d80e      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d016      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c32:	3308      	adds	r3, #8
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 fd81 	bl	800573c <RCCEx_PLL2_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003c40:	e00a      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003c4a:	bf00      	nop
 8003c4c:	e004      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10f      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c66:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	4a02      	ldr	r2, [pc, #8]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003c78:	e006      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c7a:	bf00      	nop
 8003c7c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c84:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c96:	2300      	movs	r3, #0
 8003c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	d043      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003caa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cae:	d021      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003cb0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cb4:	d81a      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cba:	d01d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cc0:	d814      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003cc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003cc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ccc:	d80e      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd6:	d109      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cdc:	3308      	adds	r3, #8
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 fd2c 	bl	800573c <RCCEx_PLL2_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003cea:	e00a      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cf2:	e006      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e004      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003cf8:	bf00      	nop
 8003cfa:	e002      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003d0a:	4bb6      	ldr	r3, [pc, #728]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003d10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	4ab2      	ldr	r2, [pc, #712]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d28:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d030      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003d48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d80f      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d211      	bcs.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d911      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d62:	3308      	adds	r3, #8
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 fce9 	bl	800573c <RCCEx_PLL2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d70:	e006      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d80:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003d88:	4b96      	ldr	r3, [pc, #600]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d8e:	f023 0107 	bic.w	r1, r3, #7
 8003d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d98:	4a92      	ldr	r2, [pc, #584]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003da6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	2100      	movs	r1, #0
 8003db4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	d022      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003dda:	e002      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003dea:	4b7e      	ldr	r3, [pc, #504]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003df0:	f023 0108 	bic.w	r1, r3, #8
 8003df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dfa:	4a7a      	ldr	r2, [pc, #488]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e02:	e003      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e08:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f000 80b0 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e36:	f7fd faeb 	bl	8001410 <HAL_GetTick>
 8003e3a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd fae6 	bl	8001410 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d903      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e56:	e005      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e58:	4b63      	ldr	r3, [pc, #396]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ed      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003e64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 808a 	bne.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003e7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d022      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d01b      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e92:	4b54      	ldr	r3, [pc, #336]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ea0:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb6:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ec0:	4a48      	ldr	r2, [pc, #288]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d019      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fa9b 	bl	8001410 <HAL_GetTick>
 8003eda:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ede:	e00d      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee0:	f7fd fa96 	bl	8001410 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d903      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8003efa:	e006      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efc:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ea      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8003f0a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d132      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f20:	d10f      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003f22:	4b30      	ldr	r3, [pc, #192]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	61d3      	str	r3, [r2, #28]
 8003f40:	e005      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003f42:	4b28      	ldr	r3, [pc, #160]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	4a27      	ldr	r2, [pc, #156]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f4c:	61d3      	str	r3, [r2, #28]
 8003f4e:	4b25      	ldr	r3, [pc, #148]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f54:	4a23      	ldr	r2, [pc, #140]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f5e:	4b21      	ldr	r3, [pc, #132]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f60:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f76:	e008      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f78:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f7c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f86:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d038      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fac:	2b30      	cmp	r3, #48	@ 0x30
 8003fae:	d014      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003fb0:	2b30      	cmp	r3, #48	@ 0x30
 8003fb2:	d80e      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d012      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d80a      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	4a06      	ldr	r2, [pc, #24]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003fd0:	e00d      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003fd8:	e009      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e007      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e005      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x926>
 8003fe2:	bf00      	nop
 8003fe4:	44020c00 	.word	0x44020c00
 8003fe8:	44020800 	.word	0x44020800
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003ff6:	4bb5      	ldr	r3, [pc, #724]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ffc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004000:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004006:	49b1      	ldr	r1, [pc, #708]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800400e:	e003      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004014:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004018:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	2300      	movs	r3, #0
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
 800402a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800402e:	460b      	mov	r3, r1
 8004030:	4313      	orrs	r3, r2
 8004032:	d03c      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004034:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403a:	2b04      	cmp	r3, #4
 800403c:	d81d      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800403e:	a201      	add	r2, pc, #4	@ (adr r2, 8004044 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004059 	.word	0x08004059
 8004048:	08004067 	.word	0x08004067
 800404c:	0800407b 	.word	0x0800407b
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004058:	4b9c      	ldr	r3, [pc, #624]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	4a9b      	ldr	r2, [pc, #620]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800405e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004062:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004064:	e00e      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004066:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800406a:	3308      	adds	r3, #8
 800406c:	4618      	mov	r0, r3
 800406e:	f001 fb65 	bl	800573c <RCCEx_PLL2_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004078:	e004      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8004082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004084:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10c      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800408c:	4b8f      	ldr	r3, [pc, #572]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800408e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004092:	f023 0207 	bic.w	r2, r3, #7
 8004096:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800409a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409c:	498b      	ldr	r1, [pc, #556]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040aa:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80040ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040c4:	460b      	mov	r3, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	d03c      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80040ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d01f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d819      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80040d8:	2b18      	cmp	r3, #24
 80040da:	d01d      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80040dc:	2b18      	cmp	r3, #24
 80040de:	d815      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d007      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80040e8:	e010      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ea:	4b78      	ldr	r3, [pc, #480]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	4a77      	ldr	r2, [pc, #476]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80040f6:	e010      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040fc:	3308      	adds	r3, #8
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fb1c 	bl	800573c <RCCEx_PLL2_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800410a:	e006      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004112:	e002      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004122:	4b6a      	ldr	r3, [pc, #424]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004128:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800412c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	4966      	ldr	r1, [pc, #408]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800413a:	e003      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004140:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004144:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	d03e      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004160:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416a:	d020      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800416c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004170:	d819      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004172:	2bc0      	cmp	r3, #192	@ 0xc0
 8004174:	d01d      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004176:	2bc0      	cmp	r3, #192	@ 0xc0
 8004178:	d815      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d007      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004182:	e010      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004184:	4b51      	ldr	r3, [pc, #324]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	4a50      	ldr	r2, [pc, #320]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004190:	e010      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004192:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004196:	3308      	adds	r3, #8
 8004198:	4618      	mov	r0, r3
 800419a:	f001 facf 	bl	800573c <RCCEx_PLL2_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80041bc:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80041be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041c2:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80041c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041cc:	493f      	ldr	r1, [pc, #252]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80041d4:	e003      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041da:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	2100      	movs	r1, #0
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041f4:	460b      	mov	r3, r1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	d038      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80041fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004204:	d00e      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8004206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420a:	d815      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004214:	d110      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004216:	4b2d      	ldr	r3, [pc, #180]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800421c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004220:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004222:	e00e      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004224:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004228:	3308      	adds	r3, #8
 800422a:	4618      	mov	r0, r3
 800422c:	f001 fa86 	bl	800573c <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8004240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004242:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10c      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800424a:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800424c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004254:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	491c      	ldr	r1, [pc, #112]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004262:	e003      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004268:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800426c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	2100      	movs	r1, #0
 8004276:	6039      	str	r1, [r7, #0]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004282:	460b      	mov	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	d039      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004288:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800428c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800428e:	2b30      	cmp	r3, #48	@ 0x30
 8004290:	d01e      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004292:	2b30      	cmp	r3, #48	@ 0x30
 8004294:	d815      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8004296:	2b10      	cmp	r3, #16
 8004298:	d002      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800429a:	2b20      	cmp	r3, #32
 800429c:	d007      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800429e:	e010      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	4a09      	ldr	r2, [pc, #36]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80042a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80042ac:	e011      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042b2:	3308      	adds	r3, #8
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 fa41 	bl	800573c <RCCEx_PLL2_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80042c0:	e007      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80042ca:	bf00      	nop
 80042cc:	44020c00 	.word	0x44020c00
        break;
 80042d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80042da:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ea:	4908      	ldr	r1, [pc, #32]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80042f2:	e003      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042f8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80042fc:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8004300:	4618      	mov	r0, r3
 8004302:	37a8      	adds	r7, #168	@ 0xa8
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430a:	bf00      	nop
 800430c:	44020c00 	.word	0x44020c00

08004310 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004310:	b480      	push	{r7}
 8004312:	b08b      	sub	sp, #44	@ 0x2c
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004318:	4bae      	ldr	r3, [pc, #696]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800431a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004322:	4bac      	ldr	r3, [pc, #688]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800432c:	4ba9      	ldr	r3, [pc, #676]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004336:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004338:	4ba6      	ldr	r3, [pc, #664]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004344:	4ba3      	ldr	r3, [pc, #652]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8126 	beq.w	80045b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d053      	beq.n	8004416 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d86f      	bhi.n	8004454 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d003      	beq.n	8004382 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d02b      	beq.n	80043d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004380:	e068      	b.n	8004454 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004382:	4b94      	ldr	r3, [pc, #592]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	4a92      	ldr	r2, [pc, #584]	@ (80045d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80043ba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80045dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80043d6:	e068      	b.n	80044aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80045e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	ee07 3a90 	vmov	s15, r3
 80043f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80043f8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80045dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80043fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004410:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004414:	e049      	b.n	80044aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004420:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80045e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004432:	ed97 6a04 	vldr	s12, [r7, #16]
 8004436:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80045dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800443a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004452:	e02a      	b.n	80044aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004454:	4b5f      	ldr	r3, [pc, #380]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	08db      	lsrs	r3, r3, #3
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	4a5e      	ldr	r2, [pc, #376]	@ (80045d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	ee07 3a90 	vmov	s15, r3
 800446c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004488:	ed97 6a04 	vldr	s12, [r7, #16]
 800448c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80045dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004498:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800449c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80044a8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044aa:	4b4a      	ldr	r3, [pc, #296]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044b6:	d121      	bne.n	80044fc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80044b8:	4b46      	ldr	r3, [pc, #280]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d017      	beq.n	80044f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80044c4:	4b43      	ldr	r3, [pc, #268]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	0a5b      	lsrs	r3, r3, #9
 80044ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80044d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044da:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80044de:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80044e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e006      	b.n	8004502 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e002      	b.n	8004502 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004502:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800450e:	d121      	bne.n	8004554 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004510:	4b30      	ldr	r3, [pc, #192]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800451c:	4b2d      	ldr	r3, [pc, #180]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800451e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800452e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004532:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004536:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800453a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800453e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004542:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	e006      	b.n	800455a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e002      	b.n	800455a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800455a:	4b1e      	ldr	r3, [pc, #120]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004566:	d121      	bne.n	80045ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004568:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d017      	beq.n	80045a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004574:	4b17      	ldr	r3, [pc, #92]	@ (80045d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004578:	0e1b      	lsrs	r3, r3, #24
 800457a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004586:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800458a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800458e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80045a2:	e010      	b.n	80045c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	e00c      	b.n	80045c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	e008      	b.n	80045c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	bf00      	nop
 80045c8:	372c      	adds	r7, #44	@ 0x2c
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	44020c00 	.word	0x44020c00
 80045d8:	03d09000 	.word	0x03d09000
 80045dc:	46000000 	.word	0x46000000
 80045e0:	4a742400 	.word	0x4a742400
 80045e4:	4bbebc20 	.word	0x4bbebc20

080045e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b08b      	sub	sp, #44	@ 0x2c
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80045f0:	4bae      	ldr	r3, [pc, #696]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80045f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80045fa:	4bac      	ldr	r3, [pc, #688]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004604:	4ba9      	ldr	r3, [pc, #676]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800460e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004610:	4ba6      	ldr	r3, [pc, #664]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800461c:	4ba3      	ldr	r3, [pc, #652]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004634:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8126 	beq.w	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d053      	beq.n	80046ee <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d86f      	bhi.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d02b      	beq.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004658:	e068      	b.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800465a:	4b94      	ldr	r3, [pc, #592]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	08db      	lsrs	r3, r3, #3
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	4a92      	ldr	r2, [pc, #584]	@ (80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004692:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80046ae:	e068      	b.n	8004782 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80046be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80046d0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80046d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80046ec:	e049      	b.n	8004782 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80046fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a04 	vldr	s12, [r7, #16]
 800470e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800472a:	e02a      	b.n	8004782 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800472c:	4b5f      	ldr	r3, [pc, #380]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	4a5e      	ldr	r2, [pc, #376]	@ (80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
 800473c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004760:	ed97 6a04 	vldr	s12, [r7, #16]
 8004764:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004780:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004782:	4b4a      	ldr	r3, [pc, #296]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800478a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800478e:	d121      	bne.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004790:	4b46      	ldr	r3, [pc, #280]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d017      	beq.n	80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800479c:	4b43      	ldr	r3, [pc, #268]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	0a5b      	lsrs	r3, r3, #9
 80047a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80047ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047b2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80047b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80047ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e006      	b.n	80047da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e002      	b.n	80047da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047da:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047e6:	d121      	bne.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80047e8:	4b30      	ldr	r3, [pc, #192]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d017      	beq.n	8004824 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80047f4:	4b2d      	ldr	r3, [pc, #180]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800480a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800480e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	e006      	b.n	8004832 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e002      	b.n	8004832 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004832:	4b1e      	ldr	r3, [pc, #120]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483e:	d121      	bne.n	8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004840:	4b1a      	ldr	r3, [pc, #104]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d017      	beq.n	800487c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800484c:	4b17      	ldr	r3, [pc, #92]	@ (80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004850:	0e1b      	lsrs	r3, r3, #24
 8004852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800485e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004862:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004866:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800486a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004872:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800487a:	e010      	b.n	800489e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
}
 8004882:	e00c      	b.n	800489e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	e008      	b.n	800489e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
}
 800489e:	bf00      	nop
 80048a0:	372c      	adds	r7, #44	@ 0x2c
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	44020c00 	.word	0x44020c00
 80048b0:	03d09000 	.word	0x03d09000
 80048b4:	46000000 	.word	0x46000000
 80048b8:	4a742400 	.word	0x4a742400
 80048bc:	4bbebc20 	.word	0x4bbebc20

080048c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80048ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ce:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80048d2:	430b      	orrs	r3, r1
 80048d4:	d14b      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80048d6:	4bc4      	ldr	r3, [pc, #784]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80048d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80048e2:	4bc1      	ldr	r3, [pc, #772]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80048e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d108      	bne.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f6:	d104      	bne.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80048f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fe:	f000 bf14 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004902:	4bb9      	ldr	r3, [pc, #740]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800490c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004910:	d108      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004918:	d104      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800491a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800491e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004920:	f000 bf03 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004924:	4bb0      	ldr	r3, [pc, #704]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004930:	d119      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004938:	d115      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800493a:	4bab      	ldr	r3, [pc, #684]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004946:	d30a      	bcc.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004948:	4ba7      	ldr	r3, [pc, #668]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004952:	4aa6      	ldr	r2, [pc, #664]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800495a:	f000 bee6 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004962:	f000 bee2 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496a:	f000 bede 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800496e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004972:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004976:	ea52 0301 	orrs.w	r3, r2, r1
 800497a:	f000 838e 	beq.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800497e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004982:	2a01      	cmp	r2, #1
 8004984:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004988:	f080 86cc 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800498c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004990:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004994:	ea52 0301 	orrs.w	r3, r2, r1
 8004998:	f000 82aa 	beq.w	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800499c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a0:	2a01      	cmp	r2, #1
 80049a2:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80049a6:	f080 86bd 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ae:	f1a3 0110 	sub.w	r1, r3, #16
 80049b2:	ea52 0301 	orrs.w	r3, r2, r1
 80049b6:	f000 8681 	beq.w	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80049ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049be:	2a01      	cmp	r2, #1
 80049c0:	f173 0310 	sbcs.w	r3, r3, #16
 80049c4:	f080 86ae 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049cc:	1f19      	subs	r1, r3, #4
 80049ce:	ea52 0301 	orrs.w	r3, r2, r1
 80049d2:	f000 84b1 	beq.w	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80049d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049da:	2a01      	cmp	r2, #1
 80049dc:	f173 0304 	sbcs.w	r3, r3, #4
 80049e0:	f080 86a0 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80049e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80049ec:	430b      	orrs	r3, r1
 80049ee:	f000 85aa 	beq.w	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80049f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f6:	497e      	ldr	r1, [pc, #504]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80049f8:	428a      	cmp	r2, r1
 80049fa:	f173 0300 	sbcs.w	r3, r3, #0
 80049fe:	f080 8691 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a06:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	f000 8532 	beq.w	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a14:	4977      	ldr	r1, [pc, #476]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8004a16:	428a      	cmp	r2, r1
 8004a18:	f173 0300 	sbcs.w	r3, r3, #0
 8004a1c:	f080 8682 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a24:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	f000 84bc 	beq.w	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a32:	4971      	ldr	r1, [pc, #452]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004a34:	428a      	cmp	r2, r1
 8004a36:	f173 0300 	sbcs.w	r3, r3, #0
 8004a3a:	f080 8673 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a42:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004a46:	430b      	orrs	r3, r1
 8004a48:	f000 85f2 	beq.w	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a50:	496a      	ldr	r1, [pc, #424]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004a52:	428a      	cmp	r2, r1
 8004a54:	f173 0300 	sbcs.w	r3, r3, #0
 8004a58:	f080 8664 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a60:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f000 81e5 	beq.w	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a6e:	4964      	ldr	r1, [pc, #400]	@ (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004a70:	428a      	cmp	r2, r1
 8004a72:	f173 0300 	sbcs.w	r3, r3, #0
 8004a76:	f080 8655 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004a82:	430b      	orrs	r3, r1
 8004a84:	f000 83cc 	beq.w	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a8c:	495d      	ldr	r1, [pc, #372]	@ (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	f173 0300 	sbcs.w	r3, r3, #0
 8004a94:	f080 8646 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a9c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	f000 8331 	beq.w	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aaa:	4957      	ldr	r1, [pc, #348]	@ (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004aac:	428a      	cmp	r2, r1
 8004aae:	f173 0300 	sbcs.w	r3, r3, #0
 8004ab2:	f080 8637 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aba:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f000 82bb 	beq.w	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac8:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004acc:	f173 0300 	sbcs.w	r3, r3, #0
 8004ad0:	f080 8628 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004adc:	430b      	orrs	r3, r1
 8004ade:	f000 826d 	beq.w	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ae6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004aea:	428a      	cmp	r2, r1
 8004aec:	f173 0300 	sbcs.w	r3, r3, #0
 8004af0:	f080 8618 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004afc:	430b      	orrs	r3, r1
 8004afe:	f000 821e 	beq.w	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b06:	f242 0101 	movw	r1, #8193	@ 0x2001
 8004b0a:	428a      	cmp	r2, r1
 8004b0c:	f173 0300 	sbcs.w	r3, r3, #0
 8004b10:	f080 8608 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b18:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	f000 8137 	beq.w	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b26:	f241 0101 	movw	r1, #4097	@ 0x1001
 8004b2a:	428a      	cmp	r2, r1
 8004b2c:	f173 0300 	sbcs.w	r3, r3, #0
 8004b30:	f080 85f8 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b38:	1f11      	subs	r1, r2, #4
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	f000 80d2 	beq.w	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b44:	2a05      	cmp	r2, #5
 8004b46:	f173 0300 	sbcs.w	r3, r3, #0
 8004b4a:	f080 85eb 	bcs.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b52:	1e51      	subs	r1, r2, #1
 8004b54:	430b      	orrs	r3, r1
 8004b56:	d006      	beq.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5c:	1e91      	subs	r1, r2, #2
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	d06c      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004b62:	f000 bddf 	b.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004b66:	4b20      	ldr	r3, [pc, #128]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7fe fd7a 	bl	8003670 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b7e:	f000 bdd4 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004b82:	4b19      	ldr	r3, [pc, #100]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fd24 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba4:	e048      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004ba6:	4b10      	ldr	r3, [pc, #64]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	08db      	lsrs	r3, r3, #3
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	4a12      	ldr	r2, [pc, #72]	@ (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bca:	e035      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd8:	d11c      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d119      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004be4:	e028      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004be6:	bf00      	nop
 8004be8:	44020c00 	.word	0x44020c00
 8004bec:	017d7840 	.word	0x017d7840
 8004bf0:	20000001 	.word	0x20000001
 8004bf4:	10000001 	.word	0x10000001
 8004bf8:	08000001 	.word	0x08000001
 8004bfc:	04000001 	.word	0x04000001
 8004c00:	00200001 	.word	0x00200001
 8004c04:	00040001 	.word	0x00040001
 8004c08:	00020001 	.word	0x00020001
 8004c0c:	03d09000 	.word	0x03d09000
 8004c10:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004c14:	4b9f      	ldr	r3, [pc, #636]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d106      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d103      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004c28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c2e:	e003      	b.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c34:	f000 bd79 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c38:	f000 bd77 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004c3c:	4b95      	ldr	r3, [pc, #596]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c46:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c4e:	f7fe fcf9 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004c52:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c54:	f000 bd69 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004c58:	4b8e      	ldr	r3, [pc, #568]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c64:	d10a      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fcb9 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c7a:	e031      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004c7c:	4b85      	ldr	r3, [pc, #532]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d10c      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	2b18      	cmp	r3, #24
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c8e:	4b81      	ldr	r3, [pc, #516]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	08db      	lsrs	r3, r3, #3
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	4a7f      	ldr	r2, [pc, #508]	@ (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ca0:	e01e      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cae:	d105      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d102      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004cb6:	4b79      	ldr	r3, [pc, #484]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cba:	e011      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004cbc:	4b75      	ldr	r3, [pc, #468]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	2b28      	cmp	r3, #40	@ 0x28
 8004cce:	d103      	bne.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004cd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd6:	e003      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004cdc:	f000 bd25 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004ce0:	f000 bd23 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ce6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004cee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cf6:	f7fe fca5 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004cfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004cfc:	f000 bd15 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004d00:	4b64      	ldr	r3, [pc, #400]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d0c:	d10a      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d107      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d14:	f107 030c 	add.w	r3, r7, #12
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fc65 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d22:	e033      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004d24:	4b5b      	ldr	r3, [pc, #364]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d10c      	bne.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d36:	4b57      	ldr	r3, [pc, #348]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	08db      	lsrs	r3, r3, #3
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	4a55      	ldr	r2, [pc, #340]	@ (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d48:	e020      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004d4a:	4b52      	ldr	r3, [pc, #328]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d56:	d106      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8004d60:	4b4e      	ldr	r3, [pc, #312]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d64:	e012      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004d66:	4b4b      	ldr	r3, [pc, #300]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d107      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d7a:	d103      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8004d7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d82:	e003      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d88:	f000 bccf 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d8c:	f000 bccd 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d90:	4b40      	ldr	r3, [pc, #256]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d96:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004da2:	f7fe fc7b 	bl	800369c <HAL_RCC_GetPCLK3Freq>
 8004da6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004da8:	f000 bcbf 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004db2:	d108      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004db4:	f107 030c 	add.w	r3, r7, #12
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fc15 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004dc2:	f000 bcb2 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004dc6:	4b33      	ldr	r3, [pc, #204]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d10d      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dd8:	d109      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dda:	4b2e      	ldr	r3, [pc, #184]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	08db      	lsrs	r3, r3, #3
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004de6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dec:	e020      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004dee:	4b29      	ldr	r3, [pc, #164]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e02:	d102      	bne.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8004e04:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e08:	e012      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004e0a:	4b22      	ldr	r3, [pc, #136]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d107      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004e1e:	d103      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8004e20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e26:	e003      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e2c:	f000 bc7d 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004e30:	f000 bc7b 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004e34:	4b17      	ldr	r3, [pc, #92]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004e46:	f7fe fbe1 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8004e4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004e4c:	f000 bc6d 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d104      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fe faad 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8004e5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8004e5c:	f000 bc65 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d108      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e66:	f107 030c 	add.w	r3, r7, #12
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fbbc 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e74:	f000 bc59 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004e78:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e84:	d10e      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8004e8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e90:	e02c      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8004e92:	bf00      	nop
 8004e94:	44020c00 	.word	0x44020c00
 8004e98:	03d09000 	.word	0x03d09000
 8004e9c:	003d0900 	.word	0x003d0900
 8004ea0:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004ea4:	4b95      	ldr	r3, [pc, #596]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d10c      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d109      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eb6:	4b91      	ldr	r3, [pc, #580]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	08db      	lsrs	r3, r3, #3
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	4a8f      	ldr	r2, [pc, #572]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ec8:	e010      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004eca:	4b8c      	ldr	r3, [pc, #560]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d102      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8004ede:	4b89      	ldr	r3, [pc, #548]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ee8:	f000 bc1f 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004eec:	f000 bc1d 	b.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004ef0:	4b82      	ldr	r3, [pc, #520]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004efc:	4b7f      	ldr	r3, [pc, #508]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d106      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8004f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f16:	e011      	b.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004f18:	4b78      	ldr	r3, [pc, #480]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f26:	d106      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d103      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8004f2e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f34:	e002      	b.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8004f3a:	e3f6      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f3c:	e3f5      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f48:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fb78 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004f54:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f56:	e3e8      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8004f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fb3f 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f6e:	e3dc      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004f70:	4b62      	ldr	r3, [pc, #392]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d10d      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f82:	d109      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f84:	4b5d      	ldr	r3, [pc, #372]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	08db      	lsrs	r3, r3, #3
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	4a5c      	ldr	r2, [pc, #368]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f96:	e010      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004f98:	4b58      	ldr	r3, [pc, #352]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fac:	d102      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8004fae:	4b55      	ldr	r3, [pc, #340]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb2:	e002      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fb8:	e3b7      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004fba:	e3b6      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004fbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fc2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fce:	f7fe fb39 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004fd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004fd4:	e3a9      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fdc:	d107      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fb00 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fec:	e39d      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004fee:	4b43      	ldr	r3, [pc, #268]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d10d      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005000:	d109      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	08db      	lsrs	r3, r3, #3
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	4a3c      	ldr	r2, [pc, #240]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005014:	e010      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005016:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800501e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005022:	d106      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800502a:	d102      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 800502c:	4b35      	ldr	r3, [pc, #212]	@ (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800502e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005036:	e378      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005038:	e377      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800503a:	4b30      	ldr	r3, [pc, #192]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800503c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005040:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800504c:	f7fe fafa 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8005050:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005052:	e36a      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800505a:	d107      	bne.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fac1 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800506a:	e35e      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800506c:	4b23      	ldr	r3, [pc, #140]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b02      	cmp	r3, #2
 8005076:	d10d      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800507e:	d109      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005080:	4b1e      	ldr	r3, [pc, #120]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	4a1d      	ldr	r2, [pc, #116]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005092:	e34a      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005098:	e347      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800509a:	4b18      	ldr	r3, [pc, #96]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800509c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050a0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80050a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80050ac:	f7fe faf6 	bl	800369c <HAL_RCC_GetPCLK3Freq>
 80050b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80050b2:	e33a      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050ba:	d107      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fa91 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050ca:	e32e      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80050cc:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d10d      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050de:	d109      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	4a05      	ldr	r2, [pc, #20]	@ (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050f2:	e31a      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050f8:	e317      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80050fa:	bf00      	nop
 80050fc:	44020c00 	.word	0x44020c00
 8005100:	03d09000 	.word	0x03d09000
 8005104:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005108:	4b9b      	ldr	r3, [pc, #620]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800510a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800510e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005112:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800511a:	d044      	beq.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005122:	d879      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512a:	d02d      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005132:	d871      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800513a:	d017      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005142:	d869      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005150:	d004      	beq.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8005152:	e061      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005154:	f7fe faa2 	bl	800369c <HAL_RCC_GetPCLK3Freq>
 8005158:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800515a:	e060      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fa41 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800516a:	e058      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800516c:	4b82      	ldr	r3, [pc, #520]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800516e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d103      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005180:	e04d      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005186:	e04a      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005188:	4b7b      	ldr	r3, [pc, #492]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800518a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800518e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005196:	d103      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8005198:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800519c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800519e:	e03e      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80051a4:	e03b      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051a6:	4b74      	ldr	r3, [pc, #464]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051b2:	4b71      	ldr	r3, [pc, #452]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	08db      	lsrs	r3, r3, #3
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	4a6b      	ldr	r2, [pc, #428]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d6:	e01e      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051d8:	4b67      	ldr	r3, [pc, #412]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e4:	d106      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ec:	d102      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80051ee:	4b64      	ldr	r3, [pc, #400]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f2:	e010      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051f4:	4b60      	ldr	r3, [pc, #384]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005200:	d106      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005208:	d102      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800520a:	4b5e      	ldr	r3, [pc, #376]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520e:	e002      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005214:	e003      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8005216:	e002      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800521c:	bf00      	nop
          }
        }
        break;
 800521e:	e284      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005220:	4b55      	ldr	r3, [pc, #340]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005222:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005226:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005232:	d044      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800523a:	d879      	bhi.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005242:	d02d      	beq.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8005244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800524a:	d871      	bhi.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005252:	d017      	beq.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800525a:	d869      	bhi.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005268:	d004      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800526a:	e061      	b.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800526c:	f7fe f9ea 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8005270:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8005272:	e060      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005274:	f107 030c 	add.w	r3, r7, #12
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff f9b5 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005282:	e058      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005284:	4b3c      	ldr	r3, [pc, #240]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d103      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005296:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005298:	e04d      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800529e:	e04a      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80052a0:	4b35      	ldr	r3, [pc, #212]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80052a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ae:	d103      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 80052b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80052b6:	e03e      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80052bc:	e03b      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052be:	4b2e      	ldr	r3, [pc, #184]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80052c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80052c8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052dc:	4b26      	ldr	r3, [pc, #152]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	4a25      	ldr	r2, [pc, #148]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ee:	e01e      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052f0:	4b21      	ldr	r3, [pc, #132]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005304:	d102      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005306:	4b1e      	ldr	r3, [pc, #120]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8005308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800530a:	e010      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800530c:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005318:	d106      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005320:	d102      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005322:	4b18      	ldr	r3, [pc, #96]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005326:	e002      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800532c:	e003      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800532e:	e002      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005334:	bf00      	nop
          }
        }
        break;
 8005336:	e1f8      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005338:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800533a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800533e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005342:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005344:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005350:	d105      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8005358:	4b0a      	ldr	r3, [pc, #40]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800535c:	e1e5      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005364:	d110      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005366:	f107 0318 	add.w	r3, r7, #24
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe ffd0 	bl	8004310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005374:	e1d9      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005376:	bf00      	nop
 8005378:	44020c00 	.word	0x44020c00
 800537c:	03d09000 	.word	0x03d09000
 8005380:	003d0900 	.word	0x003d0900
 8005384:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538e:	d107      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005390:	f107 030c 	add.w	r3, r7, #12
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff f927 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800539e:	e1c4      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053a4:	e1c1      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80053a6:	4b9d      	ldr	r3, [pc, #628]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d859      	bhi.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053d5 	.word	0x080053d5
 80053c4:	080053e5 	.word	0x080053e5
 80053c8:	0800546d 	.word	0x0800546d
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053fb 	.word	0x080053fb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d4:	f107 0318 	add.w	r3, r7, #24
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe ff99 	bl	8004310 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80053e2:	e046      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff f8fd 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80053f2:	e03e      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80053f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80053f8:	e03b      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053fa:	4b88      	ldr	r3, [pc, #544]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005400:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005406:	4b85      	ldr	r3, [pc, #532]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b02      	cmp	r3, #2
 8005410:	d10c      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005418:	4b80      	ldr	r3, [pc, #512]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	08db      	lsrs	r3, r3, #3
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	4a80      	ldr	r2, [pc, #512]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
 8005428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800542a:	e01e      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800542c:	4b7b      	ldr	r3, [pc, #492]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005438:	d106      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005440:	d102      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005442:	4b79      	ldr	r3, [pc, #484]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005446:	e010      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005448:	4b74      	ldr	r3, [pc, #464]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005454:	d106      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800545c:	d102      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800545e:	4b73      	ldr	r3, [pc, #460]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005462:	e002      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800546a:	e002      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005470:	bf00      	nop
          }
        }
        break;
 8005472:	e15a      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005474:	4b69      	ldr	r3, [pc, #420]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800547a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800547e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	2b20      	cmp	r3, #32
 8005484:	d022      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8005486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005488:	2b20      	cmp	r3, #32
 800548a:	d858      	bhi.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	2b18      	cmp	r3, #24
 8005490:	d019      	beq.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	2b18      	cmp	r3, #24
 8005496:	d852      	bhi.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d008      	beq.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80054a4:	e04b      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054a6:	f107 0318 	add.w	r3, r7, #24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe ff30 	bl	8004310 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80054b4:	e046      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054b6:	f107 030c 	add.w	r3, r7, #12
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff f894 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80054c4:	e03e      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80054c6:	4b56      	ldr	r3, [pc, #344]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80054c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80054ca:	e03b      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054cc:	4b53      	ldr	r3, [pc, #332]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054d2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054d8:	4b50      	ldr	r3, [pc, #320]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d10c      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054ea:	4b4c      	ldr	r3, [pc, #304]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	08db      	lsrs	r3, r3, #3
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054fc:	e01e      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054fe:	4b47      	ldr	r3, [pc, #284]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800550a:	d106      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d102      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005514:	4b44      	ldr	r3, [pc, #272]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005518:	e010      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800551a:	4b40      	ldr	r3, [pc, #256]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005526:	d106      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800552e:	d102      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005530:	4b3e      	ldr	r3, [pc, #248]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005534:	e002      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800553a:	e003      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005542:	bf00      	nop
          }
        }
        break;
 8005544:	e0f1      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005546:	4b35      	ldr	r3, [pc, #212]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800554c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005558:	d023      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005560:	d858      	bhi.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	2bc0      	cmp	r3, #192	@ 0xc0
 8005566:	d019      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	2bc0      	cmp	r3, #192	@ 0xc0
 800556c:	d852      	bhi.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d008      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800557a:	e04b      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800557c:	f107 0318 	add.w	r3, r7, #24
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe fec5 	bl	8004310 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800558a:	e046      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800558c:	f107 030c 	add.w	r3, r7, #12
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff f829 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800559a:	e03e      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800559c:	4b20      	ldr	r3, [pc, #128]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800559e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80055a0:	e03b      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055a2:	4b1e      	ldr	r3, [pc, #120]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055ae:	4b1b      	ldr	r3, [pc, #108]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055c0:	4b16      	ldr	r3, [pc, #88]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	08db      	lsrs	r3, r3, #3
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	4a16      	ldr	r2, [pc, #88]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d2:	e01e      	b.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055d4:	4b11      	ldr	r3, [pc, #68]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e0:	d106      	bne.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e8:	d102      	bne.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80055ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80055ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ee:	e010      	b.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055f0:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055fc:	d106      	bne.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005604:	d102      	bne.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005606:	4b09      	ldr	r3, [pc, #36]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560a:	e002      	b.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005610:	e003      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005612:	e002      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005618:	bf00      	nop
          }
        }
        break;
 800561a:	e086      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800561c:	44020c00 	.word	0x44020c00
 8005620:	00bb8000 	.word	0x00bb8000
 8005624:	03d09000 	.word	0x03d09000
 8005628:	003d0900 	.word	0x003d0900
 800562c:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005630:	4b40      	ldr	r3, [pc, #256]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005636:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800563c:	4b3d      	ldr	r3, [pc, #244]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005648:	d105      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005650:	4b39      	ldr	r3, [pc, #228]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005654:	e031      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005656:	4b37      	ldr	r3, [pc, #220]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005662:	d10a      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	2b10      	cmp	r3, #16
 8005668:	d107      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800566a:	f107 0318 	add.w	r3, r7, #24
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fe4e 	bl	8004310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005678:	e01f      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800567a:	4b2e      	ldr	r3, [pc, #184]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800567c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d106      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	2b20      	cmp	r3, #32
 800568c:	d103      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800568e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005694:	e011      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005696:	4b27      	ldr	r3, [pc, #156]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800569c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056a4:	d106      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a8:	2b30      	cmp	r3, #48	@ 0x30
 80056aa:	d103      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80056ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80056b8:	e037      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80056ba:	e036      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80056bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80056be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	2b10      	cmp	r3, #16
 80056cc:	d107      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056ce:	f107 0318 	add.w	r3, r7, #24
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe fe1c 	bl	8004310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80056dc:	e025      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80056de:	4b15      	ldr	r3, [pc, #84]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056ea:	d10a      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80056ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d107      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe ff76 	bl	80045e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005700:	e00f      	b.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005702:	4b0c      	ldr	r3, [pc, #48]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570e:	d105      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	2b30      	cmp	r3, #48	@ 0x30
 8005714:	d102      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8005716:	4b08      	ldr	r3, [pc, #32]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800571a:	e002      	b.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8005720:	e003      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005722:	e002      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005728:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800572c:	4618      	mov	r0, r3
 800572e:	3730      	adds	r7, #48	@ 0x30
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	44020c00 	.word	0x44020c00
 8005738:	02dc6c00 	.word	0x02dc6c00

0800573c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005744:	4b48      	ldr	r3, [pc, #288]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a47      	ldr	r2, [pc, #284]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 800574a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800574e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005750:	f7fb fe5e 	bl	8001410 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005756:	e008      	b.n	800576a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005758:	f7fb fe5a 	bl	8001410 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e07a      	b.n	8005860 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800576a:	4b3f      	ldr	r3, [pc, #252]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005776:	4b3c      	ldr	r3, [pc, #240]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6852      	ldr	r2, [r2, #4]
 800578a:	0212      	lsls	r2, r2, #8
 800578c:	430a      	orrs	r2, r1
 800578e:	4936      	ldr	r1, [pc, #216]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005790:	4313      	orrs	r3, r2
 8005792:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	3b01      	subs	r3, #1
 800579a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	025b      	lsls	r3, r3, #9
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	3b01      	subs	r3, #1
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057c4:	4928      	ldr	r1, [pc, #160]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80057ca:	4b27      	ldr	r3, [pc, #156]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	f023 020c 	bic.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	4924      	ldr	r1, [pc, #144]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80057dc:	4b22      	ldr	r3, [pc, #136]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	f023 0220 	bic.w	r2, r3, #32
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	491f      	ldr	r1, [pc, #124]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80057ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	491c      	ldr	r1, [pc, #112]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80057fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005800:	4a19      	ldr	r2, [pc, #100]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005802:	f023 0310 	bic.w	r3, r3, #16
 8005806:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005808:	4b17      	ldr	r3, [pc, #92]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005810:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6a12      	ldr	r2, [r2, #32]
 8005818:	00d2      	lsls	r2, r2, #3
 800581a:	4913      	ldr	r1, [pc, #76]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005820:	4b11      	ldr	r3, [pc, #68]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	4a10      	ldr	r2, [pc, #64]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005826:	f043 0310 	orr.w	r3, r3, #16
 800582a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800582c:	4b0e      	ldr	r3, [pc, #56]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0d      	ldr	r2, [pc, #52]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005836:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005838:	f7fb fdea 	bl	8001410 <HAL_GetTick>
 800583c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800583e:	e008      	b.n	8005852 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005840:	f7fb fde6 	bl	8001410 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e006      	b.n	8005860 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005852:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <RCCEx_PLL2_Config+0x12c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0

}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	44020c00 	.word	0x44020c00

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e049      	b.n	8005912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fb f916 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 facc 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d101      	bne.n	800593a <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
 8005938:	e067      	b.n	8005a0a <HAL_TIM_Base_Start_DMA+0xee>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d125      	bne.n	8005992 <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) || (Length == 0U))
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_TIM_Base_Start_DMA+0x36>
 800594c:	88fb      	ldrh	r3, [r7, #6]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e059      	b.n	8005a0a <HAL_TIM_Base_Start_DMA+0xee>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	4a2c      	ldr	r2, [pc, #176]	@ (8005a14 <HAL_TIM_Base_Start_DMA+0xf8>)
 8005964:	661a      	str	r2, [r3, #96]	@ 0x60
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a18 <HAL_TIM_Base_Start_DMA+0xfc>)
 800596c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4a2a      	ldr	r2, [pc, #168]	@ (8005a1c <HAL_TIM_Base_Start_DMA+0x100>)
 8005974:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the DMA channel */
  if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a18      	ldr	r0, [r3, #32]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	332c      	adds	r3, #44	@ 0x2c
 8005982:	461a      	mov	r2, r3
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	f000 f9a1 	bl	8005ccc <TIM_DMA_Start_IT>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_TIM_Base_Start_DMA+0x7e>
 8005990:	e001      	b.n	8005996 <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e039      	b.n	8005a0a <HAL_TIM_Base_Start_DMA+0xee>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e037      	b.n	8005a0a <HAL_TIM_Base_Start_DMA+0xee>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005a20 <HAL_TIM_Base_Start_DMA+0x104>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_TIM_Base_Start_DMA+0xac>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059bc:	d004      	beq.n	80059c8 <HAL_TIM_Base_Start_DMA+0xac>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a18      	ldr	r2, [pc, #96]	@ (8005a24 <HAL_TIM_Base_Start_DMA+0x108>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d115      	bne.n	80059f4 <HAL_TIM_Base_Start_DMA+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	4b16      	ldr	r3, [pc, #88]	@ (8005a28 <HAL_TIM_Base_Start_DMA+0x10c>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d015      	beq.n	8005a06 <HAL_TIM_Base_Start_DMA+0xea>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d011      	beq.n	8005a06 <HAL_TIM_Base_Start_DMA+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	e008      	b.n	8005a06 <HAL_TIM_Base_Start_DMA+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e000      	b.n	8005a08 <HAL_TIM_Base_Start_DMA+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	08005e11 	.word	0x08005e11
 8005a18:	08005e2d 	.word	0x08005e2d
 8005a1c:	08005d7f 	.word	0x08005d7f
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40000400 	.word	0x40000400
 8005a28:	00010007 	.word	0x00010007

08005a2c <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a42:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fc f853 	bl	8001af4 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10f      	bne.n	8005a7e <HAL_TIM_Base_Stop_DMA+0x52>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d107      	bne.n	8005a7e <HAL_TIM_Base_Stop_DMA+0x52>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_ConfigClockSource+0x1c>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e0fe      	b.n	8005caa <HAL_TIM_ConfigClockSource+0x21a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005aca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ae8:	f000 80c9 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af0:	f200 80ce 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005af4:	4a6f      	ldr	r2, [pc, #444]	@ (8005cb4 <HAL_TIM_ConfigClockSource+0x224>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f000 80c1 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005afc:	4a6d      	ldr	r2, [pc, #436]	@ (8005cb4 <HAL_TIM_ConfigClockSource+0x224>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	f200 80c6 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b04:	4a6c      	ldr	r2, [pc, #432]	@ (8005cb8 <HAL_TIM_ConfigClockSource+0x228>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	f000 80b9 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8005cb8 <HAL_TIM_ConfigClockSource+0x228>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f200 80be 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b14:	4a69      	ldr	r2, [pc, #420]	@ (8005cbc <HAL_TIM_ConfigClockSource+0x22c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	f000 80b1 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005b1c:	4a67      	ldr	r2, [pc, #412]	@ (8005cbc <HAL_TIM_ConfigClockSource+0x22c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	f200 80b6 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b24:	4a66      	ldr	r2, [pc, #408]	@ (8005cc0 <HAL_TIM_ConfigClockSource+0x230>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	f000 80a9 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005b2c:	4a64      	ldr	r2, [pc, #400]	@ (8005cc0 <HAL_TIM_ConfigClockSource+0x230>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	f200 80ae 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b34:	4a63      	ldr	r2, [pc, #396]	@ (8005cc4 <HAL_TIM_ConfigClockSource+0x234>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	f000 80a1 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005b3c:	4a61      	ldr	r2, [pc, #388]	@ (8005cc4 <HAL_TIM_ConfigClockSource+0x234>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	f200 80a6 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b44:	4a60      	ldr	r2, [pc, #384]	@ (8005cc8 <HAL_TIM_ConfigClockSource+0x238>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	f000 8099 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005b4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005cc8 <HAL_TIM_ConfigClockSource+0x238>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	f200 809e 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b58:	f000 8091 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005b5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b60:	f200 8096 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b68:	f000 8089 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b70:	f200 808e 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b78:	d03e      	beq.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7e:	f200 8087 	bhi.w	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b86:	f000 8086 	beq.w	8005c96 <HAL_TIM_ConfigClockSource+0x206>
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b8e:	d87f      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b90:	2b70      	cmp	r3, #112	@ 0x70
 8005b92:	d01a      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0x13a>
 8005b94:	2b70      	cmp	r3, #112	@ 0x70
 8005b96:	d87b      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005b98:	2b60      	cmp	r3, #96	@ 0x60
 8005b9a:	d050      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b9c:	2b60      	cmp	r3, #96	@ 0x60
 8005b9e:	d877      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005ba0:	2b50      	cmp	r3, #80	@ 0x50
 8005ba2:	d03c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x18e>
 8005ba4:	2b50      	cmp	r3, #80	@ 0x50
 8005ba6:	d873      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005ba8:	2b40      	cmp	r3, #64	@ 0x40
 8005baa:	d058      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x1ce>
 8005bac:	2b40      	cmp	r3, #64	@ 0x40
 8005bae:	d86f      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005bb0:	2b30      	cmp	r3, #48	@ 0x30
 8005bb2:	d064      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005bb4:	2b30      	cmp	r3, #48	@ 0x30
 8005bb6:	d86b      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d060      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d867      	bhi.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d05c      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d05a      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x1ee>
 8005bc8:	e062      	b.n	8005c90 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bda:	f000 fa17 	bl	800600c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	609a      	str	r2, [r3, #8]
      break;
 8005bf6:	e04f      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c08:	f000 fa00 	bl	800600c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c1a:	609a      	str	r2, [r3, #8]
      break;
 8005c1c:	e03c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f000 f972 	bl	8005f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2150      	movs	r1, #80	@ 0x50
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f9cb 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005c3c:	e02c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f000 f991 	bl	8005f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2160      	movs	r1, #96	@ 0x60
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f9bb 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005c5c:	e01c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f000 f952 	bl	8005f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2140      	movs	r1, #64	@ 0x40
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f9ab 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005c7c:	e00c      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f000 f9a2 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005c8e:	e003      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      break;
 8005c94:	e000      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8005c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	00100070 	.word	0x00100070
 8005cb8:	00100060 	.word	0x00100060
 8005cbc:	00100050 	.word	0x00100050
 8005cc0:	00100040 	.word	0x00100040
 8005cc4:	00100030 	.word	0x00100030
 8005cc8:	00100020 	.word	0x00100020

08005ccc <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d020      	beq.n	8005d28 <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d019      	beq.n	8005d22 <TIM_DMA_Start_IT+0x56>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d014      	beq.n	8005d22 <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7fc fa78 	bl	800220c <HAL_DMAEx_List_Start_IT>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	75fb      	strb	r3, [r7, #23]
 8005d20:	e00a      	b.n	8005d38 <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
 8005d26:	e007      	b.n	8005d38 <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7fb fe04 	bl	800193c <HAL_DMA_Start_IT>
 8005d34:	4603      	mov	r3, r0
 8005d36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d107      	bne.n	8005da6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005da4:	e02a      	b.n	8005dfc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d107      	bne.n	8005dc0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2202      	movs	r2, #2
 8005db4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dbe:	e01d      	b.n	8005dfc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d107      	bne.n	8005dda <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dd8:	e010      	b.n	8005dfc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d107      	bne.n	8005df4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2208      	movs	r2, #8
 8005de8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005df2:	e003      	b.n	8005dfc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff ffb4 	bl	8005d6a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f7ff ff8f 	bl	8005d42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ff8b 	bl	8005d56 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005f0c <TIM_Base_SetConfig+0xc4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <TIM_Base_SetConfig+0x28>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e66:	d003      	beq.n	8005e70 <TIM_Base_SetConfig+0x28>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a29      	ldr	r2, [pc, #164]	@ (8005f10 <TIM_Base_SetConfig+0xc8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a21      	ldr	r2, [pc, #132]	@ (8005f0c <TIM_Base_SetConfig+0xc4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0x52>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0x52>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <TIM_Base_SetConfig+0xc8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8005f0c <TIM_Base_SetConfig+0xc4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d103      	bne.n	8005ee0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d105      	bne.n	8005efe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f023 0201 	bic.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]
  }
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40000400 	.word	0x40000400

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f023 0210 	bic.w	r2, r3, #16
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f043 0307 	orr.w	r3, r3, #7
 8005ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	609a      	str	r2, [r3, #8]
}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	021a      	lsls	r2, r3, #8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	431a      	orrs	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4313      	orrs	r3, r2
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	609a      	str	r2, [r3, #8]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e051      	b.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	@ (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006094:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a14      	ldr	r2, [pc, #80]	@ (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d0:	d004      	beq.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a10      	ldr	r2, [pc, #64]	@ (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40000400 	.word	0x40000400

0800611c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e042      	b.n	80061b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fa fd27 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2224      	movs	r2, #36	@ 0x24
 800614a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fe70 	bl	8006e4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fcef 	bl	8006b50 <UART_SetConfig>
 8006172:	4603      	mov	r3, r0
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e01b      	b.n	80061b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800618a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800619a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 feef 	bl	8006f90 <UART_CheckIdleState>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061bc:	b480      	push	{r7}
 80061be:	b091      	sub	sp, #68	@ 0x44
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	f040 8088 	bne.w	80062e6 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_UART_Transmit_IT+0x26>
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e080      	b.n	80062e8 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f0:	2b80      	cmp	r3, #128	@ 0x80
 80061f2:	d107      	bne.n	8006204 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006202:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2221      	movs	r2, #33	@ 0x21
 800622c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006238:	d12a      	bne.n	8006290 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006242:	d107      	bne.n	8006254 <HAL_UART_Transmit_IT+0x98>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a29      	ldr	r2, [pc, #164]	@ (80062f4 <HAL_UART_Transmit_IT+0x138>)
 8006250:	679a      	str	r2, [r3, #120]	@ 0x78
 8006252:	e002      	b.n	800625a <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a28      	ldr	r2, [pc, #160]	@ (80062f8 <HAL_UART_Transmit_IT+0x13c>)
 8006258:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006270:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800627a:	637a      	str	r2, [r7, #52]	@ 0x34
 800627c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <HAL_UART_Transmit_IT+0x9e>
 800628e:	e028      	b.n	80062e2 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006298:	d107      	bne.n	80062aa <HAL_UART_Transmit_IT+0xee>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <HAL_UART_Transmit_IT+0x140>)
 80062a6:	679a      	str	r2, [r3, #120]	@ 0x78
 80062a8:	e002      	b.n	80062b0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <HAL_UART_Transmit_IT+0x144>)
 80062ae:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	613b      	str	r3, [r7, #16]
   return(result);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	69f9      	ldr	r1, [r7, #28]
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	61bb      	str	r3, [r7, #24]
   return(result);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e6      	bne.n	80062b0 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e000      	b.n	80062e8 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3744      	adds	r7, #68	@ 0x44
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	08007799 	.word	0x08007799
 80062f8:	080076b9 	.word	0x080076b9
 80062fc:	080075f7 	.word	0x080075f7
 8006300:	0800753f 	.word	0x0800753f

08006304 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	@ 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006318:	2b20      	cmp	r3, #32
 800631a:	d146      	bne.n	80063aa <HAL_UART_Receive_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_UART_Receive_IT+0x24>
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e03f      	b.n	80063ac <HAL_UART_Receive_IT+0xa8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633c:	2b40      	cmp	r3, #64	@ 0x40
 800633e:	d107      	bne.n	8006350 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800634e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a17      	ldr	r2, [pc, #92]	@ (80063b4 <HAL_UART_Receive_IT+0xb0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01f      	beq.n	800639a <HAL_UART_Receive_IT+0x96>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d018      	beq.n	800639a <HAL_UART_Receive_IT+0x96>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	613b      	str	r3, [r7, #16]
   return(result);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	623b      	str	r3, [r7, #32]
 8006388:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	69f9      	ldr	r1, [r7, #28]
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	61bb      	str	r3, [r7, #24]
   return(result);
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e6      	bne.n	8006368 <HAL_UART_Receive_IT+0x64>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	461a      	mov	r2, r3
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 ff0d 	bl	80071c0 <UART_Start_Receive_IT>
 80063a6:	4603      	mov	r3, r0
 80063a8:	e000      	b.n	80063ac <HAL_UART_Receive_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80063aa:	2302      	movs	r3, #2
  }
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3728      	adds	r7, #40	@ 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	44002400 	.word	0x44002400

080063b8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b094      	sub	sp, #80	@ 0x50
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063de:	643b      	str	r3, [r7, #64]	@ 0x40
 80063e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e6      	bne.n	80063c0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	61fb      	str	r3, [r7, #28]
   return(result);
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3308      	adds	r3, #8
 8006414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800641c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e3      	bne.n	80063f2 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800642e:	2b01      	cmp	r3, #1
 8006430:	d118      	bne.n	8006464 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f023 0310 	bic.w	r3, r3, #16
 8006446:	647b      	str	r3, [r7, #68]	@ 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	613b      	str	r3, [r7, #16]
   return(result);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e6      	bne.n	8006432 <HAL_UART_AbortReceive_IT+0x7a>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d13a      	bne.n	80064e8 <HAL_UART_AbortReceive_IT+0x130>
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d017      	beq.n	80064ac <HAL_UART_AbortReceive_IT+0xf4>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006482:	4a26      	ldr	r2, [pc, #152]	@ (800651c <HAL_UART_AbortReceive_IT+0x164>)
 8006484:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648c:	4618      	mov	r0, r3
 800648e:	f7fb fb31 	bl	8001af4 <HAL_DMA_Abort_IT>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d03c      	beq.n	8006512 <HAL_UART_AbortReceive_IT+0x15a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800649e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80064a6:	4610      	mov	r0, r2
 80064a8:	4798      	blx	r3
 80064aa:	e032      	b.n	8006512 <HAL_UART_AbortReceive_IT+0x15a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	220f      	movs	r2, #15
 80064c0:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0208 	orr.w	r2, r2, #8
 80064d0:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fb1f 	bl	8006b24 <HAL_UART_AbortReceiveCpltCallback>
 80064e6:	e014      	b.n	8006512 <HAL_UART_AbortReceive_IT+0x15a>
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	220f      	movs	r2, #15
 80064fc:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fb09 	bl	8006b24 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3750      	adds	r7, #80	@ 0x50
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	080074f5 	.word	0x080074f5

08006520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b0ae      	sub	sp, #184	@ 0xb8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800654a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800654e:	4013      	ands	r3, r2
 8006550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8006554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11b      	bne.n	8006594 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800655c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d015      	beq.n	8006594 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d009      	beq.n	8006594 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 82ac 	beq.w	8006ae2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
      }
      return;
 8006592:	e2a6      	b.n	8006ae2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80fd 	beq.w	8006798 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800659e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065a2:	4b7a      	ldr	r3, [pc, #488]	@ (800678c <HAL_UART_IRQHandler+0x26c>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065ae:	4b78      	ldr	r3, [pc, #480]	@ (8006790 <HAL_UART_IRQHandler+0x270>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80f0 	beq.w	8006798 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d011      	beq.n	80065e8 <HAL_UART_IRQHandler+0xc8>
 80065c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80065c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2201      	movs	r2, #1
 80065d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065de:	f043 0201 	orr.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d011      	beq.n	8006618 <HAL_UART_IRQHandler+0xf8>
 80065f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2202      	movs	r2, #2
 8006606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660e:	f043 0204 	orr.w	r2, r3, #4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006618:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d011      	beq.n	8006648 <HAL_UART_IRQHandler+0x128>
 8006624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2204      	movs	r2, #4
 8006636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663e:	f043 0202 	orr.w	r2, r3, #2
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006654:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d105      	bne.n	800666c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006660:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006664:	4b49      	ldr	r3, [pc, #292]	@ (800678c <HAL_UART_IRQHandler+0x26c>)
 8006666:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2208      	movs	r2, #8
 8006672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667a:	f043 0208 	orr.w	r2, r3, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800668c:	2b00      	cmp	r3, #0
 800668e:	d012      	beq.n	80066b6 <HAL_UART_IRQHandler+0x196>
 8006690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006694:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00c      	beq.n	80066b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8212 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d013      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670a:	2b40      	cmp	r3, #64	@ 0x40
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800670e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006712:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02e      	beq.n	8006778 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fe72 	bl	8007404 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b40      	cmp	r3, #64	@ 0x40
 800672c:	d120      	bne.n	8006770 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d017      	beq.n	8006768 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800673e:	4a15      	ldr	r2, [pc, #84]	@ (8006794 <HAL_UART_IRQHandler+0x274>)
 8006740:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006748:	4618      	mov	r0, r3
 800674a:	f7fb f9d3 	bl	8001af4 <HAL_DMA_Abort_IT>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d019      	beq.n	8006788 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006762:	4610      	mov	r0, r2
 8006764:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006766:	e00f      	b.n	8006788 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f9d1 	bl	8006b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676e:	e00b      	b.n	8006788 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f9cd 	bl	8006b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006776:	e007      	b.n	8006788 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f9c9 	bl	8006b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006786:	e1ae      	b.n	8006ae6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	bf00      	nop
    return;
 800678a:	e1ac      	b.n	8006ae6 <HAL_UART_IRQHandler+0x5c6>
 800678c:	10000001 	.word	0x10000001
 8006790:	04000120 	.word	0x04000120
 8006794:	080074d1 	.word	0x080074d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 8142 	bne.w	8006a26 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 813b 	beq.w	8006a26 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8134 	beq.w	8006a26 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2210      	movs	r2, #16
 80067c4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d0:	2b40      	cmp	r3, #64	@ 0x40
 80067d2:	f040 80aa 	bne.w	800692a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067e0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80067e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8084 	beq.w	80068f6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067f4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d27c      	bcs.n	80068f6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006802:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680e:	2b81      	cmp	r3, #129	@ 0x81
 8006810:	d060      	beq.n	80068d4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006820:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006822:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006838:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800683c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e2      	bne.n	8006812 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3308      	adds	r3, #8
 8006852:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800685c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006870:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006872:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006876:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800687e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e3      	bne.n	800684c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a2:	f023 0310 	bic.w	r3, r3, #16
 80068a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e4      	bne.n	8006892 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fb f894 	bl	80019fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f922 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80068f4:	e0f9      	b.n	8006aea <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068fc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006900:	429a      	cmp	r2, r3
 8006902:	f040 80f2 	bne.w	8006aea <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800690e:	2b81      	cmp	r3, #129	@ 0x81
 8006910:	f040 80eb 	bne.w	8006aea <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f908 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
      return;
 8006928:	e0df      	b.n	8006aea <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006936:	b29b      	uxth	r3, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80d1 	beq.w	8006aee <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800694c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80cc 	beq.w	8006aee <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800696a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006978:	647b      	str	r3, [r7, #68]	@ 0x44
 800697a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800697e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e4      	bne.n	8006956 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	623b      	str	r3, [r7, #32]
   return(result);
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80069b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e1      	bne.n	800698c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f023 0310 	bic.w	r3, r3, #16
 80069f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e4      	bne.n	80069dc <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f88a 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a24:	e063      	b.n	8006aee <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <HAL_UART_IRQHandler+0x530>
 8006a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fc65 	bl	8008318 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a4e:	e051      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d014      	beq.n	8006a86 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d105      	bne.n	8006a74 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d03a      	beq.n	8006af2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
    }
    return;
 8006a84:	e035      	b.n	8006af2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d009      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x586>
 8006a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 feef 	bl	8007882 <UART_EndTransmit_IT>
    return;
 8006aa4:	e026      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x5a6>
 8006ab2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006ab6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fc3e 	bl	8008340 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac4:	e016      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d010      	beq.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
 8006ad2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	da0c      	bge.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fc26 	bl	800832c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ae0:	e008      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8006ae2:	bf00      	nop
 8006ae4:	e006      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8006ae6:	bf00      	nop
 8006ae8:	e004      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8006aea:	bf00      	nop
 8006aec:	e002      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8006aee:	bf00      	nop
 8006af0:	e000      	b.n	8006af4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8006af2:	bf00      	nop
  }
}
 8006af4:	37b8      	adds	r7, #184	@ 0xb8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop

08006afc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b54:	b094      	sub	sp, #80	@ 0x50
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	498a      	ldr	r1, [pc, #552]	@ (8006da8 <UART_SetConfig+0x258>)
 8006b80:	4019      	ands	r1, r3
 8006b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	68d9      	ldr	r1, [r3, #12]
 8006b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	ea40 0301 	orr.w	r3, r0, r1
 8006ba2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b7f      	ldr	r3, [pc, #508]	@ (8006dac <UART_SetConfig+0x25c>)
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d004      	beq.n	8006bbe <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006bc8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	f023 000f 	bic.w	r0, r3, #15
 8006be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	ea40 0301 	orr.w	r3, r0, r1
 8006bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8006db0 <UART_SetConfig+0x260>)
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d102      	bne.n	8006bfe <UART_SetConfig+0xae>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bfc:	e01a      	b.n	8006c34 <UART_SetConfig+0xe4>
 8006bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b6c      	ldr	r3, [pc, #432]	@ (8006db4 <UART_SetConfig+0x264>)
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d102      	bne.n	8006c0e <UART_SetConfig+0xbe>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c0c:	e012      	b.n	8006c34 <UART_SetConfig+0xe4>
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b69      	ldr	r3, [pc, #420]	@ (8006db8 <UART_SetConfig+0x268>)
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d102      	bne.n	8006c1e <UART_SetConfig+0xce>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c1c:	e00a      	b.n	8006c34 <UART_SetConfig+0xe4>
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b62      	ldr	r3, [pc, #392]	@ (8006dac <UART_SetConfig+0x25c>)
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d103      	bne.n	8006c30 <UART_SetConfig+0xe0>
 8006c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c2e:	e001      	b.n	8006c34 <UART_SetConfig+0xe4>
 8006c30:	2300      	movs	r3, #0
 8006c32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b5c      	ldr	r3, [pc, #368]	@ (8006dac <UART_SetConfig+0x25c>)
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d171      	bne.n	8006d22 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c40:	2200      	movs	r2, #0
 8006c42:	623b      	str	r3, [r7, #32]
 8006c44:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c4a:	f7fd fe39 	bl	80048c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c4e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80e2 	beq.w	8006e1c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5c:	4a57      	ldr	r2, [pc, #348]	@ (8006dbc <UART_SetConfig+0x26c>)
 8006c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c62:	461a      	mov	r2, r3
 8006c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	4413      	add	r3, r2
 8006c76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d305      	bcc.n	8006c88 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d903      	bls.n	8006c90 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006c8e:	e0c5      	b.n	8006e1c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c92:	2200      	movs	r2, #0
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	61fa      	str	r2, [r7, #28]
 8006c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	4a47      	ldr	r2, [pc, #284]	@ (8006dbc <UART_SetConfig+0x26c>)
 8006c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	617a      	str	r2, [r7, #20]
 8006caa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cb2:	f7f9 faf1 	bl	8000298 <__aeabi_uldivmod>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	020b      	lsls	r3, r1, #8
 8006cc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ccc:	0202      	lsls	r2, r0, #8
 8006cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cd0:	6849      	ldr	r1, [r1, #4]
 8006cd2:	0849      	lsrs	r1, r1, #1
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	4605      	mov	r5, r0
 8006cda:	eb12 0804 	adds.w	r8, r2, r4
 8006cde:	eb43 0905 	adc.w	r9, r3, r5
 8006ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	60fa      	str	r2, [r7, #12]
 8006cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	f7f9 fad0 	bl	8000298 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d06:	d308      	bcc.n	8006d1a <UART_SetConfig+0x1ca>
 8006d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d0e:	d204      	bcs.n	8006d1a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d16:	60da      	str	r2, [r3, #12]
 8006d18:	e080      	b.n	8006e1c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006d20:	e07c      	b.n	8006e1c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d2a:	d149      	bne.n	8006dc0 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d2e:	2200      	movs	r2, #0
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d38:	f7fd fdc2 	bl	80048c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d3c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d06b      	beq.n	8006e1c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	4a1c      	ldr	r2, [pc, #112]	@ (8006dbc <UART_SetConfig+0x26c>)
 8006d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d56:	005a      	lsls	r2, r3, #1
 8006d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	441a      	add	r2, r3
 8006d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d6c:	2b0f      	cmp	r3, #15
 8006d6e:	d916      	bls.n	8006d9e <UART_SetConfig+0x24e>
 8006d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d76:	d212      	bcs.n	8006d9e <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f023 030f 	bic.w	r3, r3, #15
 8006d80:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d90:	4313      	orrs	r3, r2
 8006d92:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e03e      	b.n	8006e1c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006da4:	e03a      	b.n	8006e1c <UART_SetConfig+0x2cc>
 8006da6:	bf00      	nop
 8006da8:	cfff69f3 	.word	0xcfff69f3
 8006dac:	44002400 	.word	0x44002400
 8006db0:	40013800 	.word	0x40013800
 8006db4:	40004400 	.word	0x40004400
 8006db8:	40004800 	.word	0x40004800
 8006dbc:	080085e4 	.word	0x080085e4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	469a      	mov	sl, r3
 8006dc6:	4693      	mov	fp, r2
 8006dc8:	4650      	mov	r0, sl
 8006dca:	4659      	mov	r1, fp
 8006dcc:	f7fd fd78 	bl	80048c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006dd0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d021      	beq.n	8006e1c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8006e48 <UART_SetConfig+0x2f8>)
 8006dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	441a      	add	r2, r3
 8006df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dfe:	2b0f      	cmp	r3, #15
 8006e00:	d909      	bls.n	8006e16 <UART_SetConfig+0x2c6>
 8006e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e08:	d205      	bcs.n	8006e16 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60da      	str	r2, [r3, #12]
 8006e14:	e002      	b.n	8006e1c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e26:	2201      	movs	r2, #1
 8006e28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2e:	2200      	movs	r2, #0
 8006e30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	2200      	movs	r2, #0
 8006e36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3750      	adds	r7, #80	@ 0x50
 8006e40:	46bd      	mov	sp, r7
 8006e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e46:	bf00      	nop
 8006e48:	080085e4 	.word	0x080085e4

08006e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebe:	f003 0304 	and.w	r3, r3, #4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f4a:	d10a      	bne.n	8006f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b098      	sub	sp, #96	@ 0x60
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa0:	f7fa fa36 	bl	8001410 <HAL_GetTick>
 8006fa4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d12f      	bne.n	8007014 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f88e 	bl	80070e4 <UART_WaitOnFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d022      	beq.n	8007014 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e6      	bne.n	8006fce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e063      	b.n	80070dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b04      	cmp	r3, #4
 8007020:	d149      	bne.n	80070b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007022:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800702a:	2200      	movs	r2, #0
 800702c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f857 	bl	80070e4 <UART_WaitOnFlagUntilTimeout>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d03c      	beq.n	80070b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	623b      	str	r3, [r7, #32]
   return(result);
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705a:	633b      	str	r3, [r7, #48]	@ 0x30
 800705c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60fb      	str	r3, [r7, #12]
   return(result);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800708e:	61fa      	str	r2, [r7, #28]
 8007090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	69b9      	ldr	r1, [r7, #24]
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	617b      	str	r3, [r7, #20]
   return(result);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e012      	b.n	80070dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3758      	adds	r7, #88	@ 0x58
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f4:	e04f      	b.n	8007196 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d04b      	beq.n	8007196 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fe:	f7fa f987 	bl	8001410 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	429a      	cmp	r2, r3
 800710c:	d302      	bcc.n	8007114 <UART_WaitOnFlagUntilTimeout+0x30>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e04e      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d037      	beq.n	8007196 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b80      	cmp	r3, #128	@ 0x80
 800712a:	d034      	beq.n	8007196 <UART_WaitOnFlagUntilTimeout+0xb2>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b40      	cmp	r3, #64	@ 0x40
 8007130:	d031      	beq.n	8007196 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b08      	cmp	r3, #8
 800713e:	d110      	bne.n	8007162 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2208      	movs	r2, #8
 8007146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 f95b 	bl	8007404 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2208      	movs	r2, #8
 8007152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e029      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800716c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007170:	d111      	bne.n	8007196 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800717a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f941 	bl	8007404 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e00f      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	bf0c      	ite	eq
 80071a6:	2301      	moveq	r3, #1
 80071a8:	2300      	movne	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d0a0      	beq.n	80070f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b0a3      	sub	sp, #140	@ 0x8c
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	88fa      	ldrh	r2, [r7, #6]
 80071d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f2:	d10e      	bne.n	8007212 <UART_Start_Receive_IT+0x52>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d105      	bne.n	8007208 <UART_Start_Receive_IT+0x48>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007202:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007206:	e02d      	b.n	8007264 <UART_Start_Receive_IT+0xa4>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	22ff      	movs	r2, #255	@ 0xff
 800720c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007210:	e028      	b.n	8007264 <UART_Start_Receive_IT+0xa4>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10d      	bne.n	8007236 <UART_Start_Receive_IT+0x76>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <UART_Start_Receive_IT+0x6c>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	22ff      	movs	r2, #255	@ 0xff
 8007226:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800722a:	e01b      	b.n	8007264 <UART_Start_Receive_IT+0xa4>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	227f      	movs	r2, #127	@ 0x7f
 8007230:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007234:	e016      	b.n	8007264 <UART_Start_Receive_IT+0xa4>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800723e:	d10d      	bne.n	800725c <UART_Start_Receive_IT+0x9c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <UART_Start_Receive_IT+0x92>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	227f      	movs	r2, #127	@ 0x7f
 800724c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007250:	e008      	b.n	8007264 <UART_Start_Receive_IT+0xa4>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	223f      	movs	r2, #63	@ 0x3f
 8007256:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800725a:	e003      	b.n	8007264 <UART_Start_Receive_IT+0xa4>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2222      	movs	r2, #34	@ 0x22
 8007270:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007298:	673a      	str	r2, [r7, #112]	@ 0x70
 800729a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800729e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80072a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e3      	bne.n	8007274 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072b4:	d14f      	bne.n	8007356 <UART_Start_Receive_IT+0x196>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d349      	bcc.n	8007356 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ca:	d107      	bne.n	80072dc <UART_Start_Receive_IT+0x11c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4a47      	ldr	r2, [pc, #284]	@ (80073f4 <UART_Start_Receive_IT+0x234>)
 80072d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80072da:	e002      	b.n	80072e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4a46      	ldr	r2, [pc, #280]	@ (80073f8 <UART_Start_Receive_IT+0x238>)
 80072e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d01a      	beq.n	8007320 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800730c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800730e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007312:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800731a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e4      	bne.n	80072ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007336:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007340:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007342:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800734e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e5      	bne.n	8007320 <UART_Start_Receive_IT+0x160>
 8007354:	e046      	b.n	80073e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735e:	d107      	bne.n	8007370 <UART_Start_Receive_IT+0x1b0>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a24      	ldr	r2, [pc, #144]	@ (80073fc <UART_Start_Receive_IT+0x23c>)
 800736c:	675a      	str	r2, [r3, #116]	@ 0x74
 800736e:	e002      	b.n	8007376 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a23      	ldr	r2, [pc, #140]	@ (8007400 <UART_Start_Receive_IT+0x240>)
 8007374:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d019      	beq.n	80073b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007392:	677b      	str	r3, [r7, #116]	@ 0x74
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_Start_Receive_IT+0x1be>
 80073b0:	e018      	b.n	80073e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	613b      	str	r3, [r7, #16]
   return(result);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f043 0320 	orr.w	r3, r3, #32
 80073c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d0:	623b      	str	r3, [r7, #32]
 80073d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	69f9      	ldr	r1, [r7, #28]
 80073d6:	6a3a      	ldr	r2, [r7, #32]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e6      	bne.n	80073b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	378c      	adds	r7, #140	@ 0x8c
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	08007fad 	.word	0x08007fad
 80073f8:	08007c49 	.word	0x08007c49
 80073fc:	08007a91 	.word	0x08007a91
 8007400:	080078d9 	.word	0x080078d9

08007404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b095      	sub	sp, #84	@ 0x54
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800742a:	643b      	str	r3, [r7, #64]	@ 0x40
 800742c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007430:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e6      	bne.n	800740c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	61fb      	str	r3, [r7, #28]
   return(result);
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e3      	bne.n	800743e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800747a:	2b01      	cmp	r3, #1
 800747c:	d118      	bne.n	80074b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	60bb      	str	r3, [r7, #8]
   return(result);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0310 	bic.w	r3, r3, #16
 8007492:	647b      	str	r3, [r7, #68]	@ 0x44
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6979      	ldr	r1, [r7, #20]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	613b      	str	r3, [r7, #16]
   return(result);
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e6      	bne.n	800747e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074c4:	bf00      	nop
 80074c6:	3754      	adds	r7, #84	@ 0x54
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fb12 	bl	8006b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007500:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	220f      	movs	r2, #15
 8007510:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0208 	orr.w	r2, r2, #8
 8007520:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff faf7 	bl	8006b24 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800753e:	b480      	push	{r7}
 8007540:	b08f      	sub	sp, #60	@ 0x3c
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	2b21      	cmp	r3, #33	@ 0x21
 800754e:	d14c      	bne.n	80075ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d132      	bne.n	80075c2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	61fb      	str	r3, [r7, #28]
   return(result);
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800757c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	60bb      	str	r3, [r7, #8]
   return(result);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6979      	ldr	r1, [r7, #20]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80075c0:	e013      	b.n	80075ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c6:	781a      	ldrb	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80075ea:	bf00      	nop
 80075ec:	373c      	adds	r7, #60	@ 0x3c
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b091      	sub	sp, #68	@ 0x44
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007604:	2b21      	cmp	r3, #33	@ 0x21
 8007606:	d151      	bne.n	80076ac <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d132      	bne.n	800767a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	623b      	str	r3, [r7, #32]
   return(result);
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007628:	63bb      	str	r3, [r7, #56]	@ 0x38
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007632:	633b      	str	r3, [r7, #48]	@ 0x30
 8007634:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	60fb      	str	r3, [r7, #12]
   return(result);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	617b      	str	r3, [r7, #20]
   return(result);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e6      	bne.n	8007646 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007678:	e018      	b.n	80076ac <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800768e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007694:	1c9a      	adds	r2, r3, #2
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80076ac:	bf00      	nop
 80076ae:	3744      	adds	r7, #68	@ 0x44
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b091      	sub	sp, #68	@ 0x44
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c6:	2b21      	cmp	r3, #33	@ 0x21
 80076c8:	d160      	bne.n	800778c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80076d2:	e057      	b.n	8007784 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d133      	bne.n	8007748 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	623b      	str	r3, [r7, #32]
   return(result);
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80076f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007700:	633a      	str	r2, [r7, #48]	@ 0x30
 8007702:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e5      	bne.n	80076e0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	60fb      	str	r3, [r7, #12]
   return(result);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	69b9      	ldr	r1, [r7, #24]
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	617b      	str	r3, [r7, #20]
   return(result);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e6      	bne.n	8007714 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007746:	e021      	b.n	800778c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007752:	2b00      	cmp	r3, #0
 8007754:	d013      	beq.n	800777e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800777e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007780:	3b01      	subs	r3, #1
 8007782:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007784:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1a4      	bne.n	80076d4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800778a:	e7ff      	b.n	800778c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800778c:	bf00      	nop
 800778e:	3744      	adds	r7, #68	@ 0x44
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b091      	sub	sp, #68	@ 0x44
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a6:	2b21      	cmp	r3, #33	@ 0x21
 80077a8:	d165      	bne.n	8007876 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80077b2:	e05c      	b.n	800786e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d133      	bne.n	8007828 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	60bb      	str	r3, [r7, #8]
   return(result);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007808:	633b      	str	r3, [r7, #48]	@ 0x30
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6979      	ldr	r1, [r7, #20]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	613b      	str	r3, [r7, #16]
   return(result);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e6      	bne.n	80077f4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007826:	e026      	b.n	8007876 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007832:	2b00      	cmp	r3, #0
 8007834:	d018      	beq.n	8007868 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800783c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800784a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007850:	1c9a      	adds	r2, r3, #2
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007868:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800786a:	3b01      	subs	r3, #1
 800786c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800786e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007870:	2b00      	cmp	r3, #0
 8007872:	d19f      	bne.n	80077b4 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007874:	e7ff      	b.n	8007876 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007876:	bf00      	nop
 8007878:	3744      	adds	r7, #68	@ 0x44
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b088      	sub	sp, #32
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	60bb      	str	r3, [r7, #8]
   return(result);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6979      	ldr	r1, [r7, #20]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	613b      	str	r3, [r7, #16]
   return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff f916 	bl	8006afc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d0:	bf00      	nop
 80078d2:	3720      	adds	r7, #32
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b09c      	sub	sp, #112	@ 0x70
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078f0:	2b22      	cmp	r3, #34	@ 0x22
 80078f2:	f040 80be 	bne.w	8007a72 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007900:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007904:	b2d9      	uxtb	r1, r3
 8007906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800790a:	b2da      	uxtb	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007910:	400a      	ands	r2, r1
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 80a1 	bne.w	8007a82 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800794e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800795e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007960:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800796c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e6      	bne.n	8007940 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3308      	adds	r3, #8
 8007978:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	667b      	str	r3, [r7, #100]	@ 0x64
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007992:	647a      	str	r2, [r7, #68]	@ 0x44
 8007994:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e5      	bne.n	8007972 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a33      	ldr	r2, [pc, #204]	@ (8007a8c <UART_RxISR_8BIT+0x1b4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d01f      	beq.n	8007a04 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d018      	beq.n	8007a04 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	623b      	str	r3, [r7, #32]
   return(result);
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80079f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e6      	bne.n	80079d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d12e      	bne.n	8007a6a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0310 	bic.w	r3, r3, #16
 8007a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	69b9      	ldr	r1, [r7, #24]
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e6      	bne.n	8007a12 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d103      	bne.n	8007a5a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2210      	movs	r2, #16
 8007a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff f868 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a68:	e00b      	b.n	8007a82 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7f9 fae0 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8007a70:	e007      	b.n	8007a82 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	699a      	ldr	r2, [r3, #24]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0208 	orr.w	r2, r2, #8
 8007a80:	619a      	str	r2, [r3, #24]
}
 8007a82:	bf00      	nop
 8007a84:	3770      	adds	r7, #112	@ 0x70
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	44002400 	.word	0x44002400

08007a90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b09c      	sub	sp, #112	@ 0x70
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aa8:	2b22      	cmp	r3, #34	@ 0x22
 8007aaa:	f040 80be 	bne.w	8007c2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007abc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007abe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007ac2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007acc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 80a1 	bne.w	8007c3a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b16:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b18:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e6      	bne.n	8007af8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	f023 0301 	bic.w	r3, r3, #1
 8007b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e5      	bne.n	8007b2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a33      	ldr	r2, [pc, #204]	@ (8007c44 <UART_RxISR_16BIT+0x1b4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d01f      	beq.n	8007bbc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d018      	beq.n	8007bbc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007baa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d12e      	bne.n	8007c22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6979      	ldr	r1, [r7, #20]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e6      	bne.n	8007bca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f003 0310 	and.w	r3, r3, #16
 8007c06:	2b10      	cmp	r3, #16
 8007c08:	d103      	bne.n	8007c12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2210      	movs	r2, #16
 8007c10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fe ff8c 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c20:	e00b      	b.n	8007c3a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7f9 fa04 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8007c28:	e007      	b.n	8007c3a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0208 	orr.w	r2, r2, #8
 8007c38:	619a      	str	r2, [r3, #24]
}
 8007c3a:	bf00      	nop
 8007c3c:	3770      	adds	r7, #112	@ 0x70
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	44002400 	.word	0x44002400

08007c48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b0ac      	sub	sp, #176	@ 0xb0
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c56:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7e:	2b22      	cmp	r3, #34	@ 0x22
 8007c80:	f040 8183 	bne.w	8007f8a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c8a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c8e:	e126      	b.n	8007ede <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007c9e:	b2d9      	uxtb	r1, r3
 8007ca0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007caa:	400a      	ands	r2, r1
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d053      	beq.n	8007d8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d011      	beq.n	8007d12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00b      	beq.n	8007d12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d08:	f043 0201 	orr.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d011      	beq.n	8007d42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d38:	f043 0204 	orr.w	r2, r3, #4
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d011      	beq.n	8007d72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d68:	f043 0202 	orr.w	r2, r3, #2
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fe fec7 	bl	8006b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 80a3 	bne.w	8007ede <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dbc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007dc0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e4      	bne.n	8007d98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007df6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007df8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007dfc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007e04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e1      	bne.n	8007dce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a60      	ldr	r2, [pc, #384]	@ (8007fa4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d021      	beq.n	8007e6c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d01a      	beq.n	8007e6c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e58:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e5a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e4      	bne.n	8007e36 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d130      	bne.n	8007ed6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	f023 0310 	bic.w	r3, r3, #16
 8007e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e4      	bne.n	8007e7a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f003 0310 	and.w	r3, r3, #16
 8007eba:	2b10      	cmp	r3, #16
 8007ebc:	d103      	bne.n	8007ec6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2210      	movs	r2, #16
 8007ec4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ecc:	4619      	mov	r1, r3
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fe fe32 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007ed4:	e00e      	b.n	8007ef4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7f9 f8aa 	bl	8001030 <HAL_UART_RxCpltCallback>
        break;
 8007edc:	e00a      	b.n	8007ef4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ede:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d006      	beq.n	8007ef4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f47f aece 	bne.w	8007c90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007efa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007efe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d049      	beq.n	8007f9a <UART_RxISR_8BIT_FIFOEN+0x352>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f0c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d242      	bcs.n	8007f9a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3308      	adds	r3, #8
 8007f34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007f38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e3      	bne.n	8007f14 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a16      	ldr	r2, [pc, #88]	@ (8007fa8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007f50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f043 0320 	orr.w	r3, r3, #32
 8007f66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f74:	61bb      	str	r3, [r7, #24]
 8007f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	6979      	ldr	r1, [r7, #20]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	613b      	str	r3, [r7, #16]
   return(result);
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e4      	bne.n	8007f52 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f88:	e007      	b.n	8007f9a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0208 	orr.w	r2, r2, #8
 8007f98:	619a      	str	r2, [r3, #24]
}
 8007f9a:	bf00      	nop
 8007f9c:	37b0      	adds	r7, #176	@ 0xb0
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	44002400 	.word	0x44002400
 8007fa8:	080078d9 	.word	0x080078d9

08007fac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b0ae      	sub	sp, #184	@ 0xb8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007fba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fe2:	2b22      	cmp	r3, #34	@ 0x22
 8007fe4:	f040 8187 	bne.w	80082f6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ff2:	e12a      	b.n	800824a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008006:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800800a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800800e:	4013      	ands	r3, r2
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008016:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800803e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b00      	cmp	r3, #0
 8008048:	d053      	beq.n	80080f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800804a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d011      	beq.n	800807a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800805a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2201      	movs	r2, #1
 8008068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008070:	f043 0201 	orr.w	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800807a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d011      	beq.n	80080aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2202      	movs	r2, #2
 8008098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a0:	f043 0204 	orr.w	r2, r3, #4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d011      	beq.n	80080da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80080b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2204      	movs	r2, #4
 80080c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d0:	f043 0202 	orr.w	r2, r3, #2
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d006      	beq.n	80080f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7fe fd13 	bl	8006b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f040 80a5 	bne.w	800824a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800810e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008122:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008126:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800812a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e2      	bne.n	8008100 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3308      	adds	r3, #8
 8008140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800814a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800814c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008162:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008164:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008168:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e1      	bne.n	800813a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a60      	ldr	r2, [pc, #384]	@ (8008310 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d021      	beq.n	80081d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d01a      	beq.n	80081d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e4      	bne.n	80081a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d130      	bne.n	8008242 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f6:	f023 0310 	bic.w	r3, r3, #16
 80081fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008208:	647b      	str	r3, [r7, #68]	@ 0x44
 800820a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800820e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e4      	bne.n	80081e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f003 0310 	and.w	r3, r3, #16
 8008226:	2b10      	cmp	r3, #16
 8008228:	d103      	bne.n	8008232 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2210      	movs	r2, #16
 8008230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7fe fc7c 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008240:	e00e      	b.n	8008260 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7f8 fef4 	bl	8001030 <HAL_UART_RxCpltCallback>
        break;
 8008248:	e00a      	b.n	8008260 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800824a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800824e:	2b00      	cmp	r3, #0
 8008250:	d006      	beq.n	8008260 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f aeca 	bne.w	8007ff4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008266:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800826a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800826e:	2b00      	cmp	r3, #0
 8008270:	d049      	beq.n	8008306 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008278:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800827c:	429a      	cmp	r2, r3
 800827e:	d242      	bcs.n	8008306 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	623b      	str	r3, [r7, #32]
   return(result);
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008296:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80082a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80082a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e3      	bne.n	8008280 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a16      	ldr	r2, [pc, #88]	@ (8008314 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80082bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f043 0320 	orr.w	r3, r3, #32
 80082d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	617b      	str	r3, [r7, #20]
   return(result);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e4      	bne.n	80082be <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f4:	e007      	b.n	8008306 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699a      	ldr	r2, [r3, #24]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0208 	orr.w	r2, r2, #8
 8008304:	619a      	str	r2, [r3, #24]
}
 8008306:	bf00      	nop
 8008308:	37b8      	adds	r7, #184	@ 0xb8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	44002400 	.word	0x44002400
 8008314:	08007a91 	.word	0x08007a91

08008318 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <HAL_UARTEx_DisableFifoMode+0x16>
 8008366:	2302      	movs	r3, #2
 8008368:	e027      	b.n	80083ba <HAL_UARTEx_DisableFifoMode+0x66>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2224      	movs	r2, #36	@ 0x24
 8008376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008398:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d101      	bne.n	80083de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083da:	2302      	movs	r3, #2
 80083dc:	e02d      	b.n	800843a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2224      	movs	r2, #36	@ 0x24
 80083ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0201 	bic.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f850 	bl	80084c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008456:	2302      	movs	r3, #2
 8008458:	e02d      	b.n	80084b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2224      	movs	r2, #36	@ 0x24
 8008466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f812 	bl	80084c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d108      	bne.n	80084e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084e0:	e031      	b.n	8008546 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084e2:	2308      	movs	r3, #8
 80084e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084e6:	2308      	movs	r3, #8
 80084e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	0e5b      	lsrs	r3, r3, #25
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	0f5b      	lsrs	r3, r3, #29
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	7b3a      	ldrb	r2, [r7, #12]
 800850e:	4911      	ldr	r1, [pc, #68]	@ (8008554 <UARTEx_SetNbDataToProcess+0x94>)
 8008510:	5c8a      	ldrb	r2, [r1, r2]
 8008512:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008516:	7b3a      	ldrb	r2, [r7, #12]
 8008518:	490f      	ldr	r1, [pc, #60]	@ (8008558 <UARTEx_SetNbDataToProcess+0x98>)
 800851a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800851c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	7b7a      	ldrb	r2, [r7, #13]
 800852c:	4909      	ldr	r1, [pc, #36]	@ (8008554 <UARTEx_SetNbDataToProcess+0x94>)
 800852e:	5c8a      	ldrb	r2, [r1, r2]
 8008530:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008534:	7b7a      	ldrb	r2, [r7, #13]
 8008536:	4908      	ldr	r1, [pc, #32]	@ (8008558 <UARTEx_SetNbDataToProcess+0x98>)
 8008538:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800853a:	fb93 f3f2 	sdiv	r3, r3, r2
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008546:	bf00      	nop
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	080085fc 	.word	0x080085fc
 8008558:	08008604 	.word	0x08008604

0800855c <memset>:
 800855c:	4402      	add	r2, r0
 800855e:	4603      	mov	r3, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4d0d      	ldr	r5, [pc, #52]	@ (80085a4 <__libc_init_array+0x38>)
 8008570:	2600      	movs	r6, #0
 8008572:	4c0d      	ldr	r4, [pc, #52]	@ (80085a8 <__libc_init_array+0x3c>)
 8008574:	1b64      	subs	r4, r4, r5
 8008576:	10a4      	asrs	r4, r4, #2
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	4d0b      	ldr	r5, [pc, #44]	@ (80085ac <__libc_init_array+0x40>)
 800857e:	2600      	movs	r6, #0
 8008580:	4c0b      	ldr	r4, [pc, #44]	@ (80085b0 <__libc_init_array+0x44>)
 8008582:	f000 f817 	bl	80085b4 <_init>
 8008586:	1b64      	subs	r4, r4, r5
 8008588:	10a4      	asrs	r4, r4, #2
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	f855 3b04 	ldr.w	r3, [r5], #4
 8008594:	3601      	adds	r6, #1
 8008596:	4798      	blx	r3
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	f855 3b04 	ldr.w	r3, [r5], #4
 800859e:	3601      	adds	r6, #1
 80085a0:	4798      	blx	r3
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	08008614 	.word	0x08008614
 80085a8:	08008614 	.word	0x08008614
 80085ac:	08008614 	.word	0x08008614
 80085b0:	08008618 	.word	0x08008618

080085b4 <_init>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr

080085c0 <_fini>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr
